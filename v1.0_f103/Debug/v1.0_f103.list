
v1.0_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800be24  0800be24  0001be24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd94  0800cd94  00020150  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd94  0800cd94  00020150  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd94  0800cd94  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800cd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ba0  20000150  0800ceec  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003cf0  0800ceec  00023cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c009  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004990  00000000  00000000  0003c182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  000421d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b59b  00000000  00000000  000437c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b38a  00000000  00000000  0005ed5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff9e  00000000  00000000  0007a0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a083  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006948  00000000  00000000  0010a0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000150 	.word	0x20000150
 8000128:	00000000 	.word	0x00000000
 800012c:	0800be0c 	.word	0x0800be0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000154 	.word	0x20000154
 8000148:	0800be0c 	.word	0x0800be0c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <httpget_init>:
bool ESP8266_createTCP(uint8_t * addr, uint32_t port);
extern bool ESP8266_setOprToStationSoftAP(uint8_t pattern1, uint8_t pattern2);
extern bool ESP8266_joinAP(uint8_t *ssid, uint8_t *pwd, uint8_t pattern);

void httpget_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 8000174:	2103      	movs	r1, #3
 8000176:	2003      	movs	r0, #3
 8000178:	f000 fd78 	bl	8000c6c <ESP8266_setOprToStationSoftAP>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d00b      	beq.n	800019a <httpget_init+0x2a>
	{
		printf("Set AP/STA Mode OK\n");
 8000182:	4817      	ldr	r0, [pc, #92]	; (80001e0 <httpget_init+0x70>)
 8000184:	f00a fa36 	bl	800a5f4 <puts>
	}
	else {
		printf("Set AP/STA Mode failed\n");
		return -1;
	}
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 8000188:	2203      	movs	r2, #3
 800018a:	4916      	ldr	r1, [pc, #88]	; (80001e4 <httpget_init+0x74>)
 800018c:	4816      	ldr	r0, [pc, #88]	; (80001e8 <httpget_init+0x78>)
 800018e:	f000 fda3 	bl	8000cd8 <ESP8266_joinAP>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d00f      	beq.n	80001b8 <httpget_init+0x48>
 8000198:	e003      	b.n	80001a2 <httpget_init+0x32>
		printf("Set AP/STA Mode failed\n");
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <httpget_init+0x7c>)
 800019c:	f00a fa2a 	bl	800a5f4 <puts>
		return -1;
 80001a0:	e01c      	b.n	80001dc <httpget_init+0x6c>
	{
		printf("Connect to WiFi ok\n");
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <httpget_init+0x80>)
 80001a4:	f00a fa26 	bl	800a5f4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 80001a8:	f000 fdb2 	bl	8000d10 <ESP8266_getLocalIP>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4619      	mov	r1, r3
 80001b0:	4810      	ldr	r0, [pc, #64]	; (80001f4 <httpget_init+0x84>)
 80001b2:	f00a f985 	bl	800a4c0 <iprintf>
 80001b6:	e002      	b.n	80001be <httpget_init+0x4e>
	}
	else
	{
		printf("Connect to WiFi failed \n");
 80001b8:	480f      	ldr	r0, [pc, #60]	; (80001f8 <httpget_init+0x88>)
 80001ba:	f00a fa1b 	bl	800a5f4 <puts>
	}
	if(ESP8266_enableMUX())
 80001be:	f000 fdb1 	bl	8000d24 <ESP8266_enableMUX>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d005      	beq.n	80001d4 <httpget_init+0x64>
	{
		printf("enableMux OK\n");
 80001c8:	480c      	ldr	r0, [pc, #48]	; (80001fc <httpget_init+0x8c>)
 80001ca:	f00a fa13 	bl	800a5f4 <puts>
	{
		printf("enableMux failed\n");
		return -1;
	}

	httpclient_loop();
 80001ce:	f000 f8c3 	bl	8000358 <httpclient_loop>
 80001d2:	e003      	b.n	80001dc <httpget_init+0x6c>
		printf("enableMux failed\n");
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <httpget_init+0x90>)
 80001d6:	f00a fa0d 	bl	800a5f4 <puts>
		return -1;
 80001da:	bf00      	nop

}
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	0800be24 	.word	0x0800be24
 80001e4:	0800be50 	.word	0x0800be50
 80001e8:	0800be5c 	.word	0x0800be5c
 80001ec:	0800be38 	.word	0x0800be38
 80001f0:	0800be64 	.word	0x0800be64
 80001f4:	0800be78 	.word	0x0800be78
 80001f8:	0800be88 	.word	0x0800be88
 80001fc:	0800bea0 	.word	0x0800bea0
 8000200:	0800beb0 	.word	0x0800beb0

08000204 <http_action>:
extern uart_rx_queue_t stdin_uart;
extern bool ESP8266_createTCP_mux(uint8_t mux_id, uint8_t * addr, uint32_t port);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
extern bool ESP8266_releaseTCP_mux(uint8_t mux_id);
void http_action()
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b0b2      	sub	sp, #200	; 0xc8
 8000208:	af00      	add	r7, sp, #0
	uint8_t buffer[128] = {0};
 800020a:	2300      	movs	r3, #0
 800020c:	643b      	str	r3, [r7, #64]	; 0x40
 800020e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000212:	227c      	movs	r2, #124	; 0x7c
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f00a f8a3 	bl	800a362 <memset>
	uint8_t mux_id = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	printf("Create TCP ");
 8000222:	4841      	ldr	r0, [pc, #260]	; (8000328 <http_action+0x124>)
 8000224:	f00a f94c 	bl	800a4c0 <iprintf>
	if(ESP8266_createTCP_mux(mux_id, HOST_NAME, HOST_PORT ))
 8000228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800022c:	2250      	movs	r2, #80	; 0x50
 800022e:	493f      	ldr	r1, [pc, #252]	; (800032c <http_action+0x128>)
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fd7f 	bl	8000d34 <ESP8266_createTCP_mux>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d003      	beq.n	8000244 <http_action+0x40>
	{
		printf("OK\n");
 800023c:	483c      	ldr	r0, [pc, #240]	; (8000330 <http_action+0x12c>)
 800023e:	f00a f9d9 	bl	800a5f4 <puts>
 8000242:	e002      	b.n	800024a <http_action+0x46>
	}
	else
	{
		printf("failed\n");
 8000244:	483b      	ldr	r0, [pc, #236]	; (8000334 <http_action+0x130>)
 8000246:	f00a f9d5 	bl	800a5f4 <puts>
	}
	char hello[] = "GET / HTTP/1.1\r\nHost: www.yahoo.com\r\nConnection: close\r\n\r\n";
 800024a:	4b3b      	ldr	r3, [pc, #236]	; (8000338 <http_action+0x134>)
 800024c:	1d3c      	adds	r4, r7, #4
 800024e:	461d      	mov	r5, r3
 8000250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000260:	c403      	stmia	r4!, {r0, r1}
 8000262:	8022      	strh	r2, [r4, #0]
 8000264:	3402      	adds	r4, #2
 8000266:	0c13      	lsrs	r3, r2, #16
 8000268:	7023      	strb	r3, [r4, #0]
    if (ESP8266_send_mux(mux_id, hello, strlen(hello)))
 800026a:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ff75 	bl	8000160 <strlen>
 8000276:	4602      	mov	r2, r0
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	4619      	mov	r1, r3
 800027c:	4620      	mov	r0, r4
 800027e:	f000 fdbb 	bl	8000df8 <ESP8266_send_mux>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d003      	beq.n	8000290 <http_action+0x8c>
    {
    	printf("Send OK\n");
 8000288:	482c      	ldr	r0, [pc, #176]	; (800033c <http_action+0x138>)
 800028a:	f00a f9b3 	bl	800a5f4 <puts>
 800028e:	e002      	b.n	8000296 <http_action+0x92>
    }
    else
    {
    	printf("Send  failed\n");
 8000290:	482b      	ldr	r0, [pc, #172]	; (8000340 <http_action+0x13c>)
 8000292:	f00a f9af 	bl	800a5f4 <puts>
    }

    uint32_t len = ESP8266_recv_mux_p(&mux_id, buffer, sizeof(buffer), 10000);
 8000296:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800029a:	f107 003f 	add.w	r0, r7, #63	; 0x3f
 800029e:	f242 7310 	movw	r3, #10000	; 0x2710
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	f001 fabc 	bl	8001820 <ESP8266_recv_mux_p>
 80002a8:	4603      	mov	r3, r0
 80002aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    if (len > 0)
 80002ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d01d      	beq.n	80002f2 <http_action+0xee>
    {

    	printf("Received:[");
 80002b6:	4823      	ldr	r0, [pc, #140]	; (8000344 <http_action+0x140>)
 80002b8:	f00a f902 	bl	800a4c0 <iprintf>

    	for (uint32_t i = 0; i < len; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80002c2:	e00d      	b.n	80002e0 <http_action+0xdc>
    	{
    		printf("%c",(char)buffer[i]);
 80002c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80002c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80002cc:	4413      	add	r3, r2
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f00a f90d 	bl	800a4f0 <putchar>
    	for (uint32_t i = 0; i < len; i++)
 80002d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80002da:	3301      	adds	r3, #1
 80002dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80002e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80002e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d3eb      	bcc.n	80002c4 <http_action+0xc0>
    	}

    	printf("]\n");
 80002ec:	4816      	ldr	r0, [pc, #88]	; (8000348 <http_action+0x144>)
 80002ee:	f00a f981 	bl	800a5f4 <puts>
    }
    printf("Release TCP ");
 80002f2:	4816      	ldr	r0, [pc, #88]	; (800034c <http_action+0x148>)
 80002f4:	f00a f8e4 	bl	800a4c0 <iprintf>
    if (ESP8266_releaseTCP_mux(mux_id))
 80002f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fd2d 	bl	8000d5c <ESP8266_releaseTCP_mux>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d003      	beq.n	8000310 <http_action+0x10c>
    {
    	printf(" OK\n");
 8000308:	4811      	ldr	r0, [pc, #68]	; (8000350 <http_action+0x14c>)
 800030a:	f00a f973 	bl	800a5f4 <puts>
 800030e:	e002      	b.n	8000316 <http_action+0x112>
    }
    else
    {
    	printf(" failed\n");
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <http_action+0x150>)
 8000312:	f00a f96f 	bl	800a5f4 <puts>
    }

    HAL_Delay(5000);
 8000316:	f241 3088 	movw	r0, #5000	; 0x1388
 800031a:	f003 f957 	bl	80035cc <HAL_Delay>
}
 800031e:	bf00      	nop
 8000320:	37c8      	adds	r7, #200	; 0xc8
 8000322:	46bd      	mov	sp, r7
 8000324:	bdb0      	pop	{r4, r5, r7, pc}
 8000326:	bf00      	nop
 8000328:	0800bec4 	.word	0x0800bec4
 800032c:	0800bed0 	.word	0x0800bed0
 8000330:	0800bee0 	.word	0x0800bee0
 8000334:	0800bee4 	.word	0x0800bee4
 8000338:	0800bf30 	.word	0x0800bf30
 800033c:	0800beec 	.word	0x0800beec
 8000340:	0800bef4 	.word	0x0800bef4
 8000344:	0800bf04 	.word	0x0800bf04
 8000348:	0800bf10 	.word	0x0800bf10
 800034c:	0800bf14 	.word	0x0800bf14
 8000350:	0800bf24 	.word	0x0800bf24
 8000354:	0800bf28 	.word	0x0800bf28

08000358 <httpclient_loop>:
void httpclient_loop()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 800035c:	4805      	ldr	r0, [pc, #20]	; (8000374 <httpclient_loop+0x1c>)
 800035e:	f001 fffd 	bl	800235c <is_available>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d102      	bne.n	800036e <httpclient_loop+0x16>
		http_action();
 8000368:	f7ff ff4c 	bl	8000204 <http_action>
		if(is_available(&stdin_uart)) break;
 800036c:	e7f6      	b.n	800035c <httpclient_loop+0x4>
 800036e:	bf00      	nop

	}
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000020 	.word	0x20000020

08000378 <tcpclient_init>:
bool ESP8266_createTCP(uint8_t * addr, uint32_t port);
extern bool ESP8266_setOprToStationSoftAP(uint8_t pattern1, uint8_t pattern2);
extern bool ESP8266_joinAP(uint8_t *ssid, uint8_t *pwd, uint8_t pattern);

void tcpclient_init()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 800037c:	2103      	movs	r1, #3
 800037e:	2003      	movs	r0, #3
 8000380:	f000 fc74 	bl	8000c6c <ESP8266_setOprToStationSoftAP>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00b      	beq.n	80003a2 <tcpclient_init+0x2a>
	{
		printf("Set AP/STA Mode OK\n");
 800038a:	4817      	ldr	r0, [pc, #92]	; (80003e8 <tcpclient_init+0x70>)
 800038c:	f00a f932 	bl	800a5f4 <puts>
	}
	else {
		printf("Set AP/STA Mode failed\n");
		return -1;
	}
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 8000390:	2203      	movs	r2, #3
 8000392:	4916      	ldr	r1, [pc, #88]	; (80003ec <tcpclient_init+0x74>)
 8000394:	4816      	ldr	r0, [pc, #88]	; (80003f0 <tcpclient_init+0x78>)
 8000396:	f000 fc9f 	bl	8000cd8 <ESP8266_joinAP>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d00f      	beq.n	80003c0 <tcpclient_init+0x48>
 80003a0:	e003      	b.n	80003aa <tcpclient_init+0x32>
		printf("Set AP/STA Mode failed\n");
 80003a2:	4814      	ldr	r0, [pc, #80]	; (80003f4 <tcpclient_init+0x7c>)
 80003a4:	f00a f926 	bl	800a5f4 <puts>
		return -1;
 80003a8:	e01c      	b.n	80003e4 <tcpclient_init+0x6c>
	{
		printf("Connect to WiFi ok\n");
 80003aa:	4813      	ldr	r0, [pc, #76]	; (80003f8 <tcpclient_init+0x80>)
 80003ac:	f00a f922 	bl	800a5f4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 80003b0:	f000 fcae 	bl	8000d10 <ESP8266_getLocalIP>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4810      	ldr	r0, [pc, #64]	; (80003fc <tcpclient_init+0x84>)
 80003ba:	f00a f881 	bl	800a4c0 <iprintf>
 80003be:	e002      	b.n	80003c6 <tcpclient_init+0x4e>
	}
	else
	{
		printf("Connect to WiFi failed \n");
 80003c0:	480f      	ldr	r0, [pc, #60]	; (8000400 <tcpclient_init+0x88>)
 80003c2:	f00a f917 	bl	800a5f4 <puts>
	}
	if(ESP8266_enableMUX())
 80003c6:	f000 fcad 	bl	8000d24 <ESP8266_enableMUX>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d005      	beq.n	80003dc <tcpclient_init+0x64>
	{
		printf("enableMux OK\n");
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <tcpclient_init+0x8c>)
 80003d2:	f00a f90f 	bl	800a5f4 <puts>
	{
		printf("enableMux failed\n");
		return -1;
	}

	tcpclient_loop();
 80003d6:	f000 f8bd 	bl	8000554 <tcpclient_loop>
 80003da:	e003      	b.n	80003e4 <tcpclient_init+0x6c>
		printf("enableMux failed\n");
 80003dc:	480a      	ldr	r0, [pc, #40]	; (8000408 <tcpclient_init+0x90>)
 80003de:	f00a f909 	bl	800a5f4 <puts>
		return -1;
 80003e2:	bf00      	nop

}
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	0800bf6c 	.word	0x0800bf6c
 80003ec:	0800bf98 	.word	0x0800bf98
 80003f0:	0800bfa4 	.word	0x0800bfa4
 80003f4:	0800bf80 	.word	0x0800bf80
 80003f8:	0800bfac 	.word	0x0800bfac
 80003fc:	0800bfc0 	.word	0x0800bfc0
 8000400:	0800bfd0 	.word	0x0800bfd0
 8000404:	0800bfe8 	.word	0x0800bfe8
 8000408:	0800bff8 	.word	0x0800bff8

0800040c <client_loop>:
extern uart_rx_queue_t stdin_uart;
extern bool ESP8266_createTCP_mux(uint8_t mux_id, uint8_t * addr, uint32_t port);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
extern bool ESP8266_releaseTCP_mux(uint8_t mux_id);
void client_loop()
{
 800040c:	b5b0      	push	{r4, r5, r7, lr}
 800040e:	b0ac      	sub	sp, #176	; 0xb0
 8000410:	af00      	add	r7, sp, #0
	uint8_t buffer[128] = {0};
 8000412:	2300      	movs	r3, #0
 8000414:	62bb      	str	r3, [r7, #40]	; 0x28
 8000416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800041a:	227c      	movs	r2, #124	; 0x7c
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f009 ff9f 	bl	800a362 <memset>
	uint8_t mux_id = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	printf("Create TCP ");
 800042a:	483e      	ldr	r0, [pc, #248]	; (8000524 <client_loop+0x118>)
 800042c:	f00a f848 	bl	800a4c0 <iprintf>
	if(ESP8266_createTCP_mux(mux_id, HOST_NAME, HOST_PORT ))
 8000430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000434:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000438:	493b      	ldr	r1, [pc, #236]	; (8000528 <client_loop+0x11c>)
 800043a:	4618      	mov	r0, r3
 800043c:	f000 fc7a 	bl	8000d34 <ESP8266_createTCP_mux>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <client_loop+0x42>
	{
		printf("OK\n");
 8000446:	4839      	ldr	r0, [pc, #228]	; (800052c <client_loop+0x120>)
 8000448:	f00a f8d4 	bl	800a5f4 <puts>
 800044c:	e002      	b.n	8000454 <client_loop+0x48>
	}
	else
	{
		printf("failed\n");
 800044e:	4838      	ldr	r0, [pc, #224]	; (8000530 <client_loop+0x124>)
 8000450:	f00a f8d0 	bl	800a5f4 <puts>
	}
	char hello[] = "Hello, this is jcnet tcp client !";
 8000454:	4b37      	ldr	r3, [pc, #220]	; (8000534 <client_loop+0x128>)
 8000456:	1d3c      	adds	r4, r7, #4
 8000458:	461d      	mov	r5, r3
 800045a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800045c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800045e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000462:	682b      	ldr	r3, [r5, #0]
 8000464:	8023      	strh	r3, [r4, #0]
    if (ESP8266_send_mux(mux_id, hello, strlen(hello)))
 8000466:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fe77 	bl	8000160 <strlen>
 8000472:	4602      	mov	r2, r0
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4620      	mov	r0, r4
 800047a:	f000 fcbd 	bl	8000df8 <ESP8266_send_mux>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d003      	beq.n	800048c <client_loop+0x80>
    {
    	printf("Send OK\n");
 8000484:	482c      	ldr	r0, [pc, #176]	; (8000538 <client_loop+0x12c>)
 8000486:	f00a f8b5 	bl	800a5f4 <puts>
 800048a:	e002      	b.n	8000492 <client_loop+0x86>
    }
    else
    {
    	printf("Send  failed\n");
 800048c:	482b      	ldr	r0, [pc, #172]	; (800053c <client_loop+0x130>)
 800048e:	f00a f8b1 	bl	800a5f4 <puts>
    }

    uint32_t len = ESP8266_recv_mux_p(&mux_id, buffer, sizeof(buffer), 10000);
 8000492:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000496:	f107 0027 	add.w	r0, r7, #39	; 0x27
 800049a:	f242 7310 	movw	r3, #10000	; 0x2710
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	f001 f9be 	bl	8001820 <ESP8266_recv_mux_p>
 80004a4:	4603      	mov	r3, r0
 80004a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if (len > 0)
 80004aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d01d      	beq.n	80004ee <client_loop+0xe2>
    {

    	printf("Received:[");
 80004b2:	4823      	ldr	r0, [pc, #140]	; (8000540 <client_loop+0x134>)
 80004b4:	f00a f804 	bl	800a4c0 <iprintf>

    	for (uint32_t i = 0; i < len; i++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80004be:	e00d      	b.n	80004dc <client_loop+0xd0>
    	{
    		printf("%c",(char)buffer[i]);
 80004c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80004c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80004c8:	4413      	add	r3, r2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f00a f80f 	bl	800a4f0 <putchar>
    	for (uint32_t i = 0; i < len; i++)
 80004d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80004d6:	3301      	adds	r3, #1
 80004d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80004dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80004e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3eb      	bcc.n	80004c0 <client_loop+0xb4>
    	}

    	printf("]\n");
 80004e8:	4816      	ldr	r0, [pc, #88]	; (8000544 <client_loop+0x138>)
 80004ea:	f00a f883 	bl	800a5f4 <puts>
    }
    printf("Release TCP ");
 80004ee:	4816      	ldr	r0, [pc, #88]	; (8000548 <client_loop+0x13c>)
 80004f0:	f009 ffe6 	bl	800a4c0 <iprintf>
    if (ESP8266_releaseTCP_mux(mux_id))
 80004f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fc2f 	bl	8000d5c <ESP8266_releaseTCP_mux>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d003      	beq.n	800050c <client_loop+0x100>
    {
    	printf(" OK\n");
 8000504:	4811      	ldr	r0, [pc, #68]	; (800054c <client_loop+0x140>)
 8000506:	f00a f875 	bl	800a5f4 <puts>
 800050a:	e002      	b.n	8000512 <client_loop+0x106>
    }
    else
    {
    	printf(" failed\n");
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <client_loop+0x144>)
 800050e:	f00a f871 	bl	800a5f4 <puts>
    }

    HAL_Delay(5000);
 8000512:	f241 3088 	movw	r0, #5000	; 0x1388
 8000516:	f003 f859 	bl	80035cc <HAL_Delay>
}
 800051a:	bf00      	nop
 800051c:	37b0      	adds	r7, #176	; 0xb0
 800051e:	46bd      	mov	sp, r7
 8000520:	bdb0      	pop	{r4, r5, r7, pc}
 8000522:	bf00      	nop
 8000524:	0800c00c 	.word	0x0800c00c
 8000528:	0800c018 	.word	0x0800c018
 800052c:	0800c028 	.word	0x0800c028
 8000530:	0800c02c 	.word	0x0800c02c
 8000534:	0800c078 	.word	0x0800c078
 8000538:	0800c034 	.word	0x0800c034
 800053c:	0800c03c 	.word	0x0800c03c
 8000540:	0800c04c 	.word	0x0800c04c
 8000544:	0800c058 	.word	0x0800c058
 8000548:	0800c05c 	.word	0x0800c05c
 800054c:	0800c06c 	.word	0x0800c06c
 8000550:	0800c070 	.word	0x0800c070

08000554 <tcpclient_loop>:
void tcpclient_loop()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <tcpclient_loop+0x1c>)
 800055a:	f001 feff 	bl	800235c <is_available>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <tcpclient_loop+0x16>
		client_loop();
 8000564:	f7ff ff52 	bl	800040c <client_loop>
		if(is_available(&stdin_uart)) break;
 8000568:	e7f6      	b.n	8000558 <tcpclient_loop+0x4>
 800056a:	bf00      	nop

	}
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000020 	.word	0x20000020

08000574 <tcpserver_init>:
extern uint8_t *ESP8266_getLocalIP();
extern bool ESP8266_enableMUX();
extern bool ESP8266_startTCPServer(uint32_t port);
int tcpserver_loop();
int tcpserver_init()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 8000578:	2103      	movs	r1, #3
 800057a:	2003      	movs	r0, #3
 800057c:	f000 fb76 	bl	8000c6c <ESP8266_setOprToStationSoftAP>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00b      	beq.n	800059e <tcpserver_init+0x2a>
	{
		printf("Set AP/STA Mode OK\n");
 8000586:	482a      	ldr	r0, [pc, #168]	; (8000630 <tcpserver_init+0xbc>)
 8000588:	f00a f834 	bl	800a5f4 <puts>
	}
	else {
		printf("Set AP/STA Mode failed\n");
		return -1;
	}
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 800058c:	2203      	movs	r2, #3
 800058e:	4929      	ldr	r1, [pc, #164]	; (8000634 <tcpserver_init+0xc0>)
 8000590:	4829      	ldr	r0, [pc, #164]	; (8000638 <tcpserver_init+0xc4>)
 8000592:	f000 fba1 	bl	8000cd8 <ESP8266_joinAP>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d016      	beq.n	80005ca <tcpserver_init+0x56>
 800059c:	e005      	b.n	80005aa <tcpserver_init+0x36>
		printf("Set AP/STA Mode failed\n");
 800059e:	4827      	ldr	r0, [pc, #156]	; (800063c <tcpserver_init+0xc8>)
 80005a0:	f00a f828 	bl	800a5f4 <puts>
		return -1;
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	e03f      	b.n	800062a <tcpserver_init+0xb6>
	{
		printf("Connect to WiFi ok\n");
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <tcpserver_init+0xcc>)
 80005ac:	f00a f822 	bl	800a5f4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 80005b0:	f000 fbae 	bl	8000d10 <ESP8266_getLocalIP>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4619      	mov	r1, r3
 80005b8:	4822      	ldr	r0, [pc, #136]	; (8000644 <tcpserver_init+0xd0>)
 80005ba:	f009 ff81 	bl	800a4c0 <iprintf>
	else
	{
		printf("Connect to WiFi failed \n");
		return -1;
	}
	if(ESP8266_enableMUX())
 80005be:	f000 fbb1 	bl	8000d24 <ESP8266_enableMUX>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d011      	beq.n	80005ec <tcpserver_init+0x78>
 80005c8:	e005      	b.n	80005d6 <tcpserver_init+0x62>
		printf("Connect to WiFi failed \n");
 80005ca:	481f      	ldr	r0, [pc, #124]	; (8000648 <tcpserver_init+0xd4>)
 80005cc:	f00a f812 	bl	800a5f4 <puts>
		return -1;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	e029      	b.n	800062a <tcpserver_init+0xb6>
	{
		printf("enableMux OK\n");
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <tcpserver_init+0xd8>)
 80005d8:	f00a f80c 	bl	800a5f4 <puts>
	else
	{
		printf("enableMux failed\n");
		return -1;
	}
	if(ESP8266_startTCPServer(8090))
 80005dc:	f641 709a 	movw	r0, #8090	; 0x1f9a
 80005e0:	f000 fbf8 	bl	8000dd4 <ESP8266_startTCPServer>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d010      	beq.n	800060c <tcpserver_init+0x98>
 80005ea:	e005      	b.n	80005f8 <tcpserver_init+0x84>
		printf("enableMux failed\n");
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <tcpserver_init+0xdc>)
 80005ee:	f00a f801 	bl	800a5f4 <puts>
		return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e018      	b.n	800062a <tcpserver_init+0xb6>
	{
	    printf("Start TCP server OK\n");
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <tcpserver_init+0xe0>)
 80005fa:	f009 fffb 	bl	800a5f4 <puts>
	else
	{
		printf("start TCP server failed\n");
		return -1;
	}
	if (ESP8266_setTCPServerTimeout(10))
 80005fe:	200a      	movs	r0, #10
 8000600:	f000 fbdc 	bl	8000dbc <ESP8266_setTCPServerTimeout>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00a      	beq.n	8000620 <tcpserver_init+0xac>
 800060a:	e005      	b.n	8000618 <tcpserver_init+0xa4>
		printf("start TCP server failed\n");
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <tcpserver_init+0xe4>)
 800060e:	f009 fff1 	bl	800a5f4 <puts>
		return -1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	e008      	b.n	800062a <tcpserver_init+0xb6>
	{
	    printf("Set TCP server timeout 10 seconds\n");
 8000618:	4810      	ldr	r0, [pc, #64]	; (800065c <tcpserver_init+0xe8>)
 800061a:	f009 ffeb 	bl	800a5f4 <puts>
 800061e:	e002      	b.n	8000626 <tcpserver_init+0xb2>
	}
	else
	{
		printf("Set TCP server timeout failed\n");
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <tcpserver_init+0xec>)
 8000622:	f009 ffe7 	bl	800a5f4 <puts>
	}
	tcpserver_loop();
 8000626:	f000 f8c1 	bl	80007ac <tcpserver_loop>
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	0800c09c 	.word	0x0800c09c
 8000634:	0800c0c8 	.word	0x0800c0c8
 8000638:	0800c0d4 	.word	0x0800c0d4
 800063c:	0800c0b0 	.word	0x0800c0b0
 8000640:	0800c0dc 	.word	0x0800c0dc
 8000644:	0800c0f0 	.word	0x0800c0f0
 8000648:	0800c100 	.word	0x0800c100
 800064c:	0800c118 	.word	0x0800c118
 8000650:	0800c128 	.word	0x0800c128
 8000654:	0800c13c 	.word	0x0800c13c
 8000658:	0800c150 	.word	0x0800c150
 800065c:	0800c168 	.word	0x0800c168
 8000660:	0800c18c 	.word	0x0800c18c

08000664 <loop>:
extern bool ESP8266_releaseTCP_mux(uint8_t mux_id);
extern uint32_t ESP8266_recv_mux_p(uint8_t *coming_mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
uint8_t *ESP8266_getIPStatus();
void loop()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0a4      	sub	sp, #144	; 0x90
 8000668:	af00      	add	r7, sp, #0
  uint8_t buffer[128] = {0};
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	227c      	movs	r2, #124	; 0x7c
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f009 fe73 	bl	800a362 <memset>
  uint8_t mux_id;

  uint32_t len = ESP8266_recv_mux_p(&mux_id, buffer, sizeof(buffer), 100);
 800067c:	f107 0108 	add.w	r1, r7, #8
 8000680:	1df8      	adds	r0, r7, #7
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	f001 f8cb 	bl	8001820 <ESP8266_recv_mux_p>
 800068a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

  if (len > 0)
 800068e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000692:	2b00      	cmp	r3, #0
 8000694:	d06f      	beq.n	8000776 <loop+0x112>
  {
    printf("Status:[");
 8000696:	483a      	ldr	r0, [pc, #232]	; (8000780 <loop+0x11c>)
 8000698:	f009 ff12 	bl	800a4c0 <iprintf>
    printf("%s",ESP8266_getIPStatus());
 800069c:	f000 fb2e 	bl	8000cfc <ESP8266_getIPStatus>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4619      	mov	r1, r3
 80006a4:	4837      	ldr	r0, [pc, #220]	; (8000784 <loop+0x120>)
 80006a6:	f009 ff0b 	bl	800a4c0 <iprintf>
    printf("]\n");
 80006aa:	4837      	ldr	r0, [pc, #220]	; (8000788 <loop+0x124>)
 80006ac:	f009 ffa2 	bl	800a5f4 <puts>

    printf("Received from :");
 80006b0:	4836      	ldr	r0, [pc, #216]	; (800078c <loop+0x128>)
 80006b2:	f009 ff05 	bl	800a4c0 <iprintf>
    printf("%d\n",mux_id);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4835      	ldr	r0, [pc, #212]	; (8000790 <loop+0x12c>)
 80006bc:	f009 ff00 	bl	800a4c0 <iprintf>
    printf("[");
 80006c0:	205b      	movs	r0, #91	; 0x5b
 80006c2:	f009 ff15 	bl	800a4f0 <putchar>

    for (uint32_t i = 0; i < len; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006cc:	e00d      	b.n	80006ea <loop+0x86>
    {
      printf("%c",(char)buffer[i]);
 80006ce:	f107 0208 	add.w	r2, r7, #8
 80006d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f009 ff08 	bl	800a4f0 <putchar>
    for (uint32_t i = 0; i < len; i++)
 80006e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006e4:	3301      	adds	r3, #1
 80006e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80006ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3eb      	bcc.n	80006ce <loop+0x6a>
    }

    printf("]\n");
 80006f6:	4824      	ldr	r0, [pc, #144]	; (8000788 <loop+0x124>)
 80006f8:	f009 ff7c 	bl	800a5f4 <puts>

    if (ESP8266_send_mux(mux_id, buffer, len))
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f107 0108 	add.w	r1, r7, #8
 8000702:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fb76 	bl	8000df8 <ESP8266_send_mux>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <loop+0xb6>
    {
    	printf("Send back OK\n");
 8000712:	4820      	ldr	r0, [pc, #128]	; (8000794 <loop+0x130>)
 8000714:	f009 ff6e 	bl	800a5f4 <puts>
 8000718:	e002      	b.n	8000720 <loop+0xbc>
    }
    else
    {
    	printf("Send back failed\n");
 800071a:	481f      	ldr	r0, [pc, #124]	; (8000798 <loop+0x134>)
 800071c:	f009 ff6a 	bl	800a5f4 <puts>
    }

    if (ESP8266_releaseTCP_mux(mux_id))
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fb1a 	bl	8000d5c <ESP8266_releaseTCP_mux>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00b      	beq.n	8000746 <loop+0xe2>
    {
      printf("Release TCP ");
 800072e:	481b      	ldr	r0, [pc, #108]	; (800079c <loop+0x138>)
 8000730:	f009 fec6 	bl	800a4c0 <iprintf>
      printf("%d",mux_id);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4619      	mov	r1, r3
 8000738:	4819      	ldr	r0, [pc, #100]	; (80007a0 <loop+0x13c>)
 800073a:	f009 fec1 	bl	800a4c0 <iprintf>
      printf(" OK\n");
 800073e:	4819      	ldr	r0, [pc, #100]	; (80007a4 <loop+0x140>)
 8000740:	f009 ff58 	bl	800a5f4 <puts>
 8000744:	e00a      	b.n	800075c <loop+0xf8>
    }
    else
    {
      printf("Release TCP ");
 8000746:	4815      	ldr	r0, [pc, #84]	; (800079c <loop+0x138>)
 8000748:	f009 feba 	bl	800a4c0 <iprintf>
      printf("%d",mux_id);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4619      	mov	r1, r3
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <loop+0x13c>)
 8000752:	f009 feb5 	bl	800a4c0 <iprintf>
      printf(" failed\n");
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <loop+0x144>)
 8000758:	f009 ff4c 	bl	800a5f4 <puts>
    }

    printf("Status:[");
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <loop+0x11c>)
 800075e:	f009 feaf 	bl	800a4c0 <iprintf>
    printf("%s",ESP8266_getIPStatus());
 8000762:	f000 facb 	bl	8000cfc <ESP8266_getIPStatus>
 8000766:	4603      	mov	r3, r0
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <loop+0x120>)
 800076c:	f009 fea8 	bl	800a4c0 <iprintf>
    printf("]\n");
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <loop+0x124>)
 8000772:	f009 ff3f 	bl	800a5f4 <puts>
  }
}
 8000776:	bf00      	nop
 8000778:	3790      	adds	r7, #144	; 0x90
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	0800c1ac 	.word	0x0800c1ac
 8000784:	0800c1b8 	.word	0x0800c1b8
 8000788:	0800c1bc 	.word	0x0800c1bc
 800078c:	0800c1c0 	.word	0x0800c1c0
 8000790:	0800c1d0 	.word	0x0800c1d0
 8000794:	0800c1d4 	.word	0x0800c1d4
 8000798:	0800c1e4 	.word	0x0800c1e4
 800079c:	0800c1f8 	.word	0x0800c1f8
 80007a0:	0800c208 	.word	0x0800c208
 80007a4:	0800c20c 	.word	0x0800c20c
 80007a8:	0800c210 	.word	0x0800c210

080007ac <tcpserver_loop>:
int tcpserver_loop()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <tcpserver_loop+0x20>)
 80007b2:	f001 fdd3 	bl	800235c <is_available>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <tcpserver_loop+0x16>
		loop();
 80007bc:	f7ff ff52 	bl	8000664 <loop>
		if(is_available(&stdin_uart)) break;
 80007c0:	e7f6      	b.n	80007b0 <tcpserver_loop+0x4>
 80007c2:	bf00      	nop

	}
}
 80007c4:	bf00      	nop
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000020 	.word	0x20000020

080007d0 <udpclient_init>:

extern bool ESP8266_setOprToStationSoftAP(uint8_t pattern1, uint8_t pattern2);
extern bool ESP8266_joinAP(uint8_t *ssid, uint8_t *pwd, uint8_t pattern);
extern void udpclient_loop();
void udpclient_init()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	if(ESP8266_setOprToStationSoftAP(DEFAULT_PATTERN,DEFAULT_PATTERN))
 80007d4:	2103      	movs	r1, #3
 80007d6:	2003      	movs	r0, #3
 80007d8:	f000 fa48 	bl	8000c6c <ESP8266_setOprToStationSoftAP>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00b      	beq.n	80007fa <udpclient_init+0x2a>
	{
		printf("Set AP/STA Mode OK\n");
 80007e2:	4817      	ldr	r0, [pc, #92]	; (8000840 <udpclient_init+0x70>)
 80007e4:	f009 ff06 	bl	800a5f4 <puts>
	}
	else {
		printf("Set AP/STA Mode failed\n");
		return -1;
	}
	if(ESP8266_joinAP(SSID,PASSWORD, DEFAULT_PATTERN ))
 80007e8:	2203      	movs	r2, #3
 80007ea:	4916      	ldr	r1, [pc, #88]	; (8000844 <udpclient_init+0x74>)
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <udpclient_init+0x78>)
 80007ee:	f000 fa73 	bl	8000cd8 <ESP8266_joinAP>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00f      	beq.n	8000818 <udpclient_init+0x48>
 80007f8:	e003      	b.n	8000802 <udpclient_init+0x32>
		printf("Set AP/STA Mode failed\n");
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <udpclient_init+0x7c>)
 80007fc:	f009 fefa 	bl	800a5f4 <puts>
		return -1;
 8000800:	e01c      	b.n	800083c <udpclient_init+0x6c>
	{
		printf("Connect to WiFi ok\n");
 8000802:	4813      	ldr	r0, [pc, #76]	; (8000850 <udpclient_init+0x80>)
 8000804:	f009 fef6 	bl	800a5f4 <puts>
		printf("IP addr = %s\n",ESP8266_getLocalIP());
 8000808:	f000 fa82 	bl	8000d10 <ESP8266_getLocalIP>
 800080c:	4603      	mov	r3, r0
 800080e:	4619      	mov	r1, r3
 8000810:	4810      	ldr	r0, [pc, #64]	; (8000854 <udpclient_init+0x84>)
 8000812:	f009 fe55 	bl	800a4c0 <iprintf>
 8000816:	e002      	b.n	800081e <udpclient_init+0x4e>
	}
	else
	{
		printf("Connect to WiFi failed \n");
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <udpclient_init+0x88>)
 800081a:	f009 feeb 	bl	800a5f4 <puts>
	}
	if(ESP8266_enableMUX())
 800081e:	f000 fa81 	bl	8000d24 <ESP8266_enableMUX>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d005      	beq.n	8000834 <udpclient_init+0x64>
	{
		printf("enableMux OK\n");
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <udpclient_init+0x8c>)
 800082a:	f009 fee3 	bl	800a5f4 <puts>
	{
		printf("enableMux failed\n");
		return -1;
	}

	udpclient_loop();
 800082e:	f000 f8bb 	bl	80009a8 <udpclient_loop>
 8000832:	e003      	b.n	800083c <udpclient_init+0x6c>
		printf("enableMux failed\n");
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <udpclient_init+0x90>)
 8000836:	f009 fedd 	bl	800a5f4 <puts>
		return -1;
 800083a:	bf00      	nop

}
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800c218 	.word	0x0800c218
 8000844:	0800c244 	.word	0x0800c244
 8000848:	0800c250 	.word	0x0800c250
 800084c:	0800c22c 	.word	0x0800c22c
 8000850:	0800c258 	.word	0x0800c258
 8000854:	0800c26c 	.word	0x0800c26c
 8000858:	0800c27c 	.word	0x0800c27c
 800085c:	0800c294 	.word	0x0800c294
 8000860:	0800c2a4 	.word	0x0800c2a4

08000864 <udp_client>:
extern bool ESP8266_unregisterUDP_mux(uint8_t mux_id);
extern bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len);
extern uint32_t ESP8266_recv_mux(uint8_t mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout);

void udp_client()
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b0ac      	sub	sp, #176	; 0xb0
 8000868:	af00      	add	r7, sp, #0
	uint8_t buffer[128] = {0};
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
 800086e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000872:	227c      	movs	r2, #124	; 0x7c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f009 fd73 	bl	800a362 <memset>
	uint8_t mux_id = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	printf("Register UDP ");
 8000882:	483d      	ldr	r0, [pc, #244]	; (8000978 <udp_client+0x114>)
 8000884:	f009 fe1c 	bl	800a4c0 <iprintf>
	if(ESP8266_registerUDP_mux(mux_id, HOST_NAME, HOST_PORT ))
 8000888:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800088c:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000890:	493a      	ldr	r1, [pc, #232]	; (800097c <udp_client+0x118>)
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fa70 	bl	8000d78 <ESP8266_registerUDP_mux>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <udp_client+0x42>
	{
		printf("OK\n");
 800089e:	4838      	ldr	r0, [pc, #224]	; (8000980 <udp_client+0x11c>)
 80008a0:	f009 fea8 	bl	800a5f4 <puts>
 80008a4:	e002      	b.n	80008ac <udp_client+0x48>
	}
	else
	{
		printf("failed\n");
 80008a6:	4837      	ldr	r0, [pc, #220]	; (8000984 <udp_client+0x120>)
 80008a8:	f009 fea4 	bl	800a5f4 <puts>
	}
	char hello[] = "Hello, this is jcnet udp client !";
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <udp_client+0x124>)
 80008ae:	463c      	mov	r4, r7
 80008b0:	461d      	mov	r5, r3
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ba:	682b      	ldr	r3, [r5, #0]
 80008bc:	8023      	strh	r3, [r4, #0]
    if (ESP8266_send_mux(mux_id, hello, strlen(hello)))
 80008be:	463b      	mov	r3, r7
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fc4d 	bl	8000160 <strlen>
 80008c6:	4602      	mov	r2, r0
 80008c8:	4639      	mov	r1, r7
 80008ca:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fa92 	bl	8000df8 <ESP8266_send_mux>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <udp_client+0x7e>
    {
    	printf("Send OK\n");
 80008da:	482c      	ldr	r0, [pc, #176]	; (800098c <udp_client+0x128>)
 80008dc:	f009 fe8a 	bl	800a5f4 <puts>
 80008e0:	e002      	b.n	80008e8 <udp_client+0x84>
    }
    else
    {
    	printf("Send  failed\n");
 80008e2:	482b      	ldr	r0, [pc, #172]	; (8000990 <udp_client+0x12c>)
 80008e4:	f009 fe86 	bl	800a5f4 <puts>
    }

    uint32_t len = ESP8266_recv_mux(mux_id, buffer, sizeof(buffer), 10000);
 80008e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80008ec:	f897 00ab 	ldrb.w	r0, [r7, #171]	; 0xab
 80008f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	f000 ff73 	bl	80017e0 <ESP8266_recv_mux>
 80008fa:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

    if (len > 0)
 80008fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01d      	beq.n	8000942 <udp_client+0xde>
    {

    	printf("Received:[");
 8000906:	4823      	ldr	r0, [pc, #140]	; (8000994 <udp_client+0x130>)
 8000908:	f009 fdda 	bl	800a4c0 <iprintf>

    	for (uint32_t i = 0; i < len; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000912:	e00d      	b.n	8000930 <udp_client+0xcc>
    	{
    		printf("%c",(char)buffer[i]);
 8000914:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f009 fde5 	bl	800a4f0 <putchar>
    	for (uint32_t i = 0; i < len; i++)
 8000926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800092a:	3301      	adds	r3, #1
 800092c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000934:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000938:	429a      	cmp	r2, r3
 800093a:	d3eb      	bcc.n	8000914 <udp_client+0xb0>
    	}

    	printf("]\n");
 800093c:	4816      	ldr	r0, [pc, #88]	; (8000998 <udp_client+0x134>)
 800093e:	f009 fe59 	bl	800a5f4 <puts>
    }
    printf("Unregister UDP ");
 8000942:	4816      	ldr	r0, [pc, #88]	; (800099c <udp_client+0x138>)
 8000944:	f009 fdbc 	bl	800a4c0 <iprintf>
    if (ESP8266_unregisterUDP_mux(mux_id))
 8000948:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fa27 	bl	8000da0 <ESP8266_unregisterUDP_mux>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d003      	beq.n	8000960 <udp_client+0xfc>
    {
    	printf(" OK\n");
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <udp_client+0x13c>)
 800095a:	f009 fe4b 	bl	800a5f4 <puts>
 800095e:	e002      	b.n	8000966 <udp_client+0x102>
    }
    else
    {
    	printf(" failed\n");
 8000960:	4810      	ldr	r0, [pc, #64]	; (80009a4 <udp_client+0x140>)
 8000962:	f009 fe47 	bl	800a5f4 <puts>
    }

    HAL_Delay(5000);
 8000966:	f241 3088 	movw	r0, #5000	; 0x1388
 800096a:	f002 fe2f 	bl	80035cc <HAL_Delay>
}
 800096e:	bf00      	nop
 8000970:	37b0      	adds	r7, #176	; 0xb0
 8000972:	46bd      	mov	sp, r7
 8000974:	bdb0      	pop	{r4, r5, r7, pc}
 8000976:	bf00      	nop
 8000978:	0800c2b8 	.word	0x0800c2b8
 800097c:	0800c2c8 	.word	0x0800c2c8
 8000980:	0800c2d8 	.word	0x0800c2d8
 8000984:	0800c2dc 	.word	0x0800c2dc
 8000988:	0800c328 	.word	0x0800c328
 800098c:	0800c2e4 	.word	0x0800c2e4
 8000990:	0800c2ec 	.word	0x0800c2ec
 8000994:	0800c2fc 	.word	0x0800c2fc
 8000998:	0800c308 	.word	0x0800c308
 800099c:	0800c30c 	.word	0x0800c30c
 80009a0:	0800c31c 	.word	0x0800c31c
 80009a4:	0800c320 	.word	0x0800c320

080009a8 <udpclient_loop>:
void udpclient_loop()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	while(1)
	{
		if(is_available(&stdin_uart)) break;
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <udpclient_loop+0x1c>)
 80009ae:	f001 fcd5 	bl	800235c <is_available>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <udpclient_loop+0x16>
		udp_client();
 80009b8:	f7ff ff54 	bl	8000864 <udp_client>
		if(is_available(&stdin_uart)) break;
 80009bc:	e7f6      	b.n	80009ac <udpclient_loop+0x4>
 80009be:	bf00      	nop

	}
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000020 	.word	0x20000020

080009c8 <millis>:

UART_HandleTypeDef huart3;


static uint32_t millis()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80009cc:	f002 fdf4 	bl	80035b8 <HAL_GetTick>
 80009d0:	4603      	mov	r3, r0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <delay>:


static void delay(uint32_t x)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	HAL_Delay(x);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f002 fdf4 	bl	80035cc <HAL_Delay>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <indexOfString>:
#include <string.h>
static int indexOfString(char *src, char *target)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	int i = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
	int num;
	num = strlen(src) - strlen(target);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fbb0 	bl	8000160 <strlen>
 8000a00:	4604      	mov	r4, r0
 8000a02:	6838      	ldr	r0, [r7, #0]
 8000a04:	f7ff fbac 	bl	8000160 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	1ae3      	subs	r3, r4, r3
 8000a0c:	60bb      	str	r3, [r7, #8]
	for( i = 0 ; i <= num ; i ++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e013      	b.n	8000a3c <indexOfString+0x50>
	{
		if(!strncmp(src+i,target,strlen(target))) return i;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	18d4      	adds	r4, r2, r3
 8000a1a:	6838      	ldr	r0, [r7, #0]
 8000a1c:	f7ff fba0 	bl	8000160 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	6839      	ldr	r1, [r7, #0]
 8000a26:	4620      	mov	r0, r4
 8000a28:	f009 fe93 	bl	800a752 <strncmp>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <indexOfString+0x4a>
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	e008      	b.n	8000a48 <indexOfString+0x5c>
	for( i = 0 ; i <= num ; i ++)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dde7      	ble.n	8000a14 <indexOfString+0x28>
	}
	return -1;
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <indexOfChar>:

static int indexOfChar(char *src, char t,int start)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	72fb      	strb	r3, [r7, #11]
	int i;
	for( i = start ; i < strlen(src) ; i ++)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e00b      	b.n	8000a7c <indexOfChar+0x2c>
	{
		if(src[i] == t) return i;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	7afa      	ldrb	r2, [r7, #11]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d101      	bne.n	8000a76 <indexOfChar+0x26>
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	e00b      	b.n	8000a8e <indexOfChar+0x3e>
	for( i = start ; i < strlen(src) ; i ++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fb6f 	bl	8000160 <strlen>
 8000a82:	4602      	mov	r2, r0
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d8ec      	bhi.n	8000a64 <indexOfChar+0x14>
	}
	return -1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <send_string_with_nl>:

void send_string_with_nl(char *s)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	6018      	str	r0, [r3, #0]
	char buf[1024];
	sprintf(buf,"%s\r\n",s);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	f107 0008 	add.w	r0, r7, #8
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <send_string_with_nl+0x40>)
 8000aae:	f009 fdb9 	bl	800a624 <siprintf>
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)buf,strlen(buf),1000);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fb52 	bl	8000160 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	f107 0108 	add.w	r1, r7, #8
 8000ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <send_string_with_nl+0x44>)
 8000aca:	f005 faa9 	bl	8006020 <HAL_UART_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	0800c34c 	.word	0x0800c34c
 8000adc:	20000f90 	.word	0x20000f90

08000ae0 <send_string>:
void send_string(char *s)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)s,strlen(s),1000);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fb39 	bl	8000160 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <send_string+0x28>)
 8000afa:	f005 fa91 	bl	8006020 <HAL_UART_Transmit>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000f90 	.word	0x20000f90

08000b0c <send_int_with_nl>:

void send_int_with_nl(int v)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	6018      	str	r0, [r3, #0]
	char buf[1024];
	sprintf(buf,"%d\r\n",v);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	f107 0008 	add.w	r0, r7, #8
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	490a      	ldr	r1, [pc, #40]	; (8000b4c <send_int_with_nl+0x40>)
 8000b22:	f009 fd7f 	bl	800a624 <siprintf>
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)buf,strlen(buf),1000);
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb18 	bl	8000160 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	f107 0108 	add.w	r1, r7, #8
 8000b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <send_int_with_nl+0x44>)
 8000b3e:	f005 fa6f 	bl	8006020 <HAL_UART_Transmit>
}
 8000b42:	bf00      	nop
 8000b44:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	0800c354 	.word	0x0800c354
 8000b50:	20000f90 	.word	0x20000f90

08000b54 <send_int>:
void send_int(int v)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	6018      	str	r0, [r3, #0]
	char buf[1024];
	sprintf(buf,"%d",v);
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	f107 0008 	add.w	r0, r7, #8
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	490a      	ldr	r1, [pc, #40]	; (8000b94 <send_int+0x40>)
 8000b6a:	f009 fd5b 	bl	800a624 <siprintf>
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)buf,strlen(buf),1000);
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff faf4 	bl	8000160 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f107 0108 	add.w	r1, r7, #8
 8000b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <send_int+0x44>)
 8000b86:	f005 fa4b 	bl	8006020 <HAL_UART_Transmit>
}
 8000b8a:	bf00      	nop
 8000b8c:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	0800c35c 	.word	0x0800c35c
 8000b98:	20000f90 	.word	0x20000f90

08000b9c <AT_ch_read>:

char AT_ch_read()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	char ch;
	ch = delete_uart_Q(&AT_UART_RX_Q);
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <AT_ch_read+0x1c>)
 8000ba4:	f001 fbb4 	bl	8002310 <delete_uart_Q>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000068 	.word	0x20000068

08000bbc <AT_ch_write>:
void AT_ch_write(char *p, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&AT_UART_CH,(uint8_t *)p,len,1000);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <AT_ch_write+0x24>)
 8000bd2:	f005 fa25 	bl	8006020 <HAL_UART_Transmit>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000f90 	.word	0x20000f90

08000be4 <AT_ch_available>:
extern int is_available(uart_rx_queue_t *Q);
int AT_ch_available()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	return is_available(&AT_UART_RX_Q);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <AT_ch_available+0x10>)
 8000bea:	f001 fbb7 	bl	800235c <is_available>
 8000bee:	4603      	mov	r3, r0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000068 	.word	0x20000068

08000bf8 <ESP8266_ESP8266>:

void ESP8266_ESP8266()
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
//  m_onData = NULL;
//  m_onDataPtr = NULL;
	m_uart.println = send_string_with_nl;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <ESP8266_ESP8266+0x40>)
 8000c00:	601a      	str	r2, [r3, #0]
	m_uart.print   = send_string;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <ESP8266_ESP8266+0x44>)
 8000c06:	605a      	str	r2, [r3, #4]
	m_uart.println_int = send_int_with_nl;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <ESP8266_ESP8266+0x48>)
 8000c0c:	609a      	str	r2, [r3, #8]
	m_uart.print_int   = send_int;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <ESP8266_ESP8266+0x4c>)
 8000c12:	60da      	str	r2, [r3, #12]
	m_uart.read    = AT_ch_read;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000c16:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <ESP8266_ESP8266+0x50>)
 8000c18:	615a      	str	r2, [r3, #20]
	m_uart.write    = AT_ch_write;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <ESP8266_ESP8266+0x54>)
 8000c1e:	619a      	str	r2, [r3, #24]
	m_uart.available = 	AT_ch_available;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <ESP8266_ESP8266+0x58>)
 8000c24:	611a      	str	r2, [r3, #16]
	m_puart = &m_uart;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <ESP8266_ESP8266+0x5c>)
 8000c28:	4a02      	ldr	r2, [pc, #8]	; (8000c34 <ESP8266_ESP8266+0x3c>)
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20001cd8 	.word	0x20001cd8
 8000c38:	08000a99 	.word	0x08000a99
 8000c3c:	08000ae1 	.word	0x08000ae1
 8000c40:	08000b0d 	.word	0x08000b0d
 8000c44:	08000b55 	.word	0x08000b55
 8000c48:	08000b9d 	.word	0x08000b9d
 8000c4c:	08000bbd 	.word	0x08000bbd
 8000c50:	08000be5 	.word	0x08000be5
 8000c54:	20001cf4 	.word	0x20001cf4

08000c58 <ESP32_C_getVersion>:
}

////////////////////////////////////////

uint8_t * ESP32_C_getVersion()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
//  String version;

  eATGMR(ESP32_version);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <ESP32_C_getVersion+0x10>)
 8000c5e:	f000 faed 	bl	800123c <eATGMR>
  
  return ESP32_version;
 8000c62:	4b01      	ldr	r3, [pc, #4]	; (8000c68 <ESP32_C_getVersion+0x10>)
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000fd8 	.word	0x20000fd8

08000c6c <ESP8266_setOprToStationSoftAP>:
}

////////////////////////////////////////

bool ESP8266_setOprToStationSoftAP(uint8_t pattern1, uint8_t pattern2)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
  uint8_t mode;

  if (!qATCWMODE(&mode, pattern1))
 8000c7c:	79fa      	ldrb	r2, [r7, #7]
 8000c7e:	f107 030f 	add.w	r3, r7, #15
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fb01 	bl	800128c <qATCWMODE>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f083 0301 	eor.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <ESP8266_setOprToStationSoftAP+0x2e>
  {
    return false;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e00f      	b.n	8000cba <ESP8266_setOprToStationSoftAP+0x4e>
  }

  if (mode == 3)
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d101      	bne.n	8000ca4 <ESP8266_setOprToStationSoftAP+0x38>
  {
    return true;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e00a      	b.n	8000cba <ESP8266_setOprToStationSoftAP+0x4e>
  }
  else
  {
    if (sATCWMODE(3, pattern2) )
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 fb31 	bl	8001310 <sATCWMODE>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <ESP8266_setOprToStationSoftAP+0x4c>
    {
      return true;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <ESP8266_setOprToStationSoftAP+0x4e>
    }
    else
    {
      return false;
 8000cb8:	2300      	movs	r3, #0
    }
  }
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <ESP32_C_getAPList>:
}

////////////////////////////////////////

char *ESP32_C_getAPList()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  eATCWLAP(ESP32_ap_list);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <ESP32_C_getAPList+0x10>)
 8000cca:	f000 fbbf 	bl	800144c <eATCWLAP>
  
  return ESP32_ap_list;
 8000cce:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <ESP32_C_getAPList+0x10>)
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000390 	.word	0x20000390

08000cd8 <ESP8266_joinAP>:

////////////////////////////////////////

bool ESP8266_joinAP(uint8_t *ssid, uint8_t *pwd, uint8_t pattern)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71fb      	strb	r3, [r7, #7]
  return sATCWJAP(ssid, pwd, pattern);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f000 fb51 	bl	8001394 <sATCWJAP>
 8000cf2:	4603      	mov	r3, r0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <ESP8266_getIPStatus>:
}

////////////////////////////////////////

uint8_t *ESP8266_getIPStatus()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  eATCIPSTATUS(ESP32_ap_list);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <ESP8266_getIPStatus+0x10>)
 8000d02:	f000 fbc7 	bl	8001494 <eATCIPSTATUS>
  return ESP32_ap_list;
 8000d06:	4b01      	ldr	r3, [pc, #4]	; (8000d0c <ESP8266_getIPStatus+0x10>)
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000390 	.word	0x20000390

08000d10 <ESP8266_getLocalIP>:

////////////////////////////////////////

uint8_t *ESP8266_getLocalIP()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  eATCIFSR(ESP32_ap_list);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <ESP8266_getLocalIP+0x10>)
 8000d16:	f000 fcab 	bl	8001670 <eATCIFSR>
  return ESP32_ap_list;
 8000d1a:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <ESP8266_getLocalIP+0x10>)
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000390 	.word	0x20000390

08000d24 <ESP8266_enableMUX>:

////////////////////////////////////////

bool ESP8266_enableMUX()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  return sATCIPMUX(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 fcc5 	bl	80016b8 <sATCIPMUX>
 8000d2e:	4603      	mov	r3, r0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <ESP8266_createTCP_mux>:
}

////////////////////////////////////////

bool ESP8266_createTCP_mux(uint8_t mux_id, uint8_t * addr, uint32_t port)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  return sATCIPSTARTMultiple(mux_id, "TCP", addr, port);
 8000d42:	7bf8      	ldrb	r0, [r7, #15]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	4903      	ldr	r1, [pc, #12]	; (8000d58 <ESP8266_createTCP_mux+0x24>)
 8000d4a:	f000 fbc9 	bl	80014e0 <sATCIPSTARTMultiple>
 8000d4e:	4603      	mov	r3, r0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	0800c360 	.word	0x0800c360

08000d5c <ESP8266_releaseTCP_mux>:

////////////////////////////////////////

bool ESP8266_releaseTCP_mux(uint8_t mux_id)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  return sATCIPCLOSEMultiple(mux_id);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fc53 	bl	8001614 <sATCIPCLOSEMultiple>
 8000d6e:	4603      	mov	r3, r0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <ESP8266_registerUDP_mux>:

////////////////////////////////////////

bool ESP8266_registerUDP_mux(uint8_t mux_id, uint8_t * addr, uint32_t port)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
  return sATCIPSTARTMultiple(mux_id, "UDP", addr, port);
 8000d86:	7bf8      	ldrb	r0, [r7, #15]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <ESP8266_registerUDP_mux+0x24>)
 8000d8e:	f000 fba7 	bl	80014e0 <sATCIPSTARTMultiple>
 8000d92:	4603      	mov	r3, r0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	0800c364 	.word	0x0800c364

08000da0 <ESP8266_unregisterUDP_mux>:

////////////////////////////////////////

bool ESP8266_unregisterUDP_mux(uint8_t mux_id)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  return sATCIPCLOSEMultiple(mux_id);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fc31 	bl	8001614 <sATCIPCLOSEMultiple>
 8000db2:	4603      	mov	r3, r0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <ESP8266_setTCPServerTimeout>:

////////////////////////////////////////

bool ESP8266_setTCPServerTimeout(uint32_t timeout)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  return sATCIPSTO(timeout);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 fce9 	bl	800179c <sATCIPSTO>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <ESP8266_startTCPServer>:

////////////////////////////////////////

bool ESP8266_startTCPServer(uint32_t port)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if (sATCIPSERVER(1, port))
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 fc98 	bl	8001714 <sATCIPSERVER>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <ESP8266_startTCPServer+0x1a>
  {
    return true;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <ESP8266_startTCPServer+0x1c>
  }

  return false;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <ESP8266_send_mux>:
}

////////////////////////////////////////

bool ESP8266_send_mux(uint8_t mux_id, const uint8_t *buffer, uint32_t len)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	73fb      	strb	r3, [r7, #15]
  return sATCIPSENDMultiple(mux_id, buffer, len);
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fbbb 	bl	8001588 <sATCIPSENDMultiple>
 8000e12:	4603      	mov	r3, r0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <checkIPD>:
/* +IPD,<len>:<data> */



static uint32_t checkIPD(uint8_t *data)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  //Serial.print("### check: ");
  //Serial.println(data);

  int32_t index_PIPDcomma = -1;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	61fb      	str	r3, [r7, #28]
  int32_t index_colon     = -1; /* : */
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	61bb      	str	r3, [r7, #24]
  int32_t index_comma     = -1; /* , */
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	617b      	str	r3, [r7, #20]

  int32_t len = -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	613b      	str	r3, [r7, #16]
  int8_t id   = -1;
 8000e3c:	23ff      	movs	r3, #255	; 0xff
 8000e3e:	73fb      	strb	r3, [r7, #15]
//printf("checkIPD len=%d\n",strlen(data));
  { // Just for easier diffing
 //   index_PIPDcomma = data.indexOf("+IPD,");
    index_PIPDcomma = indexOfString(data,"+IPD,");
 8000e40:	493c      	ldr	r1, [pc, #240]	; (8000f34 <checkIPD+0x118>)
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fdd2 	bl	80009ec <indexOfString>
 8000e48:	61f8      	str	r0, [r7, #28]
    if (index_PIPDcomma != -1)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d06a      	beq.n	8000f28 <checkIPD+0x10c>
    {
      index_colon = indexOfChar(data,':', index_PIPDcomma + 5);
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3305      	adds	r3, #5
 8000e56:	461a      	mov	r2, r3
 8000e58:	213a      	movs	r1, #58	; 0x3a
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fdf8 	bl	8000a50 <indexOfChar>
 8000e60:	61b8      	str	r0, [r7, #24]

      if (index_colon != -1)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d05e      	beq.n	8000f28 <checkIPD+0x10c>
      {
        index_comma = indexOfChar(data,',', index_PIPDcomma + 5);
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3305      	adds	r3, #5
 8000e6e:	461a      	mov	r2, r3
 8000e70:	212c      	movs	r1, #44	; 0x2c
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fdec 	bl	8000a50 <indexOfChar>
 8000e78:	6178      	str	r0, [r7, #20]

        /* +IPD,id,len:data */
        if (index_comma != -1 && index_comma < index_colon)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d038      	beq.n	8000ef4 <checkIPD+0xd8>
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	da34      	bge.n	8000ef4 <checkIPD+0xd8>
        {
#if 0
          id = data.substring(index_PIPDcomma + 5, index_comma).toInt();
#else
          data[index_comma] = 0;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
          id = atoi(data + index_PIPDcomma + 5);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	3305      	adds	r3, #5
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f009 f857 	bl	8009f50 <atoi>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]
          data[index_comma] = ',';
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	222c      	movs	r2, #44	; 0x2c
 8000eae:	701a      	strb	r2, [r3, #0]
#endif
          if (id < 0 || id > 4)
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db03      	blt.n	8000ec0 <checkIPD+0xa4>
 8000eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	dd01      	ble.n	8000ec4 <checkIPD+0xa8>
          {
            return 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e032      	b.n	8000f2a <checkIPD+0x10e>
          }
#if 0
          len = data.substring(index_comma + 1, index_colon).toInt();
#else
          data[index_colon] = 0;
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
          id = atoi(data + index_comma + 1);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f009 f83a 	bl	8009f50 <atoi>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
          data[index_colon] = ':';
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	223a      	movs	r2, #58	; 0x3a
 8000ee8:	701a      	strb	r2, [r3, #0]
#endif
          if (len <= 0)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	dc19      	bgt.n	8000f24 <checkIPD+0x108>
          {
            return 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e01a      	b.n	8000f2a <checkIPD+0x10e>
        {
          /* +IPD,len:data */
#if 0
          len = data.substring(index_PIPDcomma + 5, index_colon).toInt();
#else
          data[index_colon] = 0;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
          id = atoi(data + index_PIPDcomma + 5);
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3305      	adds	r3, #5
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f009 f822 	bl	8009f50 <atoi>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]
          data[index_colon] = ':';
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	223a      	movs	r2, #58	; 0x3a
 8000f18:	701a      	strb	r2, [r3, #0]
#endif
          if (len <= 0)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dc01      	bgt.n	8000f24 <checkIPD+0x108>
          {
            return 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e002      	b.n	8000f2a <checkIPD+0x10e>
        if (m_onData)
        {
          m_onData(id, len, m_onDataPtr);
        }
#endif
        return len;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	e000      	b.n	8000f2a <checkIPD+0x10e>
      }
    }
  }

  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800c368 	.word	0x0800c368

08000f38 <rx_empty>:

////////////////////////////////////////

void rx_empty()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
//  uint8_t data[1024];
  uint8_t ch;
  int idx = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  char a;
  unsigned long start = millis();
 8000f42:	f7ff fd41 	bl	80009c8 <millis>
 8000f46:	60f8      	str	r0, [r7, #12]

  while (millis() - start < 10)
 8000f48:	e00f      	b.n	8000f6a <rx_empty+0x32>
  {
    if (m_puart->available())
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <rx_empty+0x4c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	4798      	blx	r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d008      	beq.n	8000f6a <rx_empty+0x32>
    {
      a = m_puart->read();
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <rx_empty+0x4c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4798      	blx	r3
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
//        data = "";
    	  idx = 0;
    	  memset(data,0,sizeof(data));
      }
#endif //by isjeon
      start = millis();
 8000f64:	f7ff fd30 	bl	80009c8 <millis>
 8000f68:	60f8      	str	r0, [r7, #12]
  while (millis() - start < 10)
 8000f6a:	f7ff fd2d 	bl	80009c8 <millis>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	d9e8      	bls.n	8000f4a <rx_empty+0x12>
    }
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20001cf4 	.word	0x20001cf4

08000f88 <recvString1_TO>:
  }

  return data;
}
char *recvString1_TO(uint8_t *target, uint32_t timeout)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]

  char a;
  unsigned long start = millis();
 8000f92:	f7ff fd19 	bl	80009c8 <millis>
 8000f96:	6138      	str	r0, [r7, #16]
  int idx = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  int tick = -1;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	60fb      	str	r3, [r7, #12]

#if 1
  memset(data,0,sizeof(data));
 8000fa2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4823      	ldr	r0, [pc, #140]	; (8001038 <recvString1_TO+0xb0>)
 8000faa:	f009 f9da 	bl	800a362 <memset>
  while (millis() - start < timeout)
 8000fae:	e035      	b.n	800101c <recvString1_TO+0x94>
  {
    while (m_puart->available() > 0)
    {
      a = m_puart->read();
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <recvString1_TO+0xb4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4798      	blx	r3
 8000fb8:	4603      	mov	r3, r0
 8000fba:	72fb      	strb	r3, [r7, #11]

      if (a == '\0')
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <recvString1_TO+0x3c>
        continue;
 8000fc2:	e024      	b.n	800100e <recvString1_TO+0x86>

//      data += a;

      if(idx >= sizeof(data) - 1)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f640 32fe 	movw	r2, #3070	; 0xbfe
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d904      	bls.n	8000fd8 <recvString1_TO+0x50>
      {
    	  printf("Too long size = %d\n",idx);
 8000fce:	6979      	ldr	r1, [r7, #20]
 8000fd0:	481b      	ldr	r0, [pc, #108]	; (8001040 <recvString1_TO+0xb8>)
 8000fd2:	f009 fa75 	bl	800a4c0 <iprintf>
 8000fd6:	e005      	b.n	8000fe4 <recvString1_TO+0x5c>
      }
      else
      {
          data[idx++] = a;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	617a      	str	r2, [r7, #20]
 8000fde:	4916      	ldr	r1, [pc, #88]	; (8001038 <recvString1_TO+0xb0>)
 8000fe0:	7afa      	ldrb	r2, [r7, #11]
 8000fe2:	54ca      	strb	r2, [r1, r3]
      }
      if (strstr(data,target))
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4814      	ldr	r0, [pc, #80]	; (8001038 <recvString1_TO+0xb0>)
 8000fe8:	f009 fbd8 	bl	800a79c <strstr>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <recvString1_TO+0x6e>
      {
        return data;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <recvString1_TO+0xb0>)
 8000ff4:	e01b      	b.n	800102e <recvString1_TO+0xa6>
      }
      else if (checkIPD(data))
 8000ff6:	4810      	ldr	r0, [pc, #64]	; (8001038 <recvString1_TO+0xb0>)
 8000ff8:	f7ff ff10 	bl	8000e1c <checkIPD>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <recvString1_TO+0x86>
      {
    	memset(data,0,sizeof(data));
 8001002:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001006:	2100      	movs	r1, #0
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <recvString1_TO+0xb0>)
 800100a:	f009 f9aa 	bl	800a362 <memset>
    while (m_puart->available() > 0)
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <recvString1_TO+0xb4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4798      	blx	r3
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	dcc9      	bgt.n	8000fb0 <recvString1_TO+0x28>
  while (millis() - start < timeout)
 800101c:	f7ff fcd4 	bl	80009c8 <millis>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f0      	bhi.n	800100e <recvString1_TO+0x86>
  {
	 data[0] = 0;
  }
#endif

  return data;
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <recvString1_TO+0xb0>)
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200010d8 	.word	0x200010d8
 800103c:	20001cf4 	.word	0x20001cf4
 8001040:	0800c370 	.word	0x0800c370

08001044 <recvString2_TO>:

////////////////////////////////////////

uint8_t * recvString2_TO(uint8_t * target1, uint8_t * target2, uint32_t timeout)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  char a;
  unsigned long start = millis();
 8001050:	f7ff fcba 	bl	80009c8 <millis>
 8001054:	61b8      	str	r0, [r7, #24]
  int idx = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  memset(data,0,sizeof(data));
 800105a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800105e:	2100      	movs	r1, #0
 8001060:	4823      	ldr	r0, [pc, #140]	; (80010f0 <recvString2_TO+0xac>)
 8001062:	f009 f97e 	bl	800a362 <memset>

  while (millis() - start < timeout)
 8001066:	e036      	b.n	80010d6 <recvString2_TO+0x92>
  {
    while (m_puart->available() > 0)
    {
      a = m_puart->read();
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <recvString2_TO+0xb0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4798      	blx	r3
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]

      if (a == '\0')
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d100      	bne.n	800107c <recvString2_TO+0x38>
        continue;
 800107a:	e025      	b.n	80010c8 <recvString2_TO+0x84>

 //     data += a;
      data[idx++] = a;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	61fa      	str	r2, [r7, #28]
 8001082:	491b      	ldr	r1, [pc, #108]	; (80010f0 <recvString2_TO+0xac>)
 8001084:	7dfa      	ldrb	r2, [r7, #23]
 8001086:	54ca      	strb	r2, [r1, r3]
//      if (data.indexOf(target1) != -1)
      if (strstr(data,target1))
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	4819      	ldr	r0, [pc, #100]	; (80010f0 <recvString2_TO+0xac>)
 800108c:	f009 fb86 	bl	800a79c <strstr>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <recvString2_TO+0x56>
      {
        return data;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <recvString2_TO+0xac>)
 8001098:	e026      	b.n	80010e8 <recvString2_TO+0xa4>
      }
      else if (strstr(data,target2))
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <recvString2_TO+0xac>)
 800109e:	f009 fb7d 	bl	800a79c <strstr>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <recvString2_TO+0x68>
      {
        return data;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <recvString2_TO+0xac>)
 80010aa:	e01d      	b.n	80010e8 <recvString2_TO+0xa4>
      }
      else if (checkIPD(data))
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <recvString2_TO+0xac>)
 80010ae:	f7ff feb5 	bl	8000e1c <checkIPD>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <recvString2_TO+0x84>
      {
//        data = "";
        idx = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
        memset(data,0,sizeof(data));
 80010bc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010c0:	2100      	movs	r1, #0
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <recvString2_TO+0xac>)
 80010c4:	f009 f94d 	bl	800a362 <memset>
    while (m_puart->available() > 0)
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <recvString2_TO+0xb0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	4798      	blx	r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	dcc8      	bgt.n	8001068 <recvString2_TO+0x24>
  while (millis() - start < timeout)
 80010d6:	f7ff fc77 	bl	80009c8 <millis>
 80010da:	4602      	mov	r2, r0
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d8f0      	bhi.n	80010c8 <recvString2_TO+0x84>
      }
    }
  }

  return data;
 80010e6:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <recvString2_TO+0xac>)
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200010d8 	.word	0x200010d8
 80010f4:	20001cf4 	.word	0x20001cf4

080010f8 <recvFind>:
}

////////////////////////////////////////

bool recvFind(uint8_t * target, uint32_t timeout)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  char *data_tmp;

  data_tmp = recvString1_TO(target, timeout);
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff3f 	bl	8000f88 <recvString1_TO>
 800110a:	60f8      	str	r0, [r7, #12]

  if (indexOfString(data_tmp,target) != -1)
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f7ff fc6c 	bl	80009ec <indexOfString>
 8001114:	4603      	mov	r3, r0
 8001116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111a:	d001      	beq.n	8001120 <recvFind+0x28>
  {
    return true;
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <recvFind+0x2a>
  }

  return false;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <recvFindAndFilter>:

////////////////////////////////////////

bool recvFindAndFilter(uint8_t * target, uint8_t * begin, uint8_t * end, uint8_t *data, uint32_t timeout)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  uint8_t * data_tmp;

  data_tmp = recvString1_TO(target, timeout);
 800113a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff ff23 	bl	8000f88 <recvString1_TO>
 8001142:	61f8      	str	r0, [r7, #28]
   printf("Len = %d\n",strlen(data_tmp));
   _write(0, data_tmp, strlen(data_tmp));
   printf("[***]\n");
//   while(1);
  }
  if (indexOfString(data_tmp,target) != -1)
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	69f8      	ldr	r0, [r7, #28]
 8001148:	f7ff fc50 	bl	80009ec <indexOfString>
 800114c:	4603      	mov	r3, r0
 800114e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001152:	d065      	beq.n	8001220 <recvFindAndFilter+0xf4>
  {
    int32_t index1 = indexOfString(data_tmp,begin);
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	69f8      	ldr	r0, [r7, #28]
 8001158:	f7ff fc48 	bl	80009ec <indexOfString>
 800115c:	61b8      	str	r0, [r7, #24]
    int32_t index2 = indexOfString(data_tmp,end);
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	69f8      	ldr	r0, [r7, #28]
 8001162:	f7ff fc43 	bl	80009ec <indexOfString>
 8001166:	6178      	str	r0, [r7, #20]

    if (index1 != -1 && index2 != -1)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116e:	d01e      	beq.n	80011ae <recvFindAndFilter+0x82>
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001176:	d01a      	beq.n	80011ae <recvFindAndFilter+0x82>
    {
      index1 += strlen(begin); // begin.length();
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f7fe fff1 	bl	8000160 <strlen>
 800117e:	4602      	mov	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4413      	add	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
#if 0 //by isjeon
      data = data_tmp.substring(index1, index2);
#else
      strncpy(data,data_tmp + index1, index2 - index1);
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	18d1      	adds	r1, r2, r3
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	461a      	mov	r2, r3
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f009 faee 	bl	800a776 <strncpy>
      data[index2 - index1] = 0;
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
#endif
      return true;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e03d      	b.n	800122a <recvFindAndFilter+0xfe>
    }
    else if (index2 != -1)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d00c      	beq.n	80011d0 <recvFindAndFilter+0xa4>
    {
#if 0
      data = data_tmp.substring(0, index2);
#else
      strncpy(data, data_tmp + 0, index2 - 0);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	461a      	mov	r2, r3
 80011ba:	69f9      	ldr	r1, [r7, #28]
 80011bc:	6838      	ldr	r0, [r7, #0]
 80011be:	f009 fada 	bl	800a776 <strncpy>
      data[index2 - 0] = 0;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
#endif
      return true;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e02c      	b.n	800122a <recvFindAndFilter+0xfe>
    }

#if 0
    index1 = data.indexOf("\r\n\r\nOK");
#else
    index1 = indexOfString(data,"\r\n\r\nOK");
 80011d0:	4918      	ldr	r1, [pc, #96]	; (8001234 <recvFindAndFilter+0x108>)
 80011d2:	6838      	ldr	r0, [r7, #0]
 80011d4:	f7ff fc0a 	bl	80009ec <indexOfString>
 80011d8:	61b8      	str	r0, [r7, #24]
#endif
    if (index1 != -1)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d00a      	beq.n	80011f8 <recvFindAndFilter+0xcc>
    {
#if 0
      data = data_tmp.substring(0, index1);
#else
      strncpy(data, data_tmp + 0, index1);
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	461a      	mov	r2, r3
 80011e6:	69f9      	ldr	r1, [r7, #28]
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f009 fac4 	bl	800a776 <strncpy>
      data[index1] = 0;
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
#endif
    }

    index1 = indexOfString(data, "\r\nOK");
 80011f8:	490f      	ldr	r1, [pc, #60]	; (8001238 <recvFindAndFilter+0x10c>)
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff fbf6 	bl	80009ec <indexOfString>
 8001200:	61b8      	str	r0, [r7, #24]

    if (index1 != -1)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001208:	d00a      	beq.n	8001220 <recvFindAndFilter+0xf4>
    {
#if 0
      data = data_tmp.substring(0, index1);
#else
      strncpy(data, data_tmp + 0, index1);
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	461a      	mov	r2, r3
 800120e:	69f9      	ldr	r1, [r7, #28]
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f009 fab0 	bl	800a776 <strncpy>
      data[index1] = 0;
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	4413      	add	r3, r2
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
  }

#if 0
  data = data_tmp;
#else
  strcpy(data,data_tmp); // 이상함?  위 OK 관련 파싱하는 부분이 의미가 없는 코드??
 8001220:	69f9      	ldr	r1, [r7, #28]
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f009 fa8d 	bl	800a742 <strcpy>
#endif
  return false;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	0800c384 	.word	0x0800c384
 8001238:	0800c38c 	.word	0x0800c38c

0800123c <eATGMR>:
}

////////////////////////////////////////

bool eATGMR(char *version)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
  rx_empty();
 8001244:	f7ff fe78 	bl	8000f38 <rx_empty>
  delay(3000);
 8001248:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800124c:	f7ff fbc3 	bl	80009d6 <delay>
  m_puart->println(F("AT+GMR"));
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <eATGMR+0x3c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <eATGMR+0x40>)
 8001258:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+GMR"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", version, 10000);
 800125a:	f242 7310 	movw	r3, #10000	; 0x2710
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <eATGMR+0x44>)
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <eATGMR+0x48>)
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <eATGMR+0x4c>)
 8001268:	f7ff ff60 	bl	800112c <recvFindAndFilter>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20001cf4 	.word	0x20001cf4
 800127c:	0800c3a4 	.word	0x0800c3a4
 8001280:	0800c384 	.word	0x0800c384
 8001284:	0800c3ac 	.word	0x0800c3ac
 8001288:	0800c398 	.word	0x0800c398

0800128c <qATCWMODE>:
////////////////////////////////////////

// Get the Wi-Fi Mode (Station/SoftAP/Station+SoftAP)
// ESP32-AT not support _CUR and _DEF here
bool qATCWMODE(uint8_t *mode, uint8_t pattern)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0a6      	sub	sp, #152	; 0x98
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
  uint8_t str_mode[128];
  bool ret;

  if (!mode || !pattern)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <qATCWMODE+0x18>
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <qATCWMODE+0x1c>
  {
    return false;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e024      	b.n	80012f2 <qATCWMODE+0x66>
  }
  rx_empty();
 80012a8:	f7ff fe46 	bl	8000f38 <rx_empty>
      m_puart->println(F("AT+CWMODE_CUR?"));
      AT_LIB_LOGDEBUG(F("AT+CWMODE_CUR?"));
      break;
#endif
    default:
      m_puart->println(F("AT+CWMODE?"));
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <qATCWMODE+0x70>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4813      	ldr	r0, [pc, #76]	; (8001300 <qATCWMODE+0x74>)
 80012b4:	4798      	blx	r3
      AT_LIB_LOGDEBUG(F("AT+CWMODE?"));
      break;
 80012b6:	bf00      	nop
  }

  ret = recvFindAndFilter("OK", ":", "\r\n\r\nOK", str_mode, 1000);
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c0:	9200      	str	r2, [sp, #0]
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <qATCWMODE+0x78>)
 80012c4:	4910      	ldr	r1, [pc, #64]	; (8001308 <qATCWMODE+0x7c>)
 80012c6:	4811      	ldr	r0, [pc, #68]	; (800130c <qATCWMODE+0x80>)
 80012c8:	f7ff ff30 	bl	800112c <recvFindAndFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (ret)
 80012d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00a      	beq.n	80012f0 <qATCWMODE+0x64>
  {
//    *mode = (uint8_t)str_mode.toInt();
	*mode = atoi(str_mode);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4618      	mov	r0, r3
 80012e0:	f008 fe36 	bl	8009f50 <atoi>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	701a      	strb	r2, [r3, #0]
    return true;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <qATCWMODE+0x66>
  }
  else
  {
    return false;
 80012f0:	2300      	movs	r3, #0
  }
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3790      	adds	r7, #144	; 0x90
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20001cf4 	.word	0x20001cf4
 8001300:	0800c3f0 	.word	0x0800c3f0
 8001304:	0800c384 	.word	0x0800c384
 8001308:	0800c3fc 	.word	0x0800c3fc
 800130c:	0800c398 	.word	0x0800c398

08001310 <sATCWMODE>:
////////////////////////////////////////

// Set the Wi-Fi Mode (Station/SoftAP/Station+SoftAP)
// ESP32-AT not support _CUR and _DEF here
bool sATCWMODE(uint8_t mode, uint8_t pattern)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	4613      	mov	r3, r2
 800131e:	71bb      	strb	r3, [r7, #6]
  if (!pattern)
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <sATCWMODE+0x1a>
  {
    return false;
 8001326:	2300      	movs	r3, #0
 8001328:	e028      	b.n	800137c <sATCWMODE+0x6c>
  }

  uint8_t *data;

  rx_empty();
 800132a:	f7ff fe05 	bl	8000f38 <rx_empty>
      m_puart->print(F("AT+CWMODE_DEF="));
      AT_LIB_LOGDEBUG(F("AT+CWMODE_DEF="));
      break;
#else
    default:
      m_puart->print(F("AT+CWMODE="));
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <sATCWMODE+0x74>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4814      	ldr	r0, [pc, #80]	; (8001388 <sATCWMODE+0x78>)
 8001336:	4798      	blx	r3
      AT_LIB_LOGDEBUG(F("AT+CWMODE="));
      break;
 8001338:	bf00      	nop
#endif
  }

  m_puart->println_int(mode);
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <sATCWMODE+0x74>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	4610      	mov	r0, r2
 8001344:	4798      	blx	r3
  data = recvString2_TO("OK", "no change", 1000);
 8001346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134a:	4910      	ldr	r1, [pc, #64]	; (800138c <sATCWMODE+0x7c>)
 800134c:	4810      	ldr	r0, [pc, #64]	; (8001390 <sATCWMODE+0x80>)
 800134e:	f7ff fe79 	bl	8001044 <recvString2_TO>
 8001352:	60f8      	str	r0, [r7, #12]
  if (data.indexOf("OK") != -1 || data.indexOf("no change") != -1)
  {
    return true;
  }
#else
  if(data && (strstr(data,"OK") || strstr(data, "no change")))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00f      	beq.n	800137a <sATCWMODE+0x6a>
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <sATCWMODE+0x80>)
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f009 fa1d 	bl	800a79c <strstr>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d106      	bne.n	8001376 <sATCWMODE+0x66>
 8001368:	4908      	ldr	r1, [pc, #32]	; (800138c <sATCWMODE+0x7c>)
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f009 fa16 	bl	800a79c <strstr>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <sATCWMODE+0x6a>
  {
	  return true;
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <sATCWMODE+0x6c>
  }
#endif
  return false;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20001cf4 	.word	0x20001cf4
 8001388:	0800c420 	.word	0x0800c420
 800138c:	0800c42c 	.word	0x0800c42c
 8001390:	0800c398 	.word	0x0800c398

08001394 <sATCWJAP>:
////////////////////////////////////////

// Connects to an AP
// ESP32-AT not support _CUR and _DEF here
bool sATCWJAP(uint8_t *ssid, uint8_t *pwd, uint8_t pattern)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0c4      	sub	sp, #272	; 0x110
 8001398:	af00      	add	r7, sp, #0
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	6018      	str	r0, [r3, #0]
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	6019      	str	r1, [r3, #0]
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	701a      	strb	r2, [r3, #0]
  uint8_t data[256];

  if (!pattern)
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <sATCWJAP+0x22>
  {
    return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e038      	b.n	8001428 <sATCWJAP+0x94>
  }

  rx_empty();
 80013b6:	f7ff fdbf 	bl	8000f38 <rx_empty>
      m_puart->print(F("AT+CWJAP_DEF=\""));
      AT_LIB_LOGDEBUG(F("AT+CWJAP_DEF=\""));
      break;
#else
    default:
      m_puart->print(F("AT+CWJAP=\""));
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <sATCWJAP+0xa0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <sATCWJAP+0xa4>)
 80013c2:	4798      	blx	r3
      AT_LIB_LOGDEBUG(F("AT+CWJAP=\""));
      break;
 80013c4:	bf00      	nop
#endif      
  }

  m_puart->print(ssid);
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <sATCWJAP+0xa0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f107 020c 	add.w	r2, r7, #12
 80013d0:	6810      	ldr	r0, [r2, #0]
 80013d2:	4798      	blx	r3
  m_puart->print(F("\",\""));
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <sATCWJAP+0xa0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <sATCWJAP+0xa8>)
 80013dc:	4798      	blx	r3
  m_puart->print(pwd);
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <sATCWJAP+0xa0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f107 0208 	add.w	r2, r7, #8
 80013e8:	6810      	ldr	r0, [r2, #0]
 80013ea:	4798      	blx	r3
  m_puart->println(F("\""));
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <sATCWJAP+0xa0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <sATCWJAP+0xac>)
 80013f4:	4798      	blx	r3

#if USE_ESP32_AT
  strcpy(data,recvString2_TO("OK", "ERROR", 10000));
 80013f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80013fa:	4912      	ldr	r1, [pc, #72]	; (8001444 <sATCWJAP+0xb0>)
 80013fc:	4812      	ldr	r0, [pc, #72]	; (8001448 <sATCWJAP+0xb4>)
 80013fe:	f7ff fe21 	bl	8001044 <recvString2_TO>
 8001402:	4602      	mov	r2, r0
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f009 f999 	bl	800a742 <strcpy>
#endif

#if 0
  if (data.indexOf("OK") != -1)
#else
  if(strstr(data,"OK"))
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <sATCWJAP+0xb4>)
 8001416:	4618      	mov	r0, r3
 8001418:	f009 f9c0 	bl	800a79c <strstr>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <sATCWJAP+0x92>
#endif
  {
    return true;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <sATCWJAP+0x94>
  }

  return false;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20001cf4 	.word	0x20001cf4
 8001438:	0800c44c 	.word	0x0800c44c
 800143c:	0800c458 	.word	0x0800c458
 8001440:	0800c45c 	.word	0x0800c45c
 8001444:	0800c460 	.word	0x0800c460
 8001448:	0800c398 	.word	0x0800c398

0800144c <eATCWLAP>:

////////////////////////////////////////

// Lists the Available APs
bool eATCWLAP(uint8_t *list)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af02      	add	r7, sp, #8
 8001452:	6078      	str	r0, [r7, #4]
//  uint8_t data[256];
  rx_empty();
 8001454:	f7ff fd70 	bl	8000f38 <rx_empty>
  m_puart->println(F("AT+CWLAP"));
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <eATCWLAP+0x34>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <eATCWLAP+0x38>)
 8001460:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CWLAP"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 15 * 1000);
 8001462:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <eATCWLAP+0x3c>)
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <eATCWLAP+0x40>)
 800146e:	4808      	ldr	r0, [pc, #32]	; (8001490 <eATCWLAP+0x44>)
 8001470:	f7ff fe5c 	bl	800112c <recvFindAndFilter>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20001cf4 	.word	0x20001cf4
 8001484:	0800c468 	.word	0x0800c468
 8001488:	0800c384 	.word	0x0800c384
 800148c:	0800c3ac 	.word	0x0800c3ac
 8001490:	0800c398 	.word	0x0800c398

08001494 <eATCIPSTATUS>:

////////////////////////////////////////

// Gets the Connection Status
bool eATCIPSTATUS(uint8_t *list)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
//  String data;

  delay(100);
 800149c:	2064      	movs	r0, #100	; 0x64
 800149e:	f7ff fa9a 	bl	80009d6 <delay>
  rx_empty();
 80014a2:	f7ff fd49 	bl	8000f38 <rx_empty>
  m_puart->println(F("AT+CIPSTATUS"));
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <eATCIPSTATUS+0x38>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4808      	ldr	r0, [pc, #32]	; (80014d0 <eATCIPSTATUS+0x3c>)
 80014ae:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSTATUS"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 1000);
 80014b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <eATCIPSTATUS+0x40>)
 80014ba:	4907      	ldr	r1, [pc, #28]	; (80014d8 <eATCIPSTATUS+0x44>)
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <eATCIPSTATUS+0x48>)
 80014be:	f7ff fe35 	bl	800112c <recvFindAndFilter>
 80014c2:	4603      	mov	r3, r0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20001cf4 	.word	0x20001cf4
 80014d0:	0800c544 	.word	0x0800c544
 80014d4:	0800c384 	.word	0x0800c384
 80014d8:	0800c3ac 	.word	0x0800c3ac
 80014dc:	0800c398 	.word	0x0800c398

080014e0 <sATCIPSTARTMultiple>:
// Multiple Connections (AT+CIPMUX=1)
// For ESP8266 SSL
// SSL connection needs a large amount of memory; otherwise, it may cause system reboot. Use
// AT+CIPSSLSIZE=<size> to enlarge the SSL buffer size.
bool sATCIPSTARTMultiple(uint8_t mux_id, uint8_t * type, uint8_t * addr, uint32_t port)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint8_t * data;

  rx_empty();
 80014f0:	f7ff fd22 	bl	8000f38 <rx_empty>
  m_puart->print(F("AT+CIPSTART="));
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	481e      	ldr	r0, [pc, #120]	; (8001574 <sATCIPSTARTMultiple+0x94>)
 80014fc:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSTART="));

  m_puart->print_int(mux_id);
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	4610      	mov	r0, r2
 8001508:	4798      	blx	r3
  m_puart->print(F(",\""));
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4819      	ldr	r0, [pc, #100]	; (8001578 <sATCIPSTARTMultiple+0x98>)
 8001512:	4798      	blx	r3
  m_puart->print(type);
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	68b8      	ldr	r0, [r7, #8]
 800151c:	4798      	blx	r3
  m_puart->print(F("\",\""));
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4815      	ldr	r0, [pc, #84]	; (800157c <sATCIPSTARTMultiple+0x9c>)
 8001526:	4798      	blx	r3
  m_puart->print(addr);
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
  m_puart->print(F("\","));
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <sATCIPSTARTMultiple+0xa0>)
 800153a:	4798      	blx	r3
  m_puart->println_int(port);
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <sATCIPSTARTMultiple+0x90>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4610      	mov	r0, r2
 8001546:	4798      	blx	r3

#if USE_ESP32_AT
  data = recvString1_TO("OK", 10000);
 8001548:	f242 7110 	movw	r1, #10000	; 0x2710
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <sATCIPSTARTMultiple+0xa4>)
 800154e:	f7ff fd1b 	bl	8000f88 <recvString1_TO>
 8001552:	6178      	str	r0, [r7, #20]
  if( indexOfString(data, "OK"))
 8001554:	490b      	ldr	r1, [pc, #44]	; (8001584 <sATCIPSTARTMultiple+0xa4>)
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff fa48 	bl	80009ec <indexOfString>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <sATCIPSTARTMultiple+0x86>
//  if (data.indexOf("OK") != -1)
  {
    return true;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <sATCIPSTARTMultiple+0x88>
  {
    return true;
  }
#endif

  return false;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20001cf4 	.word	0x20001cf4
 8001574:	0800c56c 	.word	0x0800c56c
 8001578:	0800c57c 	.word	0x0800c57c
 800157c:	0800c458 	.word	0x0800c458
 8001580:	0800c498 	.word	0x0800c498
 8001584:	0800c398 	.word	0x0800c398

08001588 <sATCIPSENDMultiple>:
////////////////////////////////////////

// Sends Data of designated length.
// Multiple connections: (+CIPMUX=1)  => AT+CIPSEND=<link ID>,<length>
bool sATCIPSENDMultiple(uint8_t mux_id, const uint8_t *buffer, uint32_t len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	73fb      	strb	r3, [r7, #15]
  rx_empty();
 8001596:	f7ff fccf 	bl	8000f38 <rx_empty>
  m_puart->print(F("AT+CIPSEND="));
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <sATCIPSENDMultiple+0x78>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4818      	ldr	r0, [pc, #96]	; (8001604 <sATCIPSENDMultiple+0x7c>)
 80015a2:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSEND="));

  m_puart->print_int(mux_id);
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <sATCIPSENDMultiple+0x78>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	4610      	mov	r0, r2
 80015ae:	4798      	blx	r3
  m_puart->print(F(","));
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <sATCIPSENDMultiple+0x78>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4814      	ldr	r0, [pc, #80]	; (8001608 <sATCIPSENDMultiple+0x80>)
 80015b8:	4798      	blx	r3
  m_puart->println_int(len);
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <sATCIPSENDMultiple+0x78>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4610      	mov	r0, r2
 80015c4:	4798      	blx	r3

  if (recvFind(">", 5000))
 80015c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <sATCIPSENDMultiple+0x84>)
 80015cc:	f7ff fd94 	bl	80010f8 <recvFind>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00f      	beq.n	80015f6 <sATCIPSENDMultiple+0x6e>
  {
    rx_empty();
 80015d6:	f7ff fcaf 	bl	8000f38 <rx_empty>
    for (uint32_t i = 0; i < len; i++)
    {
      m_puart->write(buffer[i]);
    }
#else
     m_puart->write(buffer,len);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <sATCIPSENDMultiple+0x78>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4611      	mov	r1, r2
 80015e4:	68b8      	ldr	r0, [r7, #8]
 80015e6:	4798      	blx	r3
#endif
    return recvFind("SEND OK", 10000);
 80015e8:	f242 7110 	movw	r1, #10000	; 0x2710
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <sATCIPSENDMultiple+0x88>)
 80015ee:	f7ff fd83 	bl	80010f8 <recvFind>
 80015f2:	4603      	mov	r3, r0
 80015f4:	e000      	b.n	80015f8 <sATCIPSENDMultiple+0x70>
  }

  return false;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20001cf4 	.word	0x20001cf4
 8001604:	0800c580 	.word	0x0800c580
 8001608:	0800c3ec 	.word	0x0800c3ec
 800160c:	0800c58c 	.word	0x0800c58c
 8001610:	0800c590 	.word	0x0800c590

08001614 <sATCIPCLOSEMultiple>:
////////////////////////////////////////

// Closes TCP/UDP/SSL Connection for multiple connections
// AT+CIPCLOSE=<link ID>
bool sATCIPCLOSEMultiple(uint8_t mux_id)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  uint8_t * data;

  rx_empty();
 800161e:	f7ff fc8b 	bl	8000f38 <rx_empty>
  m_puart->print(F("AT+CIPCLOSE="));
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <sATCIPCLOSEMultiple+0x50>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	480f      	ldr	r0, [pc, #60]	; (8001668 <sATCIPCLOSEMultiple+0x54>)
 800162a:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPCLOSE="));

  m_puart->println_int(mux_id);
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <sATCIPCLOSEMultiple+0x50>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	4610      	mov	r0, r2
 8001636:	4798      	blx	r3

#if 1
  data = recvString1_TO("OK", 5000);
 8001638:	f241 3188 	movw	r1, #5000	; 0x1388
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <sATCIPCLOSEMultiple+0x58>)
 800163e:	f7ff fca3 	bl	8000f88 <recvString1_TO>
 8001642:	60f8      	str	r0, [r7, #12]

  if (indexOfString(data, "OK") != -1)
 8001644:	4909      	ldr	r1, [pc, #36]	; (800166c <sATCIPCLOSEMultiple+0x58>)
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff f9d0 	bl	80009ec <indexOfString>
 800164c:	4603      	mov	r3, r0
 800164e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001652:	d001      	beq.n	8001658 <sATCIPCLOSEMultiple+0x44>
  {
    return true;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <sATCIPCLOSEMultiple+0x46>
  {
    return true;
  }
#endif

  return false;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20001cf4 	.word	0x20001cf4
 8001668:	0800c598 	.word	0x0800c598
 800166c:	0800c398 	.word	0x0800c398

08001670 <eATCIFSR>:

////////////////////////////////////////

// Gets the Local IP Address
bool eATCIFSR(uint8_t *list)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]
  rx_empty();
 8001678:	f7ff fc5e 	bl	8000f38 <rx_empty>
  m_puart->println(F("AT+CIFSR"));
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <eATCIFSR+0x34>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <eATCIFSR+0x38>)
 8001684:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIFSR"));

  return recvFindAndFilter("OK", "\r\r\n", "\r\n\r\nOK", list, 1000);
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <eATCIFSR+0x3c>)
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <eATCIFSR+0x40>)
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <eATCIFSR+0x44>)
 8001694:	f7ff fd4a 	bl	800112c <recvFindAndFilter>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20001cf4 	.word	0x20001cf4
 80016a8:	0800c5b4 	.word	0x0800c5b4
 80016ac:	0800c384 	.word	0x0800c384
 80016b0:	0800c3ac 	.word	0x0800c3ac
 80016b4:	0800c398 	.word	0x0800c398

080016b8 <sATCIPMUX>:

////////////////////////////////////////

// Enables/Disables Multiple Connections
bool sATCIPMUX(uint8_t mode)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  uint8_t * data;

  rx_empty();
 80016c2:	f7ff fc39 	bl	8000f38 <rx_empty>
  m_puart->print(F("AT+CIPMUX="));
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <sATCIPMUX+0x50>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <sATCIPMUX+0x54>)
 80016ce:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPMUX="));

  m_puart->println_int(mode);
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <sATCIPMUX+0x50>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	4610      	mov	r0, r2
 80016da:	4798      	blx	r3

  //data = recvString("OK", "Link is builded");
  data = recvString1_TO("OK", 1000);
 80016dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <sATCIPMUX+0x58>)
 80016e2:	f7ff fc51 	bl	8000f88 <recvString1_TO>
 80016e6:	60f8      	str	r0, [r7, #12]

  if (indexOfString(data, "OK") != -1)
 80016e8:	4909      	ldr	r1, [pc, #36]	; (8001710 <sATCIPMUX+0x58>)
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff f97e 	bl	80009ec <indexOfString>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f6:	d001      	beq.n	80016fc <sATCIPMUX+0x44>
  {
    return true;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <sATCIPMUX+0x46>
  }

  return false;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20001cf4 	.word	0x20001cf4
 800170c:	0800c5c0 	.word	0x0800c5c0
 8001710:	0800c398 	.word	0x0800c398

08001714 <sATCIPSERVER>:
// ‣ 0: deletes server.
// ‣ 1: creates server.
// • <port>: port number; 333 by default.
// • A TCP server can only be created when multiple connections are activated (AT+CIPMUX=1)
bool sATCIPSERVER(uint8_t mode, uint32_t port)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  uint8_t *data;

  if (mode)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d01e      	beq.n	8001764 <sATCIPSERVER+0x50>
  {
    rx_empty();
 8001726:	f7ff fc07 	bl	8000f38 <rx_empty>
    m_puart->print(F("AT+CIPSERVER=1,"));
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <sATCIPSERVER+0x74>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4816      	ldr	r0, [pc, #88]	; (800178c <sATCIPSERVER+0x78>)
 8001732:	4798      	blx	r3

    AT_LIB_LOGDEBUG(F("AT+CIPSERVER=1,"));

    m_puart->println_int(port);
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <sATCIPSERVER+0x74>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4610      	mov	r0, r2
 800173e:	4798      	blx	r3

#if 1
    data = recvString1_TO("OK", 1000);
 8001740:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001744:	4812      	ldr	r0, [pc, #72]	; (8001790 <sATCIPSERVER+0x7c>)
 8001746:	f7ff fc1f 	bl	8000f88 <recvString1_TO>
 800174a:	60f8      	str	r0, [r7, #12]

    if (indexOfString(data, "OK") != -1)
 800174c:	4910      	ldr	r1, [pc, #64]	; (8001790 <sATCIPSERVER+0x7c>)
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f7ff f94c 	bl	80009ec <indexOfString>
 8001754:	4603      	mov	r3, r0
 8001756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175a:	d001      	beq.n	8001760 <sATCIPSERVER+0x4c>
    {
      return true;
 800175c:	2301      	movs	r3, #1
 800175e:	e00e      	b.n	800177e <sATCIPSERVER+0x6a>
    {
      return true;
    }
#endif

    return false;
 8001760:	2300      	movs	r3, #0
 8001762:	e00c      	b.n	800177e <sATCIPSERVER+0x6a>
  }
  else
  {
    rx_empty();
 8001764:	f7ff fbe8 	bl	8000f38 <rx_empty>
    m_puart->println(F("AT+CIPSERVER=0"));
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <sATCIPSERVER+0x74>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <sATCIPSERVER+0x80>)
 8001770:	4798      	blx	r3

    AT_LIB_LOGDEBUG(F("AT+CIPSERVER=0"));

    return recvFind("\r\r\n", 1000);
 8001772:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001776:	4808      	ldr	r0, [pc, #32]	; (8001798 <sATCIPSERVER+0x84>)
 8001778:	f7ff fcbe 	bl	80010f8 <recvFind>
 800177c:	4603      	mov	r3, r0
  }
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20001cf4 	.word	0x20001cf4
 800178c:	0800c5cc 	.word	0x0800c5cc
 8001790:	0800c398 	.word	0x0800c398
 8001794:	0800c5dc 	.word	0x0800c5dc
 8001798:	0800c3ac 	.word	0x0800c3ac

0800179c <sATCIPSTO>:

////////////////////////////////////////

// Sets the TCP Server Timeout
bool sATCIPSTO(uint32_t timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  rx_empty();
 80017a4:	f7ff fbc8 	bl	8000f38 <rx_empty>
  m_puart->print(F("AT+CIPSTO="));
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <sATCIPSTO+0x38>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	480a      	ldr	r0, [pc, #40]	; (80017d8 <sATCIPSTO+0x3c>)
 80017b0:	4798      	blx	r3

  AT_LIB_LOGDEBUG(F("AT+CIPSTO="));

  m_puart->println_int(timeout);
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <sATCIPSTO+0x38>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4610      	mov	r0, r2
 80017bc:	4798      	blx	r3

  return recvFind("OK", 1000);
 80017be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <sATCIPSTO+0x40>)
 80017c4:	f7ff fc98 	bl	80010f8 <recvFind>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20001cf4 	.word	0x20001cf4
 80017d8:	0800c628 	.word	0x0800c628
 80017dc:	0800c398 	.word	0x0800c398

080017e0 <ESP8266_recv_mux>:
}

////////////////////////////////////////

uint32_t ESP8266_recv_mux(uint8_t mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint8_t id;
  uint32_t ret;
  
  ret = recvPkg(buffer, buffer_size, NULL, timeout, &id);
 80017f0:	f107 0313 	add.w	r3, r7, #19
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f000 f823 	bl	8001848 <recvPkg>
 8001802:	6178      	str	r0, [r7, #20]
  
  if (ret > 0 && id == mux_id) 
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <ESP8266_recv_mux+0x36>
 800180a:	7cfb      	ldrb	r3, [r7, #19]
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	429a      	cmp	r2, r3
 8001810:	d101      	bne.n	8001816 <ESP8266_recv_mux+0x36>
  {
    return ret;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	e000      	b.n	8001818 <ESP8266_recv_mux+0x38>
  }
  
  return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <ESP8266_recv_mux_p>:

////////////////////////////////////////

uint32_t ESP8266_recv_mux_p(uint8_t *coming_mux_id, uint8_t *buffer, uint32_t buffer_size, uint32_t timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  return recvPkg(buffer, buffer_size, NULL, timeout, coming_mux_id);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f000 f805 	bl	8001848 <recvPkg>
 800183e:	4603      	mov	r3, r0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <recvPkg>:
/*----------------------------------------------------------------------------*/
/* +IPD,<id>,<len>:<data> */
/* +IPD,<len>:<data> */

uint32_t recvPkg(uint8_t *buffer, uint32_t buffer_size, uint32_t *data_len, uint32_t timeout, uint8_t *coming_mux_id)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	; 0x38
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]

  char a;
  int32_t index_PIPDcomma = -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	623b      	str	r3, [r7, #32]
  int32_t index_colon = -1; /* : */
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	61fb      	str	r3, [r7, #28]
  int32_t index_comma = -1; /* , */
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t len = -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  int8_t id = -1;
 800186e:	23ff      	movs	r3, #255	; 0xff
 8001870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  bool has_data = false;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint32_t ret;
  unsigned long start;
  uint32_t i;

//by isjeon  uint8_t data[1024];
  int idx = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  memset(data, 0, sizeof(data));
 800187e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001882:	2100      	movs	r1, #0
 8001884:	4875      	ldr	r0, [pc, #468]	; (8001a5c <recvPkg+0x214>)
 8001886:	f008 fd6c 	bl	800a362 <memset>
  if (buffer == NULL)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <recvPkg+0x4c>
  {
    return 0;
 8001890:	2300      	movs	r3, #0
 8001892:	e0df      	b.n	8001a54 <recvPkg+0x20c>
  }

  start = millis();
 8001894:	f7ff f898 	bl	80009c8 <millis>
 8001898:	61b8      	str	r0, [r7, #24]
  
  while (millis() - start < timeout) 
 800189a:	e087      	b.n	80019ac <recvPkg+0x164>
  {
    if (m_puart->available() > 0) 
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <recvPkg+0x218>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	4798      	blx	r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dd0b      	ble.n	80018c2 <recvPkg+0x7a>
    {
      a = m_puart->read();
 80018aa:	4b6d      	ldr	r3, [pc, #436]	; (8001a60 <recvPkg+0x218>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	4798      	blx	r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	75fb      	strb	r3, [r7, #23]
//      data += a;
      data[idx++] = a;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	627a      	str	r2, [r7, #36]	; 0x24
 80018bc:	4967      	ldr	r1, [pc, #412]	; (8001a5c <recvPkg+0x214>)
 80018be:	7dfa      	ldrb	r2, [r7, #23]
 80018c0:	54ca      	strb	r2, [r1, r3]
    }

//    index_PIPDcomma = data.indexOf("+IPD,");
    index_PIPDcomma = indexOfString(data,"+IPD,");
 80018c2:	4968      	ldr	r1, [pc, #416]	; (8001a64 <recvPkg+0x21c>)
 80018c4:	4865      	ldr	r0, [pc, #404]	; (8001a5c <recvPkg+0x214>)
 80018c6:	f7ff f891 	bl	80009ec <indexOfString>
 80018ca:	6238      	str	r0, [r7, #32]
    if (index_PIPDcomma != -1) 
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d2:	d06b      	beq.n	80019ac <recvPkg+0x164>
    {
 //     index_colon = data.indexOf(':', index_PIPDcomma + 5);
      index_colon = indexOfChar(data, ':', index_PIPDcomma + 5);
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	3305      	adds	r3, #5
 80018d8:	461a      	mov	r2, r3
 80018da:	213a      	movs	r1, #58	; 0x3a
 80018dc:	485f      	ldr	r0, [pc, #380]	; (8001a5c <recvPkg+0x214>)
 80018de:	f7ff f8b7 	bl	8000a50 <indexOfChar>
 80018e2:	61f8      	str	r0, [r7, #28]
      if (index_colon != -1) 
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ea:	d05f      	beq.n	80019ac <recvPkg+0x164>
      {
//        index_comma = data.indexOf(',', index_PIPDcomma + 5);
        index_comma = indexOfChar(data,',', index_PIPDcomma + 5);
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	3305      	adds	r3, #5
 80018f0:	461a      	mov	r2, r3
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	4859      	ldr	r0, [pc, #356]	; (8001a5c <recvPkg+0x214>)
 80018f6:	f7ff f8ab 	bl	8000a50 <indexOfChar>
 80018fa:	6378      	str	r0, [r7, #52]	; 0x34
        /* +IPD,id,len:data */
        if (index_comma != -1 && index_comma < index_colon) 
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001902:	d038      	beq.n	8001976 <recvPkg+0x12e>
 8001904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	429a      	cmp	r2, r3
 800190a:	da34      	bge.n	8001976 <recvPkg+0x12e>
        {
//          id = data.substring(index_PIPDcomma + 5, index_comma).toInt();
          data[index_comma] = 0;
 800190c:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <recvPkg+0x214>)
 800190e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001910:	4413      	add	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
          id = atoi(data + index_PIPDcomma + 5);
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	3305      	adds	r3, #5
 800191a:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <recvPkg+0x214>)
 800191c:	4413      	add	r3, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f008 fb16 	bl	8009f50 <atoi>
 8001924:	4603      	mov	r3, r0
 8001926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          data[index_comma] = ',';
 800192a:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <recvPkg+0x214>)
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	4413      	add	r3, r2
 8001930:	222c      	movs	r2, #44	; 0x2c
 8001932:	701a      	strb	r2, [r3, #0]
          if (id < 0 || id > 4) 
 8001934:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001938:	2b00      	cmp	r3, #0
 800193a:	db03      	blt.n	8001944 <recvPkg+0xfc>
 800193c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001940:	2b04      	cmp	r3, #4
 8001942:	dd01      	ble.n	8001948 <recvPkg+0x100>
          {
            return 0;
 8001944:	2300      	movs	r3, #0
 8001946:	e085      	b.n	8001a54 <recvPkg+0x20c>
          }
          
//          len = data.substring(index_comma + 1, index_colon).toInt();
          data[index_colon] = 0;
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <recvPkg+0x214>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
          len = atoi(data + index_comma + 1);
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	3301      	adds	r3, #1
 8001956:	4a41      	ldr	r2, [pc, #260]	; (8001a5c <recvPkg+0x214>)
 8001958:	4413      	add	r3, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f008 faf8 	bl	8009f50 <atoi>
 8001960:	6338      	str	r0, [r7, #48]	; 0x30
          data[index_colon] = ':';
 8001962:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <recvPkg+0x214>)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	223a      	movs	r2, #58	; 0x3a
 800196a:	701a      	strb	r2, [r3, #0]
          if (len <= 0) 
 800196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196e:	2b00      	cmp	r3, #0
 8001970:	dc18      	bgt.n	80019a4 <recvPkg+0x15c>
          {
            return 0;
 8001972:	2300      	movs	r3, #0
 8001974:	e06e      	b.n	8001a54 <recvPkg+0x20c>
        } 
        else 
        { 
          /* +IPD,len:data */
//          len = data.substring(index_PIPDcomma + 5, index_colon).toInt();
          data[index_colon] = 0;
 8001976:	4a39      	ldr	r2, [pc, #228]	; (8001a5c <recvPkg+0x214>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
          len = atoi(data + index_PIPDcomma + 5);
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	3305      	adds	r3, #5
 8001984:	4a35      	ldr	r2, [pc, #212]	; (8001a5c <recvPkg+0x214>)
 8001986:	4413      	add	r3, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f008 fae1 	bl	8009f50 <atoi>
 800198e:	6338      	str	r0, [r7, #48]	; 0x30
          data[index_colon] = ':';
 8001990:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <recvPkg+0x214>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	223a      	movs	r2, #58	; 0x3a
 8001998:	701a      	strb	r2, [r3, #0]
          if (len <= 0) 
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc01      	bgt.n	80019a4 <recvPkg+0x15c>
          {
            return 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e057      	b.n	8001a54 <recvPkg+0x20c>
          }
        }
        
        has_data = true;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        break;
 80019aa:	e008      	b.n	80019be <recvPkg+0x176>
  while (millis() - start < timeout) 
 80019ac:	f7ff f80c 	bl	80009c8 <millis>
 80019b0:	4602      	mov	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f63f af6f 	bhi.w	800189c <recvPkg+0x54>
      }
    }
  }

  if (has_data) 
 80019be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d045      	beq.n	8001a52 <recvPkg+0x20a>
  {
    i = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    ret = (uint32_t) len > buffer_size ? buffer_size : (uint32_t) len;
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	4293      	cmp	r3, r2
 80019d0:	bf28      	it	cs
 80019d2:	4613      	movcs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
    start = millis();
 80019d6:	f7fe fff7 	bl	80009c8 <millis>
 80019da:	61b8      	str	r0, [r7, #24]
    
    while (millis() - start < 3000) 
 80019dc:	e030      	b.n	8001a40 <recvPkg+0x1f8>
    {
      while (m_puart->available() > 0 && i < ret) 
      {
        a = m_puart->read();
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <recvPkg+0x218>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4798      	blx	r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
        buffer[i++] = a;
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	7dfa      	ldrb	r2, [r7, #23]
 80019f6:	701a      	strb	r2, [r3, #0]
      while (m_puart->available() > 0 && i < ret) 
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <recvPkg+0x218>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	4798      	blx	r3
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd03      	ble.n	8001a0e <recvPkg+0x1c6>
 8001a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3e7      	bcc.n	80019de <recvPkg+0x196>
      }
      
      if (i == ret) 
 8001a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d114      	bne.n	8001a40 <recvPkg+0x1f8>
      {
        rx_empty();
 8001a16:	f7ff fa8f 	bl	8000f38 <rx_empty>
        
        if (data_len) 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <recvPkg+0x1de>
        {
          *data_len = len;
 8001a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
        }
        
        if (index_comma != -1 && coming_mux_id) 
 8001a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d006      	beq.n	8001a3c <recvPkg+0x1f4>
 8001a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <recvPkg+0x1f4>
        {
          *coming_mux_id = id;
 8001a34:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a3a:	701a      	strb	r2, [r3, #0]
        }
        
        return ret;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	e009      	b.n	8001a54 <recvPkg+0x20c>
    while (millis() - start < 3000) 
 8001a40:	f7fe ffc2 	bl	80009c8 <millis>
 8001a44:	4602      	mov	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d9d2      	bls.n	80019f8 <recvPkg+0x1b0>
      }
    }
  }
  return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3738      	adds	r7, #56	; 0x38
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200010d8 	.word	0x200010d8
 8001a60:	20001cf4 	.word	0x20001cf4
 8001a64:	0800c368 	.word	0x0800c368

08001a68 <can_start>:
extern uart_rx_queue_t stdin_uart;

extern CAN_HandleTypeDef hcan1;
//extern CAN_HandleTypeDef hcan2;
void can_start(int chn) // chn 1,2
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
           CAN_FilterTypeDef  sFilterConfig;


           sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
           sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24

           sFilterConfig.FilterIdHigh = 0x7FF<<5;
 8001a78:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a7c:	60bb      	str	r3, [r7, #8]
           sFilterConfig.FilterIdLow = 0x0000;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
           sFilterConfig.FilterMaskIdHigh = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
           sFilterConfig.FilterMaskIdLow = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]

           sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
           sFilterConfig.FilterActivation = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
           sFilterConfig.SlaveStartFilterBank = 14;
 8001a92:	230e      	movs	r3, #14
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
           if(chn == 1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10e      	bne.n	8001aba <can_start+0x52>
           {
                   sFilterConfig.FilterBank = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
                   HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <can_start+0x5c>)
 8001aa8:	f001 feaf 	bl	800380a <HAL_CAN_ConfigFilter>
                   HAL_CAN_Start(&hcan1);
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <can_start+0x5c>)
 8001aae:	f001 ff75 	bl	800399c <HAL_CAN_Start>
                   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // | CAN_IT_TX_MAILBOX_EMPTY);
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <can_start+0x5c>)
 8001ab6:	f002 fa00 	bl	8003eba <HAL_CAN_ActivateNotification>
                   HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
                   HAL_CAN_Start(&hcan2);
                   HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
           }
#endif
}
 8001aba:	bf00      	nop
 8001abc:	3730      	adds	r7, #48	; 0x30
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20003bb4 	.word	0x20003bb4

08001ac8 <can1_tx>:
   HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);


}
void can1_tx()
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
   static CAN_RxHeaderTypeDef rxHeader; // F1 V1.19.0
   static CAN_TxHeaderTypeDef txHeader;
   static uint8_t txData[8]; // 송신버퍼입니다
   static uint32_t txMailbox;

   memset(txData,0,sizeof(txData));
 8001ace:	2208      	movs	r2, #8
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	481b      	ldr	r0, [pc, #108]	; (8001b40 <can1_tx+0x78>)
 8001ad4:	f008 fc45 	bl	800a362 <memset>


   while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {} // by isjeon
 8001ad8:	bf00      	nop
 8001ada:	481a      	ldr	r0, [pc, #104]	; (8001b44 <can1_tx+0x7c>)
 8001adc:	f002 f871 	bl	8003bc2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d1f9      	bne.n	8001ada <can1_tx+0x12>
   txHeader.StdId = 0x555; // 0x7FF;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <can1_tx+0x80>)
 8001ae8:	f240 5255 	movw	r2, #1365	; 0x555
 8001aec:	601a      	str	r2, [r3, #0]
   txHeader.RTR = CAN_RTR_DATA;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <can1_tx+0x80>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
   txHeader.IDE = CAN_ID_STD;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <can1_tx+0x80>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
   txHeader.DLC = 8;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <can1_tx+0x80>)
 8001afc:	2208      	movs	r2, #8
 8001afe:	611a      	str	r2, [r3, #16]
   txHeader.TransmitGlobalTime = DISABLE;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <can1_tx+0x80>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	751a      	strb	r2, [r3, #20]
   txData[0] = 0xCA;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <can1_tx+0x78>)
 8001b08:	22ca      	movs	r2, #202	; 0xca
 8001b0a:	701a      	strb	r2, [r3, #0]
   txData[1] = 0xFE;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <can1_tx+0x78>)
 8001b0e:	22fe      	movs	r2, #254	; 0xfe
 8001b10:	705a      	strb	r2, [r3, #1]
   txData[2] = 0xaa;     txData[3] = 0xaa;     txData[4] = 0xaa;     txData[5] = 0xaa;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <can1_tx+0x78>)
 8001b14:	22aa      	movs	r2, #170	; 0xaa
 8001b16:	709a      	strb	r2, [r3, #2]
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <can1_tx+0x78>)
 8001b1a:	22aa      	movs	r2, #170	; 0xaa
 8001b1c:	70da      	strb	r2, [r3, #3]
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <can1_tx+0x78>)
 8001b20:	22aa      	movs	r2, #170	; 0xaa
 8001b22:	711a      	strb	r2, [r3, #4]
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <can1_tx+0x78>)
 8001b26:	22aa      	movs	r2, #170	; 0xaa
 8001b28:	715a      	strb	r2, [r3, #5]
//   sprintf(txData+2,"%d",g_tx1Cnt++);
//   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

   HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <can1_tx+0x84>)
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <can1_tx+0x78>)
 8001b2e:	4906      	ldr	r1, [pc, #24]	; (8001b48 <can1_tx+0x80>)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <can1_tx+0x7c>)
 8001b32:	f001 ff77 	bl	8003a24 <HAL_CAN_AddTxMessage>
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000178 	.word	0x20000178
 8001b44:	20003bb4 	.word	0x20003bb4
 8001b48:	20000180 	.word	0x20000180
 8001b4c:	20000198 	.word	0x20000198

08001b50 <HAL_CAN_TxMailbox0CompleteCallback>:
   HAL_CAN_AddTxMessage(&hcan2, &txHeader, txData, &txMailbox);
}
#endif
__IO uint32_t txflag = 0;
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan_ch)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	txflag |= 1;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8001b62:	6013      	str	r3, [r2, #0]
//    printf("\n\rTransmission completed mailbox_0\n\r");
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	2000016c 	.word	0x2000016c

08001b74 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan_ch)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
//	printf("\n\rTransmission completed mailbox_1\n\r");
	txflag |= 2;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000016c 	.word	0x2000016c

08001b98 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan_ch)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
//	printf("\n\rTransmission completed mailbox_2\n\r");
	txflag |= 4;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000016c 	.word	0x2000016c

08001bbc <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile uint8_t rxDataCan1[8];
volatile uint8_t rxDataCan2[8];
volatile int can1_rx_flag = 0;
volatile int can2_rx_flag = 0;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_ch)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
   char rxData[8];
   CAN_FilterTypeDef  sFilterConfig;
   static CAN_RxHeaderTypeDef rxHeader; // F1 V1.19.0
   static CAN_TxHeaderTypeDef txHeader;

        if(hcan_ch == &hcan1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d114      	bne.n	8001bf6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
        {
//              printf("Can1 rx \n");
        		can1_rx_flag = 1;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
                HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001bd6:	f002 f949 	bl	8003e6c <HAL_CAN_GetRxFifoFillLevel>
                HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8001bda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001be0:	2100      	movs	r1, #0
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001be4:	f002 f821 	bl	8003c2a <HAL_CAN_GetRxMessage>
                memcpy(rxDataCan1, rxData, 8);
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001bea:	461a      	mov	r2, r3
 8001bec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf0:	cb03      	ldmia	r3!, {r0, r1}
 8001bf2:	6010      	str	r0, [r2, #0]
 8001bf4:	6051      	str	r1, [r2, #4]
                memcpy(rxDataCan2, rxData, 8);
//                insert_CAN_if_Q(1,can1_rxData,rxHeader.StdId);

        }
#endif
}
 8001bf6:	bf00      	nop
 8001bf8:	3738      	adds	r7, #56	; 0x38
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20003bb4 	.word	0x20003bb4
 8001c04:	20000170 	.word	0x20000170
 8001c08:	2000019c 	.word	0x2000019c
 8001c0c:	20001d00 	.word	0x20001d00

08001c10 <can_fn>:

void can_fn(int ac, char *av[])
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	if(ac == 3 && !strcmp(av[1],"tx"))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d117      	bne.n	8001c50 <can_fn+0x40>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	490f      	ldr	r1, [pc, #60]	; (8001c64 <can_fn+0x54>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fa8f 	bl	800014c <strcmp>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <can_fn+0x40>
	{
		int ch;
		ch = av[2][0];
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	3308      	adds	r3, #8
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
		if(ch == '1')
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b31      	cmp	r3, #49	; 0x31
 8001c42:	d109      	bne.n	8001c58 <can_fn+0x48>
		{
			printf("CAN1 tx\n");
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <can_fn+0x58>)
 8001c46:	f008 fcd5 	bl	800a5f4 <puts>
			can1_tx();
 8001c4a:	f7ff ff3d 	bl	8001ac8 <can1_tx>
	{
 8001c4e:	e003      	b.n	8001c58 <can_fn+0x48>
		}
#endif
	}
	else
	{
		printf("Usage : can tx [1/2]\n");
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <can_fn+0x5c>)
 8001c52:	f008 fccf 	bl	800a5f4 <puts>
		can1_loopback();
		HAL_Delay(1000);
        if(is_available(&stdin_uart)) break;
	}
#endif
}
 8001c56:	e000      	b.n	8001c5a <can_fn+0x4a>
	{
 8001c58:	bf00      	nop
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	0800c634 	.word	0x0800c634
 8001c68:	0800c638 	.word	0x0800c638
 8001c6c:	0800c640 	.word	0x0800c640

08001c70 <exec_cmd>:
};

#include "string.h"

int exec_cmd(uint8_t *cmd, int ac,char *av[])
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
        int i;
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e01f      	b.n	8001cc2 <exec_cmd+0x52>
        {
                if(!strcmp(cmd, cmd_tbl[i].cmd))
 8001c82:	4914      	ldr	r1, [pc, #80]	; (8001cd4 <exec_cmd+0x64>)
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4619      	mov	r1, r3
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe fa59 	bl	800014c <strcmp>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10d      	bne.n	8001cbc <exec_cmd+0x4c>
                {
                        cmd_tbl[i].fn(ac, av);
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <exec_cmd+0x64>)
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3304      	adds	r3, #4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	68b8      	ldr	r0, [r7, #8]
 8001cb6:	4798      	blx	r3
                        return 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e007      	b.n	8001ccc <exec_cmd+0x5c>
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d9dc      	bls.n	8001c82 <exec_cmd+0x12>
                }
        }
        return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	0800cb60 	.word	0x0800cb60

08001cd8 <get_args>:
extern void my_putchar(char c);
int get_args(char *buf, char *av[])
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
        int     num, start, end;
        start = end = num = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	613b      	str	r3, [r7, #16]
        while (1)
        {
//printf("buf+start = [%s] start=%d end=%d buf[end]=%x num=%d\n",buf, start,end,buf[end],num);
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <get_args+0x3a>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b0a      	cmp	r3, #10
 8001d04:	d005      	beq.n	8001d12 <get_args+0x3a>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b0d      	cmp	r3, #13
 8001d10:	d120      	bne.n	8001d54 <get_args+0x7c>
                {
                        if(buf[end]) buf[end] = '\0';
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <get_args+0x50>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
                        if(start != end)
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d00f      	beq.n	8001d50 <get_args+0x78>
                        {
                                strcpy(av[num],buf+start);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f008 fcfe 	bl	800a742 <strcpy>
                                num ++;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
                                return num;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	e02a      	b.n	8001da6 <get_args+0xce>
                        }
                        else
                        {
                                return num;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	e028      	b.n	8001da6 <get_args+0xce>
                        }
                }
                if(buf[end] != ' ' && buf[end] != '\t' ) {
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	d009      	beq.n	8001d74 <get_args+0x9c>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b09      	cmp	r3, #9
 8001d6a:	d003      	beq.n	8001d74 <get_args+0x9c>
                        end ++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e017      	b.n	8001da4 <get_args+0xcc>
                }
                else
                {
                        buf[end] = 0;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
                        strcpy(av[num],buf+start);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f008 fcd7 	bl	800a742 <strcpy>
                        num ++;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
                        end ++;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
                        start = end ;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	613b      	str	r3, [r7, #16]
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8001da4:	e7a3      	b.n	8001cee <get_args+0x16>
                }
        }
        return 0;
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <do_cmd>:
const char *prompt="jkit";
char *version="f103-iot";
static char cmd_buf[128],old_buf[128];
static int idx = 0;
int do_cmd(char ch)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0a4      	sub	sp, #144	; 0x90
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]

        char buf[128];
        int ac,i;
        if(ch == '\n' || ch == '\r')
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b0a      	cmp	r3, #10
 8001dbe:	d002      	beq.n	8001dc6 <do_cmd+0x16>
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2b0d      	cmp	r3, #13
 8001dc4:	d171      	bne.n	8001eaa <do_cmd+0xfa>
        {
                 my_putchar('\n');
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f000 fb00 	bl	80023cc <my_putchar>
                 cmd_buf[idx] = '\0';
 8001dcc:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <do_cmd+0x154>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <do_cmd+0x158>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	54d1      	strb	r1, [r2, r3]
#if 1
                 if(!strncmp(cmd_buf,"!!",2))
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	494c      	ldr	r1, [pc, #304]	; (8001f0c <do_cmd+0x15c>)
 8001dda:	484b      	ldr	r0, [pc, #300]	; (8001f08 <do_cmd+0x158>)
 8001ddc:	f008 fcb9 	bl	800a752 <strncmp>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <do_cmd+0x3e>
                 {
                         strcpy(cmd_buf,old_buf);
 8001de6:	494a      	ldr	r1, [pc, #296]	; (8001f10 <do_cmd+0x160>)
 8001de8:	4847      	ldr	r0, [pc, #284]	; (8001f08 <do_cmd+0x158>)
 8001dea:	f008 fcaa 	bl	800a742 <strcpy>
                 }
#endif
                 strcpy(buf,cmd_buf);
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4945      	ldr	r1, [pc, #276]	; (8001f08 <do_cmd+0x158>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f008 fca4 	bl	800a742 <strcpy>
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e00:	e00e      	b.n	8001e20 <do_cmd+0x70>
 8001e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e06:	019b      	lsls	r3, r3, #6
 8001e08:	4a42      	ldr	r2, [pc, #264]	; (8001f14 <do_cmd+0x164>)
 8001e0a:	441a      	add	r2, r3
 8001e0c:	4942      	ldr	r1, [pc, #264]	; (8001f18 <do_cmd+0x168>)
 8001e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	ddec      	ble.n	8001e02 <do_cmd+0x52>
                 ac = get_args(cmd_buf, av);
 8001e28:	493b      	ldr	r1, [pc, #236]	; (8001f18 <do_cmd+0x168>)
 8001e2a:	4837      	ldr	r0, [pc, #220]	; (8001f08 <do_cmd+0x158>)
 8001e2c:	f7ff ff54 	bl	8001cd8 <get_args>
 8001e30:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                 if(idx == 0 || !ac) {
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <do_cmd+0x154>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <do_cmd+0x94>
 8001e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d112      	bne.n	8001e6a <do_cmd+0xba>
                         idx = 0;
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <do_cmd+0x154>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <do_cmd+0x16c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <do_cmd+0x170>)
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4833      	ldr	r0, [pc, #204]	; (8001f24 <do_cmd+0x174>)
 8001e56:	f008 fb33 	bl	800a4c0 <iprintf>
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <do_cmd+0x178>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f008 f941 	bl	800a0e8 <fflush>
                         return 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e047      	b.n	8001efa <do_cmd+0x14a>
                 }
                 strcpy(old_buf,buf);
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4827      	ldr	r0, [pc, #156]	; (8001f10 <do_cmd+0x160>)
 8001e72:	f008 fc66 	bl	800a742 <strcpy>
                 exec_cmd(av[0],ac, av);
 8001e76:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <do_cmd+0x168>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a27      	ldr	r2, [pc, #156]	; (8001f18 <do_cmd+0x168>)
 8001e7c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fef5 	bl	8001c70 <exec_cmd>
                 printf("%s-%s> ",prompt,version); fflush(stdout);
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <do_cmd+0x16c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a25      	ldr	r2, [pc, #148]	; (8001f20 <do_cmd+0x170>)
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4824      	ldr	r0, [pc, #144]	; (8001f24 <do_cmd+0x174>)
 8001e92:	f008 fb15 	bl	800a4c0 <iprintf>
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <do_cmd+0x178>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f008 f923 	bl	800a0e8 <fflush>
                 idx = 0;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <do_cmd+0x154>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e026      	b.n	8001ef8 <do_cmd+0x148>
        }
        else if(ch == '\b')
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d113      	bne.n	8001ed8 <do_cmd+0x128>
        {
                 if(idx > 0) { idx --; my_putchar('\b'); my_putchar(' '); my_putchar('\b'); return 0;}
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <do_cmd+0x154>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	dd1f      	ble.n	8001ef8 <do_cmd+0x148>
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <do_cmd+0x154>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <do_cmd+0x154>)
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	2008      	movs	r0, #8
 8001ec4:	f000 fa82 	bl	80023cc <my_putchar>
 8001ec8:	2020      	movs	r0, #32
 8001eca:	f000 fa7f 	bl	80023cc <my_putchar>
 8001ece:	2008      	movs	r0, #8
 8001ed0:	f000 fa7c 	bl	80023cc <my_putchar>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e010      	b.n	8001efa <do_cmd+0x14a>
        }
        else if(idx < 63) {
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <do_cmd+0x154>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b3e      	cmp	r3, #62	; 0x3e
 8001ede:	dc0b      	bgt.n	8001ef8 <do_cmd+0x148>
                 cmd_buf[idx++] = ch;   my_putchar(ch);
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <do_cmd+0x154>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	4907      	ldr	r1, [pc, #28]	; (8001f04 <do_cmd+0x154>)
 8001ee8:	600a      	str	r2, [r1, #0]
 8001eea:	4907      	ldr	r1, [pc, #28]	; (8001f08 <do_cmd+0x158>)
 8001eec:	79fa      	ldrb	r2, [r7, #7]
 8001eee:	54ca      	strb	r2, [r1, r3]
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fa6a 	bl	80023cc <my_putchar>
        }

        return 0;
 8001ef8:	2300      	movs	r3, #0

}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3790      	adds	r7, #144	; 0x90
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200002b8 	.word	0x200002b8
 8001f08:	200001b8 	.word	0x200001b8
 8001f0c:	0800c700 	.word	0x0800c700
 8001f10:	20000238 	.word	0x20000238
 8001f14:	20001d08 	.word	0x20001d08
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000018 	.word	0x20000018
 8001f20:	2000001c 	.word	0x2000001c
 8001f24:	0800c704 	.word	0x0800c704
 8001f28:	200000ec 	.word	0x200000ec

08001f2c <esp32_atlib_fn>:
extern int tcpserver_init();
extern void tcpclient_init();
extern void udpclient_init();
extern void httpget_init();
void esp32_atlib_fn(int ac, char *av[])
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
	{
		char *res = ESP32_apList();
		printf("AP=[%s]\n",res);
	}
#endif
	if(!strcmp(av[1],"cver"))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4929      	ldr	r1, [pc, #164]	; (8001fe4 <esp32_atlib_fn+0xb8>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f904 	bl	800014c <strcmp>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <esp32_atlib_fn+0x2c>
	{
		char *res = ESP32_C_getVersion();
 8001f4a:	f7fe fe85 	bl	8000c58 <ESP32_C_getVersion>
 8001f4e:	60f8      	str	r0, [r7, #12]
		printf("Version=[%s]\n",res);
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	4825      	ldr	r0, [pc, #148]	; (8001fe8 <esp32_atlib_fn+0xbc>)
 8001f54:	f008 fab4 	bl	800a4c0 <iprintf>
	}

	if(!strcmp(av[1],"cap"))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4923      	ldr	r1, [pc, #140]	; (8001fec <esp32_atlib_fn+0xc0>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe f8f3 	bl	800014c <strcmp>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <esp32_atlib_fn+0x4e>
	{
		char *res = ESP32_C_getAPList();
 8001f6c:	f7fe feaa 	bl	8000cc4 <ESP32_C_getAPList>
 8001f70:	60b8      	str	r0, [r7, #8]
		printf("AP=[%s]\n",res);
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <esp32_atlib_fn+0xc4>)
 8001f76:	f008 faa3 	bl	800a4c0 <iprintf>
	}
	if(!strcmp(av[1],"tcpserver"))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	491c      	ldr	r1, [pc, #112]	; (8001ff4 <esp32_atlib_fn+0xc8>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f8e2 	bl	800014c <strcmp>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <esp32_atlib_fn+0x66>
	{
		tcpserver_init();
 8001f8e:	f7fe faf1 	bl	8000574 <tcpserver_init>
	}
	if(!strcmp(av[1],"tcpclient"))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	3304      	adds	r3, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4917      	ldr	r1, [pc, #92]	; (8001ff8 <esp32_atlib_fn+0xcc>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe f8d6 	bl	800014c <strcmp>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <esp32_atlib_fn+0x7e>
	{
		tcpclient_init();
 8001fa6:	f7fe f9e7 	bl	8000378 <tcpclient_init>
	}
	if(!strcmp(av[1],"udpclient"))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3304      	adds	r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4912      	ldr	r1, [pc, #72]	; (8001ffc <esp32_atlib_fn+0xd0>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe f8ca 	bl	800014c <strcmp>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <esp32_atlib_fn+0x96>
	{
		udpclient_init();
 8001fbe:	f7fe fc07 	bl	80007d0 <udpclient_init>
	}
	if(!strcmp(av[1],"http"))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	490d      	ldr	r1, [pc, #52]	; (8002000 <esp32_atlib_fn+0xd4>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe f8be 	bl	800014c <strcmp>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <esp32_atlib_fn+0xae>
	{
		httpget_init();
 8001fd6:	f7fe f8cb 	bl	8000170 <httpget_init>
	}
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	0800c70c 	.word	0x0800c70c
 8001fe8:	0800c714 	.word	0x0800c714
 8001fec:	0800c724 	.word	0x0800c724
 8001ff0:	0800c728 	.word	0x0800c728
 8001ff4:	0800c734 	.word	0x0800c734
 8001ff8:	0800c740 	.word	0x0800c740
 8001ffc:	0800c74c 	.word	0x0800c74c
 8002000:	0800c758 	.word	0x0800c758

08002004 <esp32_fn>:
void esp32_fn(int ac, char *av[])
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b09e      	sub	sp, #120	; 0x78
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    uint32_t tick;
    int i;
    char tmp1[100];
    if(ac > 1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b01      	cmp	r3, #1
 8002012:	dd5e      	ble.n	80020d2 <esp32_fn+0xce>
    {
    	strcpy(tmp1,av[1]);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3304      	adds	r3, #4
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f008 fb8e 	bl	800a742 <strcpy>
    	for( i = 0 ; i < ac - 2; i ++) sprintf(tmp1+strlen(tmp1)," %s",av[i+2]);
 8002026:	2300      	movs	r3, #0
 8002028:	673b      	str	r3, [r7, #112]	; 0x70
 800202a:	e015      	b.n	8002058 <esp32_fn+0x54>
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f895 	bl	8000160 <strlen>
 8002036:	4602      	mov	r2, r0
 8002038:	f107 0308 	add.w	r3, r7, #8
 800203c:	1898      	adds	r0, r3, r2
 800203e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002040:	3302      	adds	r3, #2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	4923      	ldr	r1, [pc, #140]	; (80020dc <esp32_fn+0xd8>)
 800204e:	f008 fae9 	bl	800a624 <siprintf>
 8002052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002054:	3301      	adds	r3, #1
 8002056:	673b      	str	r3, [r7, #112]	; 0x70
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b02      	subs	r3, #2
 800205c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800205e:	429a      	cmp	r2, r3
 8002060:	dbe4      	blt.n	800202c <esp32_fn+0x28>
    	sprintf(tmp1+strlen(tmp1),"\r\n");
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f87a 	bl	8000160 <strlen>
 800206c:	4602      	mov	r2, r0
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4413      	add	r3, r2
 8002074:	491a      	ldr	r1, [pc, #104]	; (80020e0 <esp32_fn+0xdc>)
 8002076:	4618      	mov	r0, r3
 8002078:	f008 fad4 	bl	800a624 <siprintf>
//        printf("[ESP32]=[%s]",tmp1);

        HAL_UART_Transmit(&huart3,(uint8_t *)tmp1,strlen(tmp1),1000);
 800207c:	f107 0308 	add.w	r3, r7, #8
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f86d 	bl	8000160 <strlen>
 8002086:	4603      	mov	r3, r0
 8002088:	b29a      	uxth	r2, r3
 800208a:	f107 0108 	add.w	r1, r7, #8
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <esp32_fn+0xe0>)
 8002094:	f003 ffc4 	bl	8006020 <HAL_UART_Transmit>

        tick = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	677b      	str	r3, [r7, #116]	; 0x74
        while(tick < 1000)
 800209c:	e015      	b.n	80020ca <esp32_fn+0xc6>
        {
            if(is_available(&AT_UART_RX_Q))
 800209e:	4812      	ldr	r0, [pc, #72]	; (80020e8 <esp32_fn+0xe4>)
 80020a0:	f000 f95c 	bl	800235c <is_available>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <esp32_fn+0xba>
            {
                int ch;
                ch = delete_uart_Q(&AT_UART_RX_Q);
 80020aa:	480f      	ldr	r0, [pc, #60]	; (80020e8 <esp32_fn+0xe4>)
 80020ac:	f000 f930 	bl	8002310 <delete_uart_Q>
 80020b0:	66f8      	str	r0, [r7, #108]	; 0x6c
                printf("%c",ch);
 80020b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020b4:	f008 fa1c 	bl	800a4f0 <putchar>
                tick = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	677b      	str	r3, [r7, #116]	; 0x74
 80020bc:	e005      	b.n	80020ca <esp32_fn+0xc6>
            }
            else
            {
            	tick ++;
 80020be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c0:	3301      	adds	r3, #1
 80020c2:	677b      	str	r3, [r7, #116]	; 0x74
            	HAL_Delay(1);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f001 fa81 	bl	80035cc <HAL_Delay>
        while(tick < 1000)
 80020ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d0:	d3e5      	bcc.n	800209e <esp32_fn+0x9a>
            }
        }
    }
}
 80020d2:	bf00      	nop
 80020d4:	3778      	adds	r7, #120	; 0x78
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	0800c760 	.word	0x0800c760
 80020e0:	0800c764 	.word	0x0800c764
 80020e4:	20000f90 	.word	0x20000f90
 80020e8:	20000068 	.word	0x20000068

080020ec <led_fn>:
#include "main.h"
#include "uart.h"
extern int is_available(uart_rx_queue_t *Q);
extern uart_rx_queue_t stdin_uart;
void led_fn(int ac, char *av[])
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    uint32_t led;
    int i;
    printf("LED..\n");
 80020f6:	4823      	ldr	r0, [pc, #140]	; (8002184 <led_fn+0x98>)
 80020f8:	f008 fa7c 	bl	800a5f4 <puts>
    led = 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
    if(ac == 2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d122      	bne.n	800214c <led_fn+0x60>
    {
    	sscanf(av[1],"%d",&led);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3304      	adds	r3, #4
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	491d      	ldr	r1, [pc, #116]	; (8002188 <led_fn+0x9c>)
 8002112:	4618      	mov	r0, r3
 8002114:	f008 faa6 	bl	800a664 <siscanf>
    	while(1)
    	{
    	GPIOB->BSRR = 1 << led;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	409a      	lsls	r2, r3
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <led_fn+0xa0>)
 8002120:	611a      	str	r2, [r3, #16]
    	HAL_Delay(200);
 8002122:	20c8      	movs	r0, #200	; 0xc8
 8002124:	f001 fa52 	bl	80035cc <HAL_Delay>
    	GPIOB->BSRR = (1 << led) << 16;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2201      	movs	r2, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	041a      	lsls	r2, r3, #16
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <led_fn+0xa0>)
 8002134:	611a      	str	r2, [r3, #16]
    	HAL_Delay(200);
 8002136:	20c8      	movs	r0, #200	; 0xc8
 8002138:	f001 fa48 	bl	80035cc <HAL_Delay>
        if(is_available(&stdin_uart)) break;
 800213c:	4814      	ldr	r0, [pc, #80]	; (8002190 <led_fn+0xa4>)
 800213e:	f000 f90d 	bl	800235c <is_available>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d100      	bne.n	800214a <led_fn+0x5e>
    	GPIOB->BSRR = 1 << led;
 8002148:	e7e6      	b.n	8002118 <led_fn+0x2c>
        if(is_available(&stdin_uart)) break;
 800214a:	bf00      	nop
    	}
    }
    for( i = 0 ; i < 4 ; i ++, led <<= 1)
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e00d      	b.n	800216e <led_fn+0x82>
    {
            GPIOB->ODR = (led & 0xf);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <led_fn+0xa0>)
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	60d3      	str	r3, [r2, #12]
            HAL_Delay(200);
 800215c:	20c8      	movs	r0, #200	; 0xc8
 800215e:	f001 fa35 	bl	80035cc <HAL_Delay>
    for( i = 0 ; i < 4 ; i ++, led <<= 1)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b03      	cmp	r3, #3
 8002172:	ddee      	ble.n	8002152 <led_fn+0x66>
    }
    GPIOB->ODR = 0;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <led_fn+0xa0>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	0800c768 	.word	0x0800c768
 8002188:	0800c770 	.word	0x0800c770
 800218c:	40010c00 	.word	0x40010c00
 8002190:	20000020 	.word	0x20000020

08002194 <switch_fn>:

void switch_fn(int ac, char *av[])
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
        uint32_t prev,flag = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
        prev = HAL_GetTick();
 80021a2:	f001 fa09 	bl	80035b8 <HAL_GetTick>
 80021a6:	60b8      	str	r0, [r7, #8]
        while(1)
        {
        	if((INPUT1_GPIO_Port->IDR & INPUT1_Pin) == 0) LED1_GPIO_Port-> BSRR = LED1_Pin;
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <switch_fn+0x50>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <switch_fn+0x28>
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <switch_fn+0x50>)
 80021b6:	2202      	movs	r2, #2
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e003      	b.n	80021c4 <switch_fn+0x30>
        	else LED1_GPIO_Port-> BSRR = LED1_Pin << 16;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <switch_fn+0x50>)
 80021be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c2:	611a      	str	r2, [r3, #16]
        	if((INPUT2_GPIO_Port->IDR & INPUT2_Pin) == 0) LED2_GPIO_Port-> BSRR = LED2_Pin;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <switch_fn+0x54>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <switch_fn+0x44>
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <switch_fn+0x50>)
 80021d2:	2204      	movs	r2, #4
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	e7e7      	b.n	80021a8 <switch_fn+0x14>
        	else  LED2_GPIO_Port-> BSRR = LED2_Pin << 16;
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <switch_fn+0x50>)
 80021da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021de:	611a      	str	r2, [r3, #16]
        	if((INPUT1_GPIO_Port->IDR & INPUT1_Pin) == 0) LED1_GPIO_Port-> BSRR = LED1_Pin;
 80021e0:	e7e2      	b.n	80021a8 <switch_fn+0x14>
 80021e2:	bf00      	nop
 80021e4:	40010c00 	.word	0x40010c00
 80021e8:	40011000 	.word	0x40011000

080021ec <rs485_fn>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart4;
static uint8_t tmp1[128],tmp4[128];
void rs485_fn(int ac, char *av[])
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    uint32_t led;
    int i;
    printf("RS485..\n");
 80021f6:	481d      	ldr	r0, [pc, #116]	; (800226c <rs485_fn+0x80>)
 80021f8:	f008 f9fc 	bl	800a5f4 <puts>
    if(ac == 3 && !strcmp("tx",av[1]))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d12c      	bne.n	800225c <rs485_fn+0x70>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3304      	adds	r3, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	4819      	ldr	r0, [pc, #100]	; (8002270 <rs485_fn+0x84>)
 800220c:	f7fd ff9e 	bl	800014c <strcmp>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d122      	bne.n	800225c <rs485_fn+0x70>
    {
    	if(av[2][0] == '1') // Uart1 tx
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3308      	adds	r3, #8
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b31      	cmp	r3, #49	; 0x31
 8002220:	d120      	bne.n	8002264 <rs485_fn+0x78>
		{
			printf("Tx uart1\n");
 8002222:	4814      	ldr	r0, [pc, #80]	; (8002274 <rs485_fn+0x88>)
 8002224:	f008 f9e6 	bl	800a5f4 <puts>
			sprintf(tmp1,"MSG=[Uart 1 to Uart 4]\n");
 8002228:	4913      	ldr	r1, [pc, #76]	; (8002278 <rs485_fn+0x8c>)
 800222a:	4814      	ldr	r0, [pc, #80]	; (800227c <rs485_fn+0x90>)
 800222c:	f008 f9fa 	bl	800a624 <siprintf>
            UART1_TXEN_GPIO_Port->BSRR =  UART1_TXEN_Pin;
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <rs485_fn+0x94>)
 8002232:	2220      	movs	r2, #32
 8002234:	611a      	str	r2, [r3, #16]
            HAL_UART_Transmit(&huart1,(uint8_t *)tmp1,strlen(tmp1),1000);
 8002236:	4811      	ldr	r0, [pc, #68]	; (800227c <rs485_fn+0x90>)
 8002238:	f7fd ff92 	bl	8000160 <strlen>
 800223c:	4603      	mov	r3, r0
 800223e:	b29a      	uxth	r2, r3
 8002240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002244:	490d      	ldr	r1, [pc, #52]	; (800227c <rs485_fn+0x90>)
 8002246:	480f      	ldr	r0, [pc, #60]	; (8002284 <rs485_fn+0x98>)
 8002248:	f003 feea 	bl	8006020 <HAL_UART_Transmit>
            HAL_Delay(1);
 800224c:	2001      	movs	r0, #1
 800224e:	f001 f9bd 	bl	80035cc <HAL_Delay>
            UART1_TXEN_GPIO_Port->BSRR =  UART1_TXEN_Pin << 16;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <rs485_fn+0x94>)
 8002254:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002258:	611a      	str	r2, [r3, #16]
    	if(av[2][0] == '1') // Uart1 tx
 800225a:	e003      	b.n	8002264 <rs485_fn+0x78>
		}
#endif
    }
    else
    {
    	printf("Usage : rs485 tx [1/3]\n");
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <rs485_fn+0x9c>)
 800225e:	f008 f9c9 	bl	800a5f4 <puts>
    }
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0800c774 	.word	0x0800c774
 8002270:	0800c77c 	.word	0x0800c77c
 8002274:	0800c780 	.word	0x0800c780
 8002278:	0800c78c 	.word	0x0800c78c
 800227c:	200002bc 	.word	0x200002bc
 8002280:	40011000 	.word	0x40011000
 8002284:	20003bdc 	.word	0x20003bdc
 8002288:	0800c7a4 	.word	0x0800c7a4

0800228c <insert_uart_AT_Q>:
		.size = ESP32_UART_RX_Q_SZ
};
int insert_uart_Q(uart_rx_queue_t *Q, uint8_t ch);

int insert_uart_AT_Q(uint8_t ch)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
	return insert_uart_Q(&esp32_uart3, ch);
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4619      	mov	r1, r3
 800229a:	4804      	ldr	r0, [pc, #16]	; (80022ac <insert_uart_AT_Q+0x20>)
 800229c:	f000 f808 	bl	80022b0 <insert_uart_Q>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000068 	.word	0x20000068

080022b0 <insert_uart_Q>:
        sei_context(org);
        return ch;
}
#else
int insert_uart_Q(uart_rx_queue_t *Q, uint8_t ch)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
	uint32_t org;
    if((Q->wr + 1) % Q->size == Q->rd)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	3301      	adds	r3, #1
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6852      	ldr	r2, [r2, #4]
 80022c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80022ca:	fb02 f201 	mul.w	r2, r2, r1
 80022ce:	1a9a      	subs	r2, r3, r2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d102      	bne.n	80022de <insert_uart_Q+0x2e>
    {
        return -1; // Full
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
 80022dc:	e013      	b.n	8002306 <insert_uart_Q+0x56>
    }
    Q->data[Q->wr] = ch;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4413      	add	r3, r2
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	701a      	strb	r2, [r3, #0]
    Q->wr = (Q->wr + 1) % Q->size;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	3301      	adds	r3, #1
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6852      	ldr	r2, [r2, #4]
 80022f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80022fa:	fb02 f201 	mul.w	r2, r2, r1
 80022fe:	1a9a      	subs	r2, r3, r2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
    return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <delete_uart_Q>:

int delete_uart_Q(uart_rx_queue_t *Q)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
        int ch;
        uint32_t org;
        if(Q->wr == Q->rd) return -1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d102      	bne.n	800232a <delete_uart_Q+0x1a>
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
 8002328:	e013      	b.n	8002352 <delete_uart_Q+0x42>

        ch = Q->data[Q->rd];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]
        Q->rd = (Q->rd + 1) % Q->size;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	3301      	adds	r3, #1
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6852      	ldr	r2, [r2, #4]
 8002342:	fbb3 f1f2 	udiv	r1, r3, r2
 8002346:	fb02 f201 	mul.w	r2, r2, r1
 800234a:	1a9a      	subs	r2, r3, r2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
        return ch;
 8002350:	68fb      	ldr	r3, [r7, #12]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <is_available>:
#endif
int is_available(uart_rx_queue_t *Q)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
        return (Q->wr != Q->rd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <uart_rx_ready_IT>:

void uart_rx_ready_IT(UART_HandleTypeDef *huart,uint8_t *buf)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
         HAL_UART_Receive_IT(huart, buf , 1);
 800238a:	2201      	movs	r2, #1
 800238c:	6839      	ldr	r1, [r7, #0]
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f003 fec9 	bl	8006126 <HAL_UART_Receive_IT>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_write>:

#include <stdio.h>
int _write(int file, char *data, int len)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
    int bytes_written;

    HAL_UART_Transmit(&huart2,(uint8_t *)data, len,1000);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <_write+0x2c>)
 80023b4:	f003 fe34 	bl	8006020 <HAL_UART_Transmit>

    bytes_written = len;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	617b      	str	r3, [r7, #20]
    return bytes_written;
 80023bc:	697b      	ldr	r3, [r7, #20]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20003c7c 	.word	0x20003c7c

080023cc <my_putchar>:

void my_putchar(char c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
        _write(1,&c,1);
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	2201      	movs	r2, #1
 80023da:	4619      	mov	r1, r3
 80023dc:	2001      	movs	r0, #1
 80023de:	f7ff ffdd 	bl	800239c <_write>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
        if(huart == &huart1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_UART_RxCpltCallback+0x58>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10e      	bne.n	800241a <HAL_UART_RxCpltCallback+0x2e>
        {
            rx_flag1 = 1;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_UART_RxCpltCallback+0x5c>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
            insert_uart_Q(&rs485_uart1,rxBuff1[0]);
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_UART_RxCpltCallback+0x60>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	4811      	ldr	r0, [pc, #68]	; (8002450 <HAL_UART_RxCpltCallback+0x64>)
 800240c:	f7ff ff50 	bl	80022b0 <insert_uart_Q>
            HAL_UART_Receive_IT(&huart1, rxBuff1 , 1);
 8002410:	2201      	movs	r2, #1
 8002412:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_UART_RxCpltCallback+0x60>)
 8002414:	480b      	ldr	r0, [pc, #44]	; (8002444 <HAL_UART_RxCpltCallback+0x58>)
 8002416:	f003 fe86 	bl	8006126 <HAL_UART_Receive_IT>
        }
        if(huart == &huart2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_UART_RxCpltCallback+0x68>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10b      	bne.n	800243a <HAL_UART_RxCpltCallback+0x4e>
        {
                insert_uart_Q(&stdin_uart,rxBuff2[0]);
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_UART_RxCpltCallback+0x6c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	480c      	ldr	r0, [pc, #48]	; (800245c <HAL_UART_RxCpltCallback+0x70>)
 800242c:	f7ff ff40 	bl	80022b0 <insert_uart_Q>
                HAL_UART_Receive_IT(&huart2, rxBuff2 , 1);
 8002430:	2201      	movs	r2, #1
 8002432:	4909      	ldr	r1, [pc, #36]	; (8002458 <HAL_UART_RxCpltCallback+0x6c>)
 8002434:	4807      	ldr	r0, [pc, #28]	; (8002454 <HAL_UART_RxCpltCallback+0x68>)
 8002436:	f003 fe76 	bl	8006126 <HAL_UART_Receive_IT>
        	volatile unsigned int i;
            insert_uart_Q(&rs485_uart4,rxBuff4[0]);
            HAL_UART_Receive_IT(&huart4, rxBuff4 , 1);
        }
#endif
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20003bdc 	.word	0x20003bdc
 8002448:	20002b5c 	.word	0x20002b5c
 800244c:	20001ec8 	.word	0x20001ec8
 8002450:	20000038 	.word	0x20000038
 8002454:	20003c7c 	.word	0x20003c7c
 8002458:	20001ed0 	.word	0x20001ed0
 800245c:	20000020 	.word	0x20000020

08002460 <Net_Conf>:
#endif //NETINFO_STATIC

};
#define _MAIN_DEBUG_
static void Net_Conf()
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	/* wizchip netconf */
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8002464:	4902      	ldr	r1, [pc, #8]	; (8002470 <Net_Conf+0x10>)
 8002466:	2000      	movs	r0, #0
 8002468:	f005 fd62 	bl	8007f30 <ctlnetwork>
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000080 	.word	0x20000080

08002474 <Display_Net_Conf>:

static void Display_Net_Conf()
{
 8002474:	b5b0      	push	{r4, r5, r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af04      	add	r7, sp, #16
#ifdef _MAIN_DEBUG_
	uint8_t tmpstr[6] = {0,};
 800247a:	2300      	movs	r3, #0
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	80bb      	strh	r3, [r7, #4]
#endif

	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8002482:	4934      	ldr	r1, [pc, #208]	; (8002554 <Display_Net_Conf+0xe0>)
 8002484:	2001      	movs	r0, #1
 8002486:	f005 fd53 	bl	8007f30 <ctlnetwork>

#ifdef _MAIN_DEBUG_
	// Display Network Information
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800248a:	463b      	mov	r3, r7
 800248c:	4619      	mov	r1, r3
 800248e:	2008      	movs	r0, #8
 8002490:	f005 fc6c 	bl	8007d6c <ctlwizchip>

	if(gWIZNETINFO.dhcp == NETINFO_DHCP) printf("\r\n===== %s NET CONF : DHCP =====\r\n",(char*)tmpstr);
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <Display_Net_Conf+0xe0>)
 8002496:	7d9b      	ldrb	r3, [r3, #22]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d105      	bne.n	80024a8 <Display_Net_Conf+0x34>
 800249c:	463b      	mov	r3, r7
 800249e:	4619      	mov	r1, r3
 80024a0:	482d      	ldr	r0, [pc, #180]	; (8002558 <Display_Net_Conf+0xe4>)
 80024a2:	f008 f80d 	bl	800a4c0 <iprintf>
 80024a6:	e004      	b.n	80024b2 <Display_Net_Conf+0x3e>
		else printf("\r\n===== %s NET CONF : Static =====\r\n",(char*)tmpstr);
 80024a8:	463b      	mov	r3, r7
 80024aa:	4619      	mov	r1, r3
 80024ac:	482b      	ldr	r0, [pc, #172]	; (800255c <Display_Net_Conf+0xe8>)
 80024ae:	f008 f807 	bl	800a4c0 <iprintf>
	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <Display_Net_Conf+0xe0>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <Display_Net_Conf+0xe0>)
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	461c      	mov	r4, r3
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <Display_Net_Conf+0xe0>)
 80024c0:	789b      	ldrb	r3, [r3, #2]
 80024c2:	461d      	mov	r5, r3
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <Display_Net_Conf+0xe0>)
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <Display_Net_Conf+0xe0>)
 80024cc:	791b      	ldrb	r3, [r3, #4]
 80024ce:	4619      	mov	r1, r3
 80024d0:	4b20      	ldr	r3, [pc, #128]	; (8002554 <Display_Net_Conf+0xe0>)
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	9101      	str	r1, [sp, #4]
 80024d8:	9200      	str	r2, [sp, #0]
 80024da:	462b      	mov	r3, r5
 80024dc:	4622      	mov	r2, r4
 80024de:	4601      	mov	r1, r0
 80024e0:	481f      	ldr	r0, [pc, #124]	; (8002560 <Display_Net_Conf+0xec>)
 80024e2:	f007 ffed 	bl	800a4c0 <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <Display_Net_Conf+0xe0>)
 80024e8:	799b      	ldrb	r3, [r3, #6]
 80024ea:	4619      	mov	r1, r3
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <Display_Net_Conf+0xe0>)
 80024ee:	79db      	ldrb	r3, [r3, #7]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <Display_Net_Conf+0xe0>)
 80024f4:	7a1b      	ldrb	r3, [r3, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <Display_Net_Conf+0xe0>)
 80024fa:	7a5b      	ldrb	r3, [r3, #9]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4603      	mov	r3, r0
 8002500:	4818      	ldr	r0, [pc, #96]	; (8002564 <Display_Net_Conf+0xf0>)
 8002502:	f007 ffdd 	bl	800a4c0 <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <Display_Net_Conf+0xe0>)
 8002508:	7b9b      	ldrb	r3, [r3, #14]
 800250a:	4619      	mov	r1, r3
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <Display_Net_Conf+0xe0>)
 800250e:	7bdb      	ldrb	r3, [r3, #15]
 8002510:	461a      	mov	r2, r3
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <Display_Net_Conf+0xe0>)
 8002514:	7c1b      	ldrb	r3, [r3, #16]
 8002516:	4618      	mov	r0, r3
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <Display_Net_Conf+0xe0>)
 800251a:	7c5b      	ldrb	r3, [r3, #17]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	4603      	mov	r3, r0
 8002520:	4811      	ldr	r0, [pc, #68]	; (8002568 <Display_Net_Conf+0xf4>)
 8002522:	f007 ffcd 	bl	800a4c0 <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <Display_Net_Conf+0xe0>)
 8002528:	7a9b      	ldrb	r3, [r3, #10]
 800252a:	4619      	mov	r1, r3
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <Display_Net_Conf+0xe0>)
 800252e:	7adb      	ldrb	r3, [r3, #11]
 8002530:	461a      	mov	r2, r3
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <Display_Net_Conf+0xe0>)
 8002534:	7b1b      	ldrb	r3, [r3, #12]
 8002536:	4618      	mov	r0, r3
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <Display_Net_Conf+0xe0>)
 800253a:	7b5b      	ldrb	r3, [r3, #13]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4603      	mov	r3, r0
 8002540:	480a      	ldr	r0, [pc, #40]	; (800256c <Display_Net_Conf+0xf8>)
 8002542:	f007 ffbd 	bl	800a4c0 <iprintf>
	printf("=======================================\r\n");
 8002546:	480a      	ldr	r0, [pc, #40]	; (8002570 <Display_Net_Conf+0xfc>)
 8002548:	f008 f854 	bl	800a5f4 <puts>
#endif
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	20000080 	.word	0x20000080
 8002558:	0800c7bc 	.word	0x0800c7bc
 800255c:	0800c7e0 	.word	0x0800c7e0
 8002560:	0800c808 	.word	0x0800c808
 8002564:	0800c830 	.word	0x0800c830
 8002568:	0800c844 	.word	0x0800c844
 800256c:	0800c858 	.word	0x0800c858
 8002570:	0800c86c 	.word	0x0800c86c

08002574 <my_ip_assign>:


void my_ip_assign(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
   getIPfromDHCP(gWIZNETINFO.ip);
 8002578:	480f      	ldr	r0, [pc, #60]	; (80025b8 <my_ip_assign+0x44>)
 800257a:	f007 fc4f 	bl	8009e1c <getIPfromDHCP>
   getGWfromDHCP(gWIZNETINFO.gw);
 800257e:	480f      	ldr	r0, [pc, #60]	; (80025bc <my_ip_assign+0x48>)
 8002580:	f007 fc6a 	bl	8009e58 <getGWfromDHCP>
   getSNfromDHCP(gWIZNETINFO.sn);
 8002584:	480e      	ldr	r0, [pc, #56]	; (80025c0 <my_ip_assign+0x4c>)
 8002586:	f007 fc85 	bl	8009e94 <getSNfromDHCP>
   getDNSfromDHCP(gWIZNETINFO.dns);
 800258a:	480e      	ldr	r0, [pc, #56]	; (80025c4 <my_ip_assign+0x50>)
 800258c:	f007 fca0 	bl	8009ed0 <getDNSfromDHCP>
   gWIZNETINFO.dhcp = NETINFO_DHCP;
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <my_ip_assign+0x54>)
 8002592:	2202      	movs	r2, #2
 8002594:	759a      	strb	r2, [r3, #22]
   /* Network initialization */
   Net_Conf();      // apply from DHCP
 8002596:	f7ff ff63 	bl	8002460 <Net_Conf>
#ifdef _MAIN_DEBUG_
   Display_Net_Conf();
 800259a:	f7ff ff6b 	bl	8002474 <Display_Net_Conf>
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());
 800259e:	f007 fcb5 	bl	8009f0c <getDHCPLeasetime>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4619      	mov	r1, r3
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <my_ip_assign+0x58>)
 80025a8:	f007 ff8a 	bl	800a4c0 <iprintf>
   printf("\r\n");
 80025ac:	4808      	ldr	r0, [pc, #32]	; (80025d0 <my_ip_assign+0x5c>)
 80025ae:	f008 f821 	bl	800a5f4 <puts>
#endif
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000086 	.word	0x20000086
 80025bc:	2000008e 	.word	0x2000008e
 80025c0:	2000008a 	.word	0x2000008a
 80025c4:	20000092 	.word	0x20000092
 80025c8:	20000080 	.word	0x20000080
 80025cc:	0800c898 	.word	0x0800c898
 80025d0:	0800c8b8 	.word	0x0800c8b8

080025d4 <my_ip_conflict>:

/************************************
 * @ brief Call back for ip Conflict
 ************************************/
void my_ip_conflict(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
#ifdef _MAIN_DEBUG_
	printf("CONFLICT IP from DHCP\r\n");
 80025d8:	4801      	ldr	r0, [pc, #4]	; (80025e0 <my_ip_conflict+0xc>)
 80025da:	f008 f80b 	bl	800a5f4 <puts>
#endif
   //halt or reset or any...
   while(1); // this example is halt.
 80025de:	e7fe      	b.n	80025de <my_ip_conflict+0xa>
 80025e0:	0800c8bc 	.word	0x0800c8bc

080025e4 <wiz_task>:
}
#define STATE_DHCP_LEASED 3
extern int8_t   dhcp_state;
void wiz_task()
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
	static uint32_t prev_tick = 0;
	volatile uint32_t cur_tick;
	cur_tick = HAL_GetTick();
 80025ea:	f000 ffe5 	bl	80035b8 <HAL_GetTick>
 80025ee:	4603      	mov	r3, r0
 80025f0:	603b      	str	r3, [r7, #0]
	if(dhcp_state == STATE_DHCP_LEASED)
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <wiz_task+0x5c>)
 80025f4:	f993 3000 	ldrsb.w	r3, [r3]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d106      	bne.n	800260a <wiz_task+0x26>
	{
		if(cur_tick - prev_tick < 100) return; // 100 mili dhcp polling
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <wiz_task+0x60>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b63      	cmp	r3, #99	; 0x63
 8002606:	d806      	bhi.n	8002616 <wiz_task+0x32>
 8002608:	e016      	b.n	8002638 <wiz_task+0x54>
	}
	else if(cur_tick - prev_tick < 10) return; // 10 mili dhcp polling
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <wiz_task+0x60>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b09      	cmp	r3, #9
 8002614:	d90f      	bls.n	8002636 <wiz_task+0x52>
	prev_tick = cur_tick;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <wiz_task+0x60>)
 800261a:	6013      	str	r3, [r2, #0]
	if(wiz_started)
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <wiz_task+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <wiz_task+0x54>
	{
		int ret;
		if(gWIZNETINFO.dhcp == NETINFO_DHCP)
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <wiz_task+0x68>)
 8002626:	7d9b      	ldrb	r3, [r3, #22]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d105      	bne.n	8002638 <wiz_task+0x54>
			ret = DHCP_run();
 800262c:	f007 f994 	bl	8009958 <DHCP_run>
 8002630:	4603      	mov	r3, r0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	e000      	b.n	8002638 <wiz_task+0x54>
	else if(cur_tick - prev_tick < 10) return; // 10 mili dhcp polling
 8002636:	bf00      	nop
	}
}
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000380 	.word	0x20000380
 8002644:	20000340 	.word	0x20000340
 8002648:	2000033c 	.word	0x2000033c
 800264c:	20000080 	.word	0x20000080

08002650 <wiz_fn>:

void wiz_fn(int ac, char *av[])
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	uint8_t fifo_sz[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <wiz_fn+0x198>)
 800265c:	f107 040c 	add.w	r4, r7, #12
 8002660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t temp;
	if(ac >= 2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b01      	cmp	r3, #1
 800266a:	f340 80b9 	ble.w	80027e0 <wiz_fn+0x190>
	{
		if(!strcmp(av[1],"reset")) {
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	3304      	adds	r3, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	495d      	ldr	r1, [pc, #372]	; (80027ec <wiz_fn+0x19c>)
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fd68 	bl	800014c <strcmp>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <wiz_fn+0x4c>
			if(ctlwizchip(CW_RESET_WIZCHIP, (void *)0) == -1)
 8002682:	2100      	movs	r1, #0
 8002684:	2000      	movs	r0, #0
 8002686:	f005 fb71 	bl	8007d6c <ctlwizchip>
 800268a:	4603      	mov	r3, r0
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	f040 80a6 	bne.w	80027e0 <wiz_fn+0x190>
			{
				printf("Ethernet reset failed\n");
 8002694:	4856      	ldr	r0, [pc, #344]	; (80027f0 <wiz_fn+0x1a0>)
 8002696:	f007 ffad 	bl	800a5f4 <puts>
					loopback_udps(SOCK_UDPS, gdata, PORT_UDPS);
			        if(is_available(&stdin_uart)) break;
				}
		}
	}
}
 800269a:	e0a1      	b.n	80027e0 <wiz_fn+0x190>
		else if(!strcmp(av[1],"init"))  {
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	3304      	adds	r3, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4954      	ldr	r1, [pc, #336]	; (80027f4 <wiz_fn+0x1a4>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fd51 	bl	800014c <strcmp>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d121      	bne.n	80026f4 <wiz_fn+0xa4>
			if(ctlwizchip(CW_INIT_WIZCHIP,fifo_sz ) == -1)
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4619      	mov	r1, r3
 80026b6:	2001      	movs	r0, #1
 80026b8:	f005 fb58 	bl	8007d6c <ctlwizchip>
 80026bc:	4603      	mov	r3, r0
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d103      	bne.n	80026cc <wiz_fn+0x7c>
				printf("Ethernet Init fail\n");
 80026c4:	484c      	ldr	r0, [pc, #304]	; (80027f8 <wiz_fn+0x1a8>)
 80026c6:	f007 ff95 	bl	800a5f4 <puts>
}
 80026ca:	e089      	b.n	80027e0 <wiz_fn+0x190>
				wizchip_setnetinfo(&gWIZNETINFO);
 80026cc:	484b      	ldr	r0, [pc, #300]	; (80027fc <wiz_fn+0x1ac>)
 80026ce:	f005 ff27 	bl	8008520 <wizchip_setnetinfo>
				if(gWIZNETINFO.dhcp == NETINFO_DHCP)
 80026d2:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <wiz_fn+0x1ac>)
 80026d4:	7d9b      	ldrb	r3, [r3, #22]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d108      	bne.n	80026ec <wiz_fn+0x9c>
					DHCP_init(SOCK_DHCP, dhcpData);
 80026da:	4949      	ldr	r1, [pc, #292]	; (8002800 <wiz_fn+0x1b0>)
 80026dc:	2002      	movs	r0, #2
 80026de:	f007 faf3 	bl	8009cc8 <DHCP_init>
					reg_dhcp_cbfunc(my_ip_assign, my_ip_assign, my_ip_conflict);
 80026e2:	4a48      	ldr	r2, [pc, #288]	; (8002804 <wiz_fn+0x1b4>)
 80026e4:	4948      	ldr	r1, [pc, #288]	; (8002808 <wiz_fn+0x1b8>)
 80026e6:	4848      	ldr	r0, [pc, #288]	; (8002808 <wiz_fn+0x1b8>)
 80026e8:	f006 f84e 	bl	8008788 <reg_dhcp_cbfunc>
				wiz_started = 1;
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <wiz_fn+0x1bc>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	e075      	b.n	80027e0 <wiz_fn+0x190>
		else if(!strcmp(av[1],"hreset"))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	3304      	adds	r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4945      	ldr	r1, [pc, #276]	; (8002810 <wiz_fn+0x1c0>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fd25 	bl	800014c <strcmp>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <wiz_fn+0xce>
			LAN_RST_GPIO_Port->BSRR = LAN_RST_Pin << 16;
 8002708:	4b42      	ldr	r3, [pc, #264]	; (8002814 <wiz_fn+0x1c4>)
 800270a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800270e:	611a      	str	r2, [r3, #16]
			HAL_Delay(200);
 8002710:	20c8      	movs	r0, #200	; 0xc8
 8002712:	f000 ff5b 	bl	80035cc <HAL_Delay>
			LAN_RST_GPIO_Port->BSRR = LAN_RST_Pin << 0;
 8002716:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <wiz_fn+0x1c4>)
 8002718:	2210      	movs	r2, #16
 800271a:	611a      	str	r2, [r3, #16]
}
 800271c:	e060      	b.n	80027e0 <wiz_fn+0x190>
		else if(!strcmp(av[1],"version"))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3304      	adds	r3, #4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	493c      	ldr	r1, [pc, #240]	; (8002818 <wiz_fn+0x1c8>)
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fd10 	bl	800014c <strcmp>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <wiz_fn+0xf8>
			ret = getVERSIONR();
 8002732:	f44f 5064 	mov.w	r0, #14592	; 0x3900
 8002736:	f004 fb31 	bl	8006d9c <WIZCHIP_READ>
 800273a:	4603      	mov	r3, r0
 800273c:	61fb      	str	r3, [r7, #28]
			printf("ret = %x\n",ret);
 800273e:	69f9      	ldr	r1, [r7, #28]
 8002740:	4836      	ldr	r0, [pc, #216]	; (800281c <wiz_fn+0x1cc>)
 8002742:	f007 febd 	bl	800a4c0 <iprintf>
}
 8002746:	e04b      	b.n	80027e0 <wiz_fn+0x190>
		else if(!strcmp(av[1],"stat"))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3304      	adds	r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4934      	ldr	r1, [pc, #208]	; (8002820 <wiz_fn+0x1d0>)
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fcfb 	bl	800014c <strcmp>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <wiz_fn+0x124>
			ctlwizchip(CW_GET_PHYSTATUS, (void *)&temp);
 800275c:	f107 030b 	add.w	r3, r7, #11
 8002760:	4619      	mov	r1, r3
 8002762:	200c      	movs	r0, #12
 8002764:	f005 fb02 	bl	8007d6c <ctlwizchip>
			printf("PHYSTATUS=%x\n",temp);
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	4619      	mov	r1, r3
 800276c:	482d      	ldr	r0, [pc, #180]	; (8002824 <wiz_fn+0x1d4>)
 800276e:	f007 fea7 	bl	800a4c0 <iprintf>
}
 8002772:	e035      	b.n	80027e0 <wiz_fn+0x190>
		else if(!strcmp(av[1],"lstat"))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	3304      	adds	r3, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	492b      	ldr	r1, [pc, #172]	; (8002828 <wiz_fn+0x1d8>)
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fce5 	bl	800014c <strcmp>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d113      	bne.n	80027b0 <wiz_fn+0x160>
			if(ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 8002788:	f107 030b 	add.w	r3, r7, #11
 800278c:	4619      	mov	r1, r3
 800278e:	200f      	movs	r0, #15
 8002790:	f005 faec 	bl	8007d6c <ctlwizchip>
 8002794:	4603      	mov	r3, r0
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d103      	bne.n	80027a4 <wiz_fn+0x154>
				printf("Unknown link status\n");
 800279c:	4823      	ldr	r0, [pc, #140]	; (800282c <wiz_fn+0x1dc>)
 800279e:	f007 ff29 	bl	800a5f4 <puts>
}
 80027a2:	e01d      	b.n	80027e0 <wiz_fn+0x190>
				printf("Link status = %d\n",temp);
 80027a4:	7afb      	ldrb	r3, [r7, #11]
 80027a6:	4619      	mov	r1, r3
 80027a8:	4821      	ldr	r0, [pc, #132]	; (8002830 <wiz_fn+0x1e0>)
 80027aa:	f007 fe89 	bl	800a4c0 <iprintf>
}
 80027ae:	e017      	b.n	80027e0 <wiz_fn+0x190>
		else if(!strcmp(av[1],"udp_loop"))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	491f      	ldr	r1, [pc, #124]	; (8002834 <wiz_fn+0x1e4>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fcc7 	bl	800014c <strcmp>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <wiz_fn+0x190>
					loopback_udps(SOCK_UDPS, gdata, PORT_UDPS);
 80027c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027c8:	491b      	ldr	r1, [pc, #108]	; (8002838 <wiz_fn+0x1e8>)
 80027ca:	2001      	movs	r0, #1
 80027cc:	f004 fa50 	bl	8006c70 <loopback_udps>
			        if(is_available(&stdin_uart)) break;
 80027d0:	481a      	ldr	r0, [pc, #104]	; (800283c <wiz_fn+0x1ec>)
 80027d2:	f7ff fdc3 	bl	800235c <is_available>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d100      	bne.n	80027de <wiz_fn+0x18e>
				while(1){
 80027dc:	e7f2      	b.n	80027c4 <wiz_fn+0x174>
			        if(is_available(&stdin_uart)) break;
 80027de:	bf00      	nop
}
 80027e0:	bf00      	nop
 80027e2:	3724      	adds	r7, #36	; 0x24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	0800c980 	.word	0x0800c980
 80027ec:	0800c8d4 	.word	0x0800c8d4
 80027f0:	0800c8dc 	.word	0x0800c8dc
 80027f4:	0800c8f4 	.word	0x0800c8f4
 80027f8:	0800c8fc 	.word	0x0800c8fc
 80027fc:	20000080 	.word	0x20000080
 8002800:	20003360 	.word	0x20003360
 8002804:	080025d5 	.word	0x080025d5
 8002808:	08002575 	.word	0x08002575
 800280c:	2000033c 	.word	0x2000033c
 8002810:	0800c910 	.word	0x0800c910
 8002814:	40010800 	.word	0x40010800
 8002818:	0800c918 	.word	0x0800c918
 800281c:	0800c920 	.word	0x0800c920
 8002820:	0800c92c 	.word	0x0800c92c
 8002824:	0800c934 	.word	0x0800c934
 8002828:	0800c944 	.word	0x0800c944
 800282c:	0800c94c 	.word	0x0800c94c
 8002830:	0800c960 	.word	0x0800c960
 8002834:	0800c974 	.word	0x0800c974
 8002838:	20002b60 	.word	0x20002b60
 800283c:	20000020 	.word	0x20000020

08002840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002846:	f000 fe5f 	bl	8003508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284a:	f000 f8cd 	bl	80029e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284e:	f000 fa29 	bl	8002ca4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002852:	f000 f9d3 	bl	8002bfc <MX_USART2_UART_Init>
  MX_CAN_Init();
 8002856:	f000 f90d 	bl	8002a74 <MX_CAN_Init>
  MX_SPI1_Init();
 800285a:	f000 f96f 	bl	8002b3c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800285e:	f000 f9a3 	bl	8002ba8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002862:	f000 f9f5 	bl	8002c50 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002866:	f000 f93b 	bl	8002ae0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uart_rx_ready_IT(&huart2,rxBuff2);
 800286a:	494c      	ldr	r1, [pc, #304]	; (800299c <main+0x15c>)
 800286c:	484c      	ldr	r0, [pc, #304]	; (80029a0 <main+0x160>)
 800286e:	f7ff fd87 	bl	8002380 <uart_rx_ready_IT>
  uart_rx_ready_IT(&huart1,rxBuff1);
 8002872:	494c      	ldr	r1, [pc, #304]	; (80029a4 <main+0x164>)
 8002874:	484c      	ldr	r0, [pc, #304]	; (80029a8 <main+0x168>)
 8002876:	f7ff fd83 	bl	8002380 <uart_rx_ready_IT>
  uart_rx_ready_IT(&huart3,rxBuff3);
 800287a:	494c      	ldr	r1, [pc, #304]	; (80029ac <main+0x16c>)
 800287c:	484c      	ldr	r0, [pc, #304]	; (80029b0 <main+0x170>)
 800287e:	f7ff fd7f 	bl	8002380 <uart_rx_ready_IT>
  can_start(1);
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff f8f0 	bl	8001a68 <can_start>
  printf("Hi~. Welcome to IOT board for NUCLEO F103 !\n");
 8002888:	484a      	ldr	r0, [pc, #296]	; (80029b4 <main+0x174>)
 800288a:	f007 feb3 	bl	800a5f4 <puts>
  ESP8266_ESP8266();
 800288e:	f7fe f9b3 	bl	8000bf8 <ESP8266_ESP8266>
	  extern volatile uint8_t rxDataCan2[8];
	  extern volatile int can1_rx_flag;
	  extern volatile int can2_rx_flag;
	  extern void ESP8266_ESP8266();
	  int i;
	  if(can1_rx_flag)
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <main+0x178>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <main+0x90>
	  {
		  can1_rx_flag = 0;
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <main+0x178>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
		  printf("CAN1 rx : "); for( i = 0 ; i < 8 ; i ++) printf("%02x",rxDataCan1[i]);
 80028a0:	4846      	ldr	r0, [pc, #280]	; (80029bc <main+0x17c>)
 80028a2:	f007 fe0d 	bl	800a4c0 <iprintf>
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e00b      	b.n	80028c4 <main+0x84>
 80028ac:	4a44      	ldr	r2, [pc, #272]	; (80029c0 <main+0x180>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4619      	mov	r1, r3
 80028b8:	4842      	ldr	r0, [pc, #264]	; (80029c4 <main+0x184>)
 80028ba:	f007 fe01 	bl	800a4c0 <iprintf>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3301      	adds	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b07      	cmp	r3, #7
 80028c8:	ddf0      	ble.n	80028ac <main+0x6c>
		  printf("\n");
 80028ca:	200a      	movs	r0, #10
 80028cc:	f007 fe10 	bl	800a4f0 <putchar>
	  }
	  if(can2_rx_flag)
 80028d0:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <main+0x188>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01a      	beq.n	800290e <main+0xce>
	  {
		  can2_rx_flag = 0;
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <main+0x188>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
		  printf("CAN2 rx : "); for( i = 0 ; i < 8 ; i ++) printf("%02x",rxDataCan2[i]);
 80028de:	483b      	ldr	r0, [pc, #236]	; (80029cc <main+0x18c>)
 80028e0:	f007 fdee 	bl	800a4c0 <iprintf>
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e00b      	b.n	8002902 <main+0xc2>
 80028ea:	4a39      	ldr	r2, [pc, #228]	; (80029d0 <main+0x190>)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	4833      	ldr	r0, [pc, #204]	; (80029c4 <main+0x184>)
 80028f8:	f007 fde2 	bl	800a4c0 <iprintf>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	3301      	adds	r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b07      	cmp	r3, #7
 8002906:	ddf0      	ble.n	80028ea <main+0xaa>
		  printf("\n");
 8002908:	200a      	movs	r0, #10
 800290a:	f007 fdf1 	bl	800a4f0 <putchar>
	  }
      if(is_available(&stdin_uart))
 800290e:	4831      	ldr	r0, [pc, #196]	; (80029d4 <main+0x194>)
 8002910:	f7ff fd24 	bl	800235c <is_available>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <main+0xec>
      {
              int ch;
              ch = delete_uart_Q(&stdin_uart);
 800291a:	482e      	ldr	r0, [pc, #184]	; (80029d4 <main+0x194>)
 800291c:	f7ff fcf8 	bl	8002310 <delete_uart_Q>
 8002920:	60b8      	str	r0, [r7, #8]
              do_cmd(ch);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fa42 	bl	8001db0 <do_cmd>
      }
      if(is_available(&rs485_uart1))
 800292c:	482a      	ldr	r0, [pc, #168]	; (80029d8 <main+0x198>)
 800292e:	f7ff fd15 	bl	800235c <is_available>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <main+0x120>
      {
    	  printf("RS485 uart1 RX\n");
 8002938:	4828      	ldr	r0, [pc, #160]	; (80029dc <main+0x19c>)
 800293a:	f007 fe5b 	bl	800a5f4 <puts>
    	  while(is_available(&rs485_uart1))
 800293e:	e006      	b.n	800294e <main+0x10e>
    	  {
              int ch;
              ch = delete_uart_Q(&rs485_uart1);
 8002940:	4825      	ldr	r0, [pc, #148]	; (80029d8 <main+0x198>)
 8002942:	f7ff fce5 	bl	8002310 <delete_uart_Q>
 8002946:	6078      	str	r0, [r7, #4]
              printf("%c",ch);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f007 fdd1 	bl	800a4f0 <putchar>
    	  while(is_available(&rs485_uart1))
 800294e:	4822      	ldr	r0, [pc, #136]	; (80029d8 <main+0x198>)
 8002950:	f7ff fd04 	bl	800235c <is_available>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f2      	bne.n	8002940 <main+0x100>
    	  }
    	  printf("\n");
 800295a:	200a      	movs	r0, #10
 800295c:	f007 fdc8 	bl	800a4f0 <putchar>
      }
      if(is_available(&rs485_uart4))
 8002960:	481f      	ldr	r0, [pc, #124]	; (80029e0 <main+0x1a0>)
 8002962:	f7ff fcfb 	bl	800235c <is_available>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <main+0x154>
      {
    	  printf("RS485 uart3 RX\n");
 800296c:	481d      	ldr	r0, [pc, #116]	; (80029e4 <main+0x1a4>)
 800296e:	f007 fe41 	bl	800a5f4 <puts>
    	  while(is_available(&rs485_uart4))
 8002972:	e006      	b.n	8002982 <main+0x142>
    	  {
              int ch;
              ch = delete_uart_Q(&rs485_uart4);
 8002974:	481a      	ldr	r0, [pc, #104]	; (80029e0 <main+0x1a0>)
 8002976:	f7ff fccb 	bl	8002310 <delete_uart_Q>
 800297a:	6038      	str	r0, [r7, #0]
              printf("%c",ch);
 800297c:	6838      	ldr	r0, [r7, #0]
 800297e:	f007 fdb7 	bl	800a4f0 <putchar>
    	  while(is_available(&rs485_uart4))
 8002982:	4817      	ldr	r0, [pc, #92]	; (80029e0 <main+0x1a0>)
 8002984:	f7ff fcea 	bl	800235c <is_available>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f2      	bne.n	8002974 <main+0x134>
    	  }
    	  printf("\n");
 800298e:	200a      	movs	r0, #10
 8002990:	f007 fdae 	bl	800a4f0 <putchar>
      }
      wiz_task();
 8002994:	f7ff fe26 	bl	80025e4 <wiz_task>
  {
 8002998:	e77b      	b.n	8002892 <main+0x52>
 800299a:	bf00      	nop
 800299c:	20001ed0 	.word	0x20001ed0
 80029a0:	20003c7c 	.word	0x20003c7c
 80029a4:	20001ec8 	.word	0x20001ec8
 80029a8:	20003bdc 	.word	0x20003bdc
 80029ac:	20001ecc 	.word	0x20001ecc
 80029b0:	20000f90 	.word	0x20000f90
 80029b4:	0800c990 	.word	0x0800c990
 80029b8:	20000170 	.word	0x20000170
 80029bc:	0800c9bc 	.word	0x0800c9bc
 80029c0:	20001d00 	.word	0x20001d00
 80029c4:	0800c9c8 	.word	0x0800c9c8
 80029c8:	20000174 	.word	0x20000174
 80029cc:	0800c9d0 	.word	0x0800c9d0
 80029d0:	20001cf8 	.word	0x20001cf8
 80029d4:	20000020 	.word	0x20000020
 80029d8:	20000038 	.word	0x20000038
 80029dc:	0800c9dc 	.word	0x0800c9dc
 80029e0:	20000050 	.word	0x20000050
 80029e4:	0800c9ec 	.word	0x0800c9ec

080029e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b090      	sub	sp, #64	; 0x40
 80029ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ee:	f107 0318 	add.w	r3, r7, #24
 80029f2:	2228      	movs	r2, #40	; 0x28
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f007 fcb3 	bl	800a362 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002a0e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002a26:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2c:	f107 0318 	add.w	r3, r7, #24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 f90f 	bl	8004c54 <HAL_RCC_OscConfig>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002a3c:	f000 fa06 	bl	8002e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a40:	230f      	movs	r3, #15
 8002a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a44:	2302      	movs	r3, #2
 8002a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fb7a 	bl	8005154 <HAL_RCC_ClockConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002a66:	f000 f9f1 	bl	8002e4c <Error_Handler>
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3740      	adds	r7, #64	; 0x40
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <MX_CAN_Init+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002a80:	2202      	movs	r2, #2
 8002a82:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002a92:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8002a96:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_CAN_Init+0x64>)
 8002ac4:	f000 fda6 	bl	8003614 <HAL_CAN_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002ace:	f000 f9bd 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20003bb4 	.word	0x20003bb4
 8002adc:	40006400 	.word	0x40006400

08002ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <MX_I2C1_Init+0x54>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <MX_I2C1_Init+0x58>)
 8002aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b1c:	4804      	ldr	r0, [pc, #16]	; (8002b30 <MX_I2C1_Init+0x50>)
 8002b1e:	f001 ff55 	bl	80049cc <HAL_I2C_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b28:	f000 f990 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20003b60 	.word	0x20003b60
 8002b34:	40005400 	.word	0x40005400
 8002b38:	000186a0 	.word	0x000186a0

08002b3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b42:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <MX_SPI1_Init+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b70:	2210      	movs	r2, #16
 8002b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b88:	220a      	movs	r2, #10
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <MX_SPI1_Init+0x64>)
 8002b8e:	f002 fc6f 	bl	8005470 <HAL_SPI_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b98:	f000 f958 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20003c24 	.word	0x20003c24
 8002ba4:	40013000 	.word	0x40013000

08002ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <MX_USART1_UART_Init+0x50>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bde:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002be0:	f003 f9ce 	bl	8005f80 <HAL_UART_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bea:	f000 f92f 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20003bdc 	.word	0x20003bdc
 8002bf8:	40013800 	.word	0x40013800

08002bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <MX_USART2_UART_Init+0x50>)
 8002c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c22:	220c      	movs	r2, #12
 8002c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_USART2_UART_Init+0x4c>)
 8002c34:	f003 f9a4 	bl	8005f80 <HAL_UART_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c3e:	f000 f905 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20003c7c 	.word	0x20003c7c
 8002c4c:	40004400 	.word	0x40004400

08002c50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <MX_USART3_UART_Init+0x50>)
 8002c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c76:	220c      	movs	r2, #12
 8002c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c80:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c88:	4804      	ldr	r0, [pc, #16]	; (8002c9c <MX_USART3_UART_Init+0x4c>)
 8002c8a:	f003 f979 	bl	8005f80 <HAL_UART_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8002c94:	f000 f8da 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000f90 	.word	0x20000f90
 8002ca0:	40004800 	.word	0x40004800

08002ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002caa:	f107 0310 	add.w	r3, r7, #16
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cbe:	f043 0310 	orr.w	r3, r3, #16
 8002cc2:	6193      	str	r3, [r2, #24]
 8002cc4:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd0:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	6193      	str	r3, [r2, #24]
 8002cdc:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4a51      	ldr	r2, [pc, #324]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6193      	str	r3, [r2, #24]
 8002cf4:	4b4f      	ldr	r3, [pc, #316]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	4a4b      	ldr	r2, [pc, #300]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002d06:	f043 0308 	orr.w	r3, r3, #8
 8002d0a:	6193      	str	r3, [r2, #24]
 8002d0c:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <MX_GPIO_Init+0x190>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f241 012f 	movw	r1, #4143	; 0x102f
 8002d1e:	4846      	ldr	r0, [pc, #280]	; (8002e38 <MX_GPIO_Init+0x194>)
 8002d20:	f001 fe3c 	bl	800499c <HAL_GPIO_WritePin>
                          |UART1_TXEN_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LAN_RST_Pin|LAN_CS_Pin, GPIO_PIN_SET);
 8002d24:	2201      	movs	r2, #1
 8002d26:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d2a:	4844      	ldr	r0, [pc, #272]	; (8002e3c <MX_GPIO_Init+0x198>)
 8002d2c:	f001 fe36 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8002d30:	2201      	movs	r2, #1
 8002d32:	2106      	movs	r1, #6
 8002d34:	4842      	ldr	r0, [pc, #264]	; (8002e40 <MX_GPIO_Init+0x19c>)
 8002d36:	f001 fe31 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_RX_x_GPIO_Port, CAN2_RX_x_Pin, GPIO_PIN_RESET);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d40:	483f      	ldr	r0, [pc, #252]	; (8002e40 <MX_GPIO_Init+0x19c>)
 8002d42:	f001 fe2b 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2104      	movs	r1, #4
 8002d4a:	483e      	ldr	r0, [pc, #248]	; (8002e44 <MX_GPIO_Init+0x1a0>)
 8002d4c:	f001 fe26 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <MX_GPIO_Init+0x1a4>)
 8002d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	4619      	mov	r1, r3
 8002d64:	4834      	ldr	r0, [pc, #208]	; (8002e38 <MX_GPIO_Init+0x194>)
 8002d66:	f001 fc95 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           UART1_TXEN_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8002d6a:	f241 032f 	movw	r3, #4143	; 0x102f
 8002d6e:	613b      	str	r3, [r7, #16]
                          |UART1_TXEN_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	4619      	mov	r1, r3
 8002d82:	482d      	ldr	r0, [pc, #180]	; (8002e38 <MX_GPIO_Init+0x194>)
 8002d84:	f001 fc86 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAN_RST_Pin LAN_CS_Pin */
  GPIO_InitStruct.Pin = LAN_RST_Pin|LAN_CS_Pin;
 8002d88:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2302      	movs	r3, #2
 8002d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4826      	ldr	r0, [pc, #152]	; (8002e3c <MX_GPIO_Init+0x198>)
 8002da2:	f001 fc77 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT2_Pin */
  GPIO_InitStruct.Pin = INPUT2_Pin;
 8002da6:	2310      	movs	r3, #16
 8002da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INPUT2_GPIO_Port, &GPIO_InitStruct);
 8002db2:	f107 0310 	add.w	r3, r7, #16
 8002db6:	4619      	mov	r1, r3
 8002db8:	481f      	ldr	r0, [pc, #124]	; (8002e38 <MX_GPIO_Init+0x194>)
 8002dba:	f001 fc6b 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin CAN2_RX_x_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|CAN2_RX_x_Pin;
 8002dbe:	f241 0306 	movw	r3, #4102	; 0x1006
 8002dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	481a      	ldr	r0, [pc, #104]	; (8002e40 <MX_GPIO_Init+0x19c>)
 8002dd8:	f001 fc5c 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT1_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin;
 8002ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	4619      	mov	r1, r3
 8002df0:	4813      	ldr	r0, [pc, #76]	; (8002e40 <MX_GPIO_Init+0x19c>)
 8002df2:	f001 fc4f 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e00:	2303      	movs	r3, #3
 8002e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	4619      	mov	r1, r3
 8002e0a:	480d      	ldr	r0, [pc, #52]	; (8002e40 <MX_GPIO_Init+0x19c>)
 8002e0c:	f001 fc42 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8002e10:	2304      	movs	r3, #4
 8002e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8002e20:	f107 0310 	add.w	r3, r7, #16
 8002e24:	4619      	mov	r1, r3
 8002e26:	4807      	ldr	r0, [pc, #28]	; (8002e44 <MX_GPIO_Init+0x1a0>)
 8002e28:	f001 fc34 	bl	8004694 <HAL_GPIO_Init>

}
 8002e2c:	bf00      	nop
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40011000 	.word	0x40011000
 8002e3c:	40010800 	.word	0x40010800
 8002e40:	40010c00 	.word	0x40010c00
 8002e44:	40011400 	.word	0x40011400
 8002e48:	10110000 	.word	0x10110000

08002e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e50:	b672      	cpsid	i
}
 8002e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e54:	e7fe      	b.n	8002e54 <Error_Handler+0x8>
	...

08002e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_MspInit+0x5c>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <HAL_MspInit+0x5c>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6193      	str	r3, [r2, #24]
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_MspInit+0x5c>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_MspInit+0x5c>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_MspInit+0x5c>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	61d3      	str	r3, [r2, #28]
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_MspInit+0x5c>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_MspInit+0x60>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <HAL_MspInit+0x60>)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010000 	.word	0x40010000

08002ebc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_CAN_MspInit+0x9c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d139      	bne.n	8002f50 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002edc:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_CAN_MspInit+0xa0>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_CAN_MspInit+0xa0>)
 8002ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_CAN_MspInit+0xa0>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_CAN_MspInit+0xa0>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_CAN_MspInit+0xa0>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6193      	str	r3, [r2, #24]
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_CAN_MspInit+0xa0>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480f      	ldr	r0, [pc, #60]	; (8002f60 <HAL_CAN_MspInit+0xa4>)
 8002f22:	f001 fbb7 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f30:	2303      	movs	r3, #3
 8002f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4809      	ldr	r0, [pc, #36]	; (8002f60 <HAL_CAN_MspInit+0xa4>)
 8002f3c:	f001 fbaa 	bl	8004694 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */

    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	2014      	movs	r0, #20
 8002f46:	f001 fabc 	bl	80044c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f4a:	2014      	movs	r0, #20
 8002f4c:	f001 fad5 	bl	80044fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002f50:	bf00      	nop
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40006400 	.word	0x40006400
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010800 	.word	0x40010800

08002f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_I2C_MspInit+0x90>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d132      	bne.n	8002fea <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f84:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_I2C_MspInit+0x94>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <HAL_I2C_MspInit+0x94>)
 8002f8a:	f043 0308 	orr.w	r3, r3, #8
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_I2C_MspInit+0x94>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa2:	2312      	movs	r3, #18
 8002fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4812      	ldr	r0, [pc, #72]	; (8002ffc <HAL_I2C_MspInit+0x98>)
 8002fb2:	f001 fb6f 	bl	8004694 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_I2C_MspInit+0x9c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f043 0302 	orr.w	r3, r3, #2
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <HAL_I2C_MspInit+0x9c>)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_I2C_MspInit+0x94>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <HAL_I2C_MspInit+0x94>)
 8002fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fdc:	61d3      	str	r3, [r2, #28]
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_I2C_MspInit+0x94>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fea:	bf00      	nop
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40005400 	.word	0x40005400
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40010c00 	.word	0x40010c00
 8003000:	40010000 	.word	0x40010000

08003004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0310 	add.w	r3, r7, #16
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_SPI_MspInit+0x88>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d12f      	bne.n	8003084 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_SPI_MspInit+0x8c>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_SPI_MspInit+0x8c>)
 800302a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800302e:	6193      	str	r3, [r2, #24]
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_SPI_MspInit+0x8c>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_SPI_MspInit+0x8c>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4a13      	ldr	r2, [pc, #76]	; (8003090 <HAL_SPI_MspInit+0x8c>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6193      	str	r3, [r2, #24]
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_SPI_MspInit+0x8c>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003054:	23a0      	movs	r3, #160	; 0xa0
 8003056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4619      	mov	r1, r3
 8003066:	480b      	ldr	r0, [pc, #44]	; (8003094 <HAL_SPI_MspInit+0x90>)
 8003068:	f001 fb14 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800306c:	2340      	movs	r3, #64	; 0x40
 800306e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	4619      	mov	r1, r3
 800307e:	4805      	ldr	r0, [pc, #20]	; (8003094 <HAL_SPI_MspInit+0x90>)
 8003080:	f001 fb08 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003084:	bf00      	nop
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40013000 	.word	0x40013000
 8003090:	40021000 	.word	0x40021000
 8003094:	40010800 	.word	0x40010800

08003098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a75      	ldr	r2, [pc, #468]	; (8003288 <HAL_UART_MspInit+0x1f0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d13a      	bne.n	800312e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030b8:	4b74      	ldr	r3, [pc, #464]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a73      	ldr	r2, [pc, #460]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80030be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b71      	ldr	r3, [pc, #452]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d0:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a6d      	ldr	r2, [pc, #436]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b6b      	ldr	r3, [pc, #428]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fa:	4619      	mov	r1, r3
 80030fc:	4864      	ldr	r0, [pc, #400]	; (8003290 <HAL_UART_MspInit+0x1f8>)
 80030fe:	f001 fac9 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003114:	4619      	mov	r1, r3
 8003116:	485e      	ldr	r0, [pc, #376]	; (8003290 <HAL_UART_MspInit+0x1f8>)
 8003118:	f001 fabc 	bl	8004694 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800311c:	2200      	movs	r2, #0
 800311e:	2100      	movs	r1, #0
 8003120:	2025      	movs	r0, #37	; 0x25
 8003122:	f001 f9ce 	bl	80044c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003126:	2025      	movs	r0, #37	; 0x25
 8003128:	f001 f9e7 	bl	80044fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800312c:	e0a8      	b.n	8003280 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_UART_MspInit+0x1fc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d12c      	bne.n	8003192 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003138:	4b54      	ldr	r3, [pc, #336]	; (800328c <HAL_UART_MspInit+0x1f4>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a53      	ldr	r2, [pc, #332]	; (800328c <HAL_UART_MspInit+0x1f4>)
 800313e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003142:	61d3      	str	r3, [r2, #28]
 8003144:	4b51      	ldr	r3, [pc, #324]	; (800328c <HAL_UART_MspInit+0x1f4>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003150:	4b4e      	ldr	r3, [pc, #312]	; (800328c <HAL_UART_MspInit+0x1f4>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4a4d      	ldr	r2, [pc, #308]	; (800328c <HAL_UART_MspInit+0x1f4>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6193      	str	r3, [r2, #24]
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_UART_MspInit+0x1f4>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003168:	230c      	movs	r3, #12
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2302      	movs	r3, #2
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003178:	4619      	mov	r1, r3
 800317a:	4845      	ldr	r0, [pc, #276]	; (8003290 <HAL_UART_MspInit+0x1f8>)
 800317c:	f001 fa8a 	bl	8004694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	2026      	movs	r0, #38	; 0x26
 8003186:	f001 f99c 	bl	80044c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800318a:	2026      	movs	r0, #38	; 0x26
 800318c:	f001 f9b5 	bl	80044fa <HAL_NVIC_EnableIRQ>
}
 8003190:	e076      	b.n	8003280 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a40      	ldr	r2, [pc, #256]	; (8003298 <HAL_UART_MspInit+0x200>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d171      	bne.n	8003280 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800319c:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_UART_MspInit+0x1f4>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4a3a      	ldr	r2, [pc, #232]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a6:	61d3      	str	r3, [r2, #28]
 80031a8:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031ba:	f043 0308 	orr.w	r3, r3, #8
 80031be:	6193      	str	r3, [r2, #24]
 80031c0:	4b32      	ldr	r3, [pc, #200]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a2e      	ldr	r2, [pc, #184]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031d2:	f043 0310 	orr.w	r3, r3, #16
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_UART_MspInit+0x1f4>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80031e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f6:	4619      	mov	r1, r3
 80031f8:	4828      	ldr	r0, [pc, #160]	; (800329c <HAL_UART_MspInit+0x204>)
 80031fa:	f001 fa4b 	bl	8004694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003208:	2303      	movs	r3, #3
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	4822      	ldr	r0, [pc, #136]	; (800329c <HAL_UART_MspInit+0x204>)
 8003214:	f001 fa3e 	bl	8004694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322a:	4619      	mov	r1, r3
 800322c:	481c      	ldr	r0, [pc, #112]	; (80032a0 <HAL_UART_MspInit+0x208>)
 800322e:	f001 fa31 	bl	8004694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003238:	2300      	movs	r3, #0
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	4619      	mov	r1, r3
 8003246:	4816      	ldr	r0, [pc, #88]	; (80032a0 <HAL_UART_MspInit+0x208>)
 8003248:	f001 fa24 	bl	8004694 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_UART_MspInit+0x20c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
 8003262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
 800326a:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <HAL_UART_MspInit+0x20c>)
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326e:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	2027      	movs	r0, #39	; 0x27
 8003276:	f001 f924 	bl	80044c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800327a:	2027      	movs	r0, #39	; 0x27
 800327c:	f001 f93d 	bl	80044fa <HAL_NVIC_EnableIRQ>
}
 8003280:	bf00      	nop
 8003282:	3738      	adds	r7, #56	; 0x38
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40013800 	.word	0x40013800
 800328c:	40021000 	.word	0x40021000
 8003290:	40010800 	.word	0x40010800
 8003294:	40004400 	.word	0x40004400
 8003298:	40004800 	.word	0x40004800
 800329c:	40010c00 	.word	0x40010c00
 80032a0:	40011000 	.word	0x40011000
 80032a4:	40010000 	.word	0x40010000

080032a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <NMI_Handler+0x4>

080032ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <HardFault_Handler+0x4>

080032b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <MemManage_Handler+0x4>

080032ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032be:	e7fe      	b.n	80032be <BusFault_Handler+0x4>

080032c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <UsageFault_Handler+0x4>

080032c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ee:	f000 f951 	bl	8003594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80032fe:	f000 fe01 	bl	8003f04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20003bb4 	.word	0x20003bb4

0800330c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <CAN1_RX1_IRQHandler+0x10>)
 8003312:	f000 fdf7 	bl	8003f04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20003bb4 	.word	0x20003bb4

08003320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <USART1_IRQHandler+0x10>)
 8003326:	f002 ff23 	bl	8006170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20003bdc 	.word	0x20003bdc

08003334 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <USART2_IRQHandler+0x10>)
 800333a:	f002 ff19 	bl	8006170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20003c7c 	.word	0x20003c7c

08003348 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern int insert_uart_AT_Q(uint8_t ch);
	uint32_t isrflags   = READ_REG(huart3.Instance->SR);
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <USART3_IRQHandler+0x5c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
	uint32_t cr1its     = READ_REG(huart3.Instance->CR1);
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <USART3_IRQHandler+0x5c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
	uint32_t cr3its     = READ_REG(huart3.Instance->CR3);
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <USART3_IRQHandler+0x5c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	607b      	str	r3, [r7, #4]
	uint32_t errorflags;
	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	603b      	str	r3, [r7, #0]
	if (errorflags == RESET)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <USART3_IRQHandler+0x50>
	{
	   /* UART in mode Receiver ---------------------------------------------------*/
	     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00c      	beq.n	8003398 <USART3_IRQHandler+0x50>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <USART3_IRQHandler+0x50>
	     {
	    	 insert_uart_AT_Q(READ_REG(huart3.Instance->DR));
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <USART3_IRQHandler+0x5c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe ff7b 	bl	800228c <insert_uart_AT_Q>
	          return;
 8003396:	e002      	b.n	800339e <USART3_IRQHandler+0x56>
	     }
	}
	else
	{}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <USART3_IRQHandler+0x5c>)
 800339a:	f002 fee9 	bl	8006170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000f90 	.word	0x20000f90

080033a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e00a      	b.n	80033d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033ba:	f3af 8000 	nop.w
 80033be:	4601      	mov	r1, r0
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	60ba      	str	r2, [r7, #8]
 80033c6:	b2ca      	uxtb	r2, r1
 80033c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3301      	adds	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dbf0      	blt.n	80033ba <_read+0x12>
	}

return len;
 80033d8:	687b      	ldr	r3, [r7, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
	return -1;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003408:	605a      	str	r2, [r3, #4]
	return 0;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <_isatty>:

int _isatty(int file)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
	return 1;
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
	return 0;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
	...

08003444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <_sbrk+0x5c>)
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <_sbrk+0x60>)
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <_sbrk+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <_sbrk+0x64>)
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <_sbrk+0x68>)
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d207      	bcs.n	8003484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003474:	f006 fd70 	bl	8009f58 <__errno>
 8003478:	4603      	mov	r3, r0
 800347a:	220c      	movs	r2, #12
 800347c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e009      	b.n	8003498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <_sbrk+0x64>)
 8003494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20005000 	.word	0x20005000
 80034a4:	00000400 	.word	0x00000400
 80034a8:	20000344 	.word	0x20000344
 80034ac:	20003cf0 	.word	0x20003cf0

080034b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034bc:	f7ff fff8 	bl	80034b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034c2:	490c      	ldr	r1, [pc, #48]	; (80034f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c8:	e002      	b.n	80034d0 <LoopCopyDataInit>

080034ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ce:	3304      	adds	r3, #4

080034d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d4:	d3f9      	bcc.n	80034ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034d8:	4c09      	ldr	r4, [pc, #36]	; (8003500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034dc:	e001      	b.n	80034e2 <LoopFillZerobss>

080034de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e0:	3204      	adds	r2, #4

080034e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e4:	d3fb      	bcc.n	80034de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034e6:	f006 ff07 	bl	800a2f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ea:	f7ff f9a9 	bl	8002840 <main>
  bx lr
 80034ee:	4770      	bx	lr
  ldr r0, =_sdata
 80034f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f4:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80034f8:	0800cd9c 	.word	0x0800cd9c
  ldr r2, =_sbss
 80034fc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8003500:	20003cf0 	.word	0x20003cf0

08003504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003504:	e7fe      	b.n	8003504 <ADC1_2_IRQHandler>
	...

08003508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <HAL_Init+0x28>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a07      	ldr	r2, [pc, #28]	; (8003530 <HAL_Init+0x28>)
 8003512:	f043 0310 	orr.w	r3, r3, #16
 8003516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003518:	2003      	movs	r0, #3
 800351a:	f000 ffc7 	bl	80044ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800351e:	2000      	movs	r0, #0
 8003520:	f000 f808 	bl	8003534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003524:	f7ff fc98 	bl	8002e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_InitTick+0x54>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_InitTick+0x58>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800354a:	fbb3 f3f1 	udiv	r3, r3, r1
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	4618      	mov	r0, r3
 8003554:	f000 ffdf 	bl	8004516 <HAL_SYSTICK_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e00e      	b.n	8003580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d80a      	bhi.n	800357e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003568:	2200      	movs	r2, #0
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	f000 ffa7 	bl	80044c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003574:	4a06      	ldr	r2, [pc, #24]	; (8003590 <HAL_InitTick+0x5c>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000098 	.word	0x20000098
 800358c:	200000a0 	.word	0x200000a0
 8003590:	2000009c 	.word	0x2000009c

08003594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_IncTick+0x1c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_IncTick+0x20>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	4a03      	ldr	r2, [pc, #12]	; (80035b4 <HAL_IncTick+0x20>)
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	200000a0 	.word	0x200000a0
 80035b4:	20003cc4 	.word	0x20003cc4

080035b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return uwTick;
 80035bc:	4b02      	ldr	r3, [pc, #8]	; (80035c8 <HAL_GetTick+0x10>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	20003cc4 	.word	0x20003cc4

080035cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d005      	beq.n	80035f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_Delay+0x44>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035f2:	bf00      	nop
 80035f4:	f7ff ffe0 	bl	80035b8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	429a      	cmp	r2, r3
 8003602:	d8f7      	bhi.n	80035f4 <HAL_Delay+0x28>
  {
  }
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200000a0 	.word	0x200000a0

08003614 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e0ed      	b.n	8003802 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fc42 	bl	8002ebc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003648:	f7ff ffb6 	bl	80035b8 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800364e:	e012      	b.n	8003676 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003650:	f7ff ffb2 	bl	80035b8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b0a      	cmp	r3, #10
 800365c:	d90b      	bls.n	8003676 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2205      	movs	r2, #5
 800366e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0c5      	b.n	8003802 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0e5      	beq.n	8003650 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0202 	bic.w	r2, r2, #2
 8003692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003694:	f7ff ff90 	bl	80035b8 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800369a:	e012      	b.n	80036c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800369c:	f7ff ff8c 	bl	80035b8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b0a      	cmp	r3, #10
 80036a8:	d90b      	bls.n	80036c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2205      	movs	r2, #5
 80036ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e09f      	b.n	8003802 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e5      	bne.n	800369c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7e1b      	ldrb	r3, [r3, #24]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d108      	bne.n	80036ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e007      	b.n	80036fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7e5b      	ldrb	r3, [r3, #25]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d108      	bne.n	8003714 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e007      	b.n	8003724 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003722:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7e9b      	ldrb	r3, [r3, #26]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d108      	bne.n	800373e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e007      	b.n	800374e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0220 	bic.w	r2, r2, #32
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7edb      	ldrb	r3, [r3, #27]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d108      	bne.n	8003768 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0210 	bic.w	r2, r2, #16
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e007      	b.n	8003778 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0210 	orr.w	r2, r2, #16
 8003776:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7f1b      	ldrb	r3, [r3, #28]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d108      	bne.n	8003792 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e007      	b.n	80037a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0208 	bic.w	r2, r2, #8
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7f5b      	ldrb	r3, [r3, #29]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d108      	bne.n	80037bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0204 	orr.w	r2, r2, #4
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e007      	b.n	80037cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0204 	bic.w	r2, r2, #4
 80037ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	ea42 0103 	orr.w	r1, r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003820:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d003      	beq.n	8003830 <HAL_CAN_ConfigFilter+0x26>
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b02      	cmp	r3, #2
 800382c:	f040 80aa 	bne.w	8003984 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2201      	movs	r2, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d123      	bne.n	80038b2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800388c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3248      	adds	r2, #72	; 0x48
 8003892:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	3348      	adds	r3, #72	; 0x48
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d122      	bne.n	8003900 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3248      	adds	r2, #72	; 0x48
 80038e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	3348      	adds	r3, #72	; 0x48
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	440b      	add	r3, r1
 80038fe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	401a      	ands	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800391a:	e007      	b.n	800392c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	431a      	orrs	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003946:	e007      	b.n	8003958 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	431a      	orrs	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	431a      	orrs	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003976:	f023 0201 	bic.w	r2, r3, #1
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e006      	b.n	8003992 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d12e      	bne.n	8003a0e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039c8:	f7ff fdf6 	bl	80035b8 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039ce:	e012      	b.n	80039f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039d0:	f7ff fdf2 	bl	80035b8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b0a      	cmp	r3, #10
 80039dc:	d90b      	bls.n	80039f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2205      	movs	r2, #5
 80039ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e012      	b.n	8003a1c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e5      	bne.n	80039d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e006      	b.n	8003a1c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a38:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a42:	7ffb      	ldrb	r3, [r7, #31]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d003      	beq.n	8003a50 <HAL_CAN_AddTxMessage+0x2c>
 8003a48:	7ffb      	ldrb	r3, [r7, #31]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	f040 80ad 	bne.w	8003baa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8095 	beq.w	8003b9a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	0e1b      	lsrs	r3, r3, #24
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	6809      	ldr	r1, [r1, #0]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3318      	adds	r3, #24
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	440b      	add	r3, r1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e00f      	b.n	8003ac8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ab2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ab8:	68f9      	ldr	r1, [r7, #12]
 8003aba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003abc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	440b      	add	r3, r1
 8003ac6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3304      	adds	r3, #4
 8003ada:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	7d1b      	ldrb	r3, [r3, #20]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d111      	bne.n	8003b08 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3318      	adds	r3, #24
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	6811      	ldr	r1, [r2, #0]
 8003af8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3318      	adds	r3, #24
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	440b      	add	r3, r1
 8003b04:	3304      	adds	r3, #4
 8003b06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3307      	adds	r3, #7
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	061a      	lsls	r2, r3, #24
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3306      	adds	r3, #6
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3305      	adds	r3, #5
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	4313      	orrs	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	3204      	adds	r2, #4
 8003b28:	7812      	ldrb	r2, [r2, #0]
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6811      	ldr	r1, [r2, #0]
 8003b30:	ea43 0200 	orr.w	r2, r3, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	440b      	add	r3, r1
 8003b3a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003b3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3303      	adds	r3, #3
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	061a      	lsls	r2, r3, #24
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3301      	adds	r3, #1
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	4610      	mov	r0, r2
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	6811      	ldr	r1, [r2, #0]
 8003b66:	ea43 0200 	orr.w	r2, r3, r0
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	440b      	add	r3, r1
 8003b70:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003b74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3318      	adds	r3, #24
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	6811      	ldr	r1, [r2, #0]
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	440b      	add	r3, r1
 8003b94:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e00e      	b.n	8003bb8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e006      	b.n	8003bb8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3724      	adds	r7, #36	; 0x24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d002      	beq.n	8003be2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d11d      	bne.n	8003c1e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d003      	beq.n	8003c4e <HAL_CAN_GetRxMessage+0x24>
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	f040 8103 	bne.w	8003e54 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10e      	bne.n	8003c72 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0f7      	b.n	8003e62 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0e8      	b.n	8003e62 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	331b      	adds	r3, #27
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	4413      	add	r3, r2
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0204 	and.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	331b      	adds	r3, #27
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	4413      	add	r3, r2
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0d5b      	lsrs	r3, r3, #21
 8003cbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	331b      	adds	r3, #27
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	08db      	lsrs	r3, r3, #3
 8003cd8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	331b      	adds	r3, #27
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	4413      	add	r3, r2
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0202 	and.w	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	331b      	adds	r3, #27
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	3304      	adds	r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2208      	movs	r2, #8
 8003d12:	611a      	str	r2, [r3, #16]
 8003d14:	e00b      	b.n	8003d2e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	331b      	adds	r3, #27
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	331b      	adds	r3, #27
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	331b      	adds	r3, #27
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	4413      	add	r3, r2
 8003d52:	3304      	adds	r3, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0a1a      	lsrs	r2, r3, #8
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	0c1a      	lsrs	r2, r3, #16
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	3302      	adds	r3, #2
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0e1a      	lsrs	r2, r3, #24
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	3303      	adds	r3, #3
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0a1a      	lsrs	r2, r3, #8
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	3305      	adds	r3, #5
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0c1a      	lsrs	r2, r3, #16
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	3306      	adds	r3, #6
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	0e1a      	lsrs	r2, r3, #24
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	3307      	adds	r3, #7
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0220 	orr.w	r2, r2, #32
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	e007      	b.n	8003e50 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0220 	orr.w	r2, r2, #32
 8003e4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e006      	b.n	8003e62 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e80:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e82:	7afb      	ldrb	r3, [r7, #11]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d002      	beq.n	8003e8e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003e88:	7afb      	ldrb	r3, [r7, #11]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d10f      	bne.n	8003eae <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e005      	b.n	8003eae <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d002      	beq.n	8003ed8 <HAL_CAN_ActivateNotification+0x1e>
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d109      	bne.n	8003eec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6959      	ldr	r1, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e006      	b.n	8003efa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d07c      	beq.n	8004044 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d023      	beq.n	8003f9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd fdf2 	bl	8001b50 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f6c:	e016      	b.n	8003f9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	e00c      	b.n	8003f9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	e002      	b.n	8003f9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f96b 	bl	8004272 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d024      	beq.n	8003ff0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fdda 	bl	8001b74 <HAL_CAN_TxMailbox1CompleteCallback>
 8003fc0:	e016      	b.n	8003ff0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd4:	e00c      	b.n	8003ff0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe8:	e002      	b.n	8003ff0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f94a 	bl	8004284 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d024      	beq.n	8004044 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004002:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd fdc2 	bl	8001b98 <HAL_CAN_TxMailbox2CompleteCallback>
 8004014:	e016      	b.n	8004044 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
 8004028:	e00c      	b.n	8004044 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
 800403c:	e002      	b.n	8004044 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f929 	bl	8004296 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00c      	beq.n	8004068 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2210      	movs	r2, #16
 8004066:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d006      	beq.n	800408a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2208      	movs	r2, #8
 8004082:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f90f 	bl	80042a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d009      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fd8a 	bl	8001bbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2210      	movs	r2, #16
 80040ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2208      	movs	r2, #8
 80040e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8ef 	bl	80042cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8d7 	bl	80042ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8d8 	bl	80042de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2208      	movs	r2, #8
 8004148:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8d0 	bl	80042f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d07b      	beq.n	8004252 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d072      	beq.n	800424a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	f043 0304 	orr.w	r3, r3, #4
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d043      	beq.n	800424a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d03e      	beq.n	800424a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041d2:	2b60      	cmp	r3, #96	; 0x60
 80041d4:	d02b      	beq.n	800422e <HAL_CAN_IRQHandler+0x32a>
 80041d6:	2b60      	cmp	r3, #96	; 0x60
 80041d8:	d82e      	bhi.n	8004238 <HAL_CAN_IRQHandler+0x334>
 80041da:	2b50      	cmp	r3, #80	; 0x50
 80041dc:	d022      	beq.n	8004224 <HAL_CAN_IRQHandler+0x320>
 80041de:	2b50      	cmp	r3, #80	; 0x50
 80041e0:	d82a      	bhi.n	8004238 <HAL_CAN_IRQHandler+0x334>
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d019      	beq.n	800421a <HAL_CAN_IRQHandler+0x316>
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d826      	bhi.n	8004238 <HAL_CAN_IRQHandler+0x334>
 80041ea:	2b30      	cmp	r3, #48	; 0x30
 80041ec:	d010      	beq.n	8004210 <HAL_CAN_IRQHandler+0x30c>
 80041ee:	2b30      	cmp	r3, #48	; 0x30
 80041f0:	d822      	bhi.n	8004238 <HAL_CAN_IRQHandler+0x334>
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d002      	beq.n	80041fc <HAL_CAN_IRQHandler+0x2f8>
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d005      	beq.n	8004206 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041fa:	e01d      	b.n	8004238 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f043 0308 	orr.w	r3, r3, #8
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004204:	e019      	b.n	800423a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	f043 0310 	orr.w	r3, r3, #16
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800420e:	e014      	b.n	800423a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004218:	e00f      	b.n	800423a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004222:	e00a      	b.n	800423a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800422c:	e005      	b.n	800423a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004236:	e000      	b.n	800423a <HAL_CAN_IRQHandler+0x336>
            break;
 8004238:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004248:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2204      	movs	r2, #4
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f84c 	bl	8004302 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800426a:	bf00      	nop
 800426c:	3728      	adds	r7, #40	; 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <__NVIC_SetPriorityGrouping+0x44>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004330:	4013      	ands	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800433c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004346:	4a04      	ldr	r2, [pc, #16]	; (8004358 <__NVIC_SetPriorityGrouping+0x44>)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	60d3      	str	r3, [r2, #12]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <__NVIC_GetPriorityGrouping+0x18>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	f003 0307 	and.w	r3, r3, #7
}
 800436a:	4618      	mov	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	2b00      	cmp	r3, #0
 8004388:	db0b      	blt.n	80043a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	4906      	ldr	r1, [pc, #24]	; (80043ac <__NVIC_EnableIRQ+0x34>)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2001      	movs	r0, #1
 800439a:	fa00 f202 	lsl.w	r2, r0, r2
 800439e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	e000e100 	.word	0xe000e100

080043b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	6039      	str	r1, [r7, #0]
 80043ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	db0a      	blt.n	80043da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	490c      	ldr	r1, [pc, #48]	; (80043fc <__NVIC_SetPriority+0x4c>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	0112      	lsls	r2, r2, #4
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	440b      	add	r3, r1
 80043d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043d8:	e00a      	b.n	80043f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4908      	ldr	r1, [pc, #32]	; (8004400 <__NVIC_SetPriority+0x50>)
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	3b04      	subs	r3, #4
 80043e8:	0112      	lsls	r2, r2, #4
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	440b      	add	r3, r1
 80043ee:	761a      	strb	r2, [r3, #24]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000e100 	.word	0xe000e100
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f1c3 0307 	rsb	r3, r3, #7
 800441e:	2b04      	cmp	r3, #4
 8004420:	bf28      	it	cs
 8004422:	2304      	movcs	r3, #4
 8004424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3304      	adds	r3, #4
 800442a:	2b06      	cmp	r3, #6
 800442c:	d902      	bls.n	8004434 <NVIC_EncodePriority+0x30>
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3b03      	subs	r3, #3
 8004432:	e000      	b.n	8004436 <NVIC_EncodePriority+0x32>
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	401a      	ands	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800444c:	f04f 31ff 	mov.w	r1, #4294967295
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	43d9      	mvns	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	4313      	orrs	r3, r2
         );
}
 800445e:	4618      	mov	r0, r3
 8004460:	3724      	adds	r7, #36	; 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004478:	d301      	bcc.n	800447e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800447a:	2301      	movs	r3, #1
 800447c:	e00f      	b.n	800449e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <SysTick_Config+0x40>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004486:	210f      	movs	r1, #15
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	f7ff ff90 	bl	80043b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <SysTick_Config+0x40>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004496:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <SysTick_Config+0x40>)
 8004498:	2207      	movs	r2, #7
 800449a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	e000e010 	.word	0xe000e010

080044ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ff2d 	bl	8004314 <__NVIC_SetPriorityGrouping>
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044d4:	f7ff ff42 	bl	800435c <__NVIC_GetPriorityGrouping>
 80044d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f7ff ff90 	bl	8004404 <NVIC_EncodePriority>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff5f 	bl	80043b0 <__NVIC_SetPriority>
}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4603      	mov	r3, r0
 8004502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff35 	bl	8004378 <__NVIC_EnableIRQ>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ffa2 	bl	8004468 <SysTick_Config>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d008      	beq.n	8004558 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2204      	movs	r2, #4
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e020      	b.n	800459a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 020e 	bic.w	r2, r2, #14
 8004566:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	2101      	movs	r1, #1
 8004582:	fa01 f202 	lsl.w	r2, r1, r2
 8004586:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d005      	beq.n	80045c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2204      	movs	r2, #4
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e051      	b.n	800466c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 020e 	bic.w	r2, r2, #14
 80045d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_DMA_Abort_IT+0xd4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d029      	beq.n	8004646 <HAL_DMA_Abort_IT+0xa2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_DMA_Abort_IT+0xd8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_DMA_Abort_IT+0x9e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_DMA_Abort_IT+0xdc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01a      	beq.n	800463c <HAL_DMA_Abort_IT+0x98>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <HAL_DMA_Abort_IT+0xe0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d012      	beq.n	8004636 <HAL_DMA_Abort_IT+0x92>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_DMA_Abort_IT+0xe4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00a      	beq.n	8004630 <HAL_DMA_Abort_IT+0x8c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <HAL_DMA_Abort_IT+0xe8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d102      	bne.n	800462a <HAL_DMA_Abort_IT+0x86>
 8004624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004628:	e00e      	b.n	8004648 <HAL_DMA_Abort_IT+0xa4>
 800462a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800462e:	e00b      	b.n	8004648 <HAL_DMA_Abort_IT+0xa4>
 8004630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004634:	e008      	b.n	8004648 <HAL_DMA_Abort_IT+0xa4>
 8004636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800463a:	e005      	b.n	8004648 <HAL_DMA_Abort_IT+0xa4>
 800463c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004640:	e002      	b.n	8004648 <HAL_DMA_Abort_IT+0xa4>
 8004642:	2310      	movs	r3, #16
 8004644:	e000      	b.n	8004648 <HAL_DMA_Abort_IT+0xa4>
 8004646:	2301      	movs	r3, #1
 8004648:	4a11      	ldr	r2, [pc, #68]	; (8004690 <HAL_DMA_Abort_IT+0xec>)
 800464a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
    } 
  }
  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40020008 	.word	0x40020008
 800467c:	4002001c 	.word	0x4002001c
 8004680:	40020030 	.word	0x40020030
 8004684:	40020044 	.word	0x40020044
 8004688:	40020058 	.word	0x40020058
 800468c:	4002006c 	.word	0x4002006c
 8004690:	40020000 	.word	0x40020000

08004694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b08b      	sub	sp, #44	; 0x2c
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046a2:	2300      	movs	r3, #0
 80046a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a6:	e169      	b.n	800497c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046a8:	2201      	movs	r2, #1
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	f040 8158 	bne.w	8004976 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4a9a      	ldr	r2, [pc, #616]	; (8004934 <HAL_GPIO_Init+0x2a0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d05e      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046d0:	4a98      	ldr	r2, [pc, #608]	; (8004934 <HAL_GPIO_Init+0x2a0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d875      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046d6:	4a98      	ldr	r2, [pc, #608]	; (8004938 <HAL_GPIO_Init+0x2a4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d058      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046dc:	4a96      	ldr	r2, [pc, #600]	; (8004938 <HAL_GPIO_Init+0x2a4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d86f      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046e2:	4a96      	ldr	r2, [pc, #600]	; (800493c <HAL_GPIO_Init+0x2a8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d052      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046e8:	4a94      	ldr	r2, [pc, #592]	; (800493c <HAL_GPIO_Init+0x2a8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d869      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046ee:	4a94      	ldr	r2, [pc, #592]	; (8004940 <HAL_GPIO_Init+0x2ac>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d04c      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 80046f4:	4a92      	ldr	r2, [pc, #584]	; (8004940 <HAL_GPIO_Init+0x2ac>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d863      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 80046fa:	4a92      	ldr	r2, [pc, #584]	; (8004944 <HAL_GPIO_Init+0x2b0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d046      	beq.n	800478e <HAL_GPIO_Init+0xfa>
 8004700:	4a90      	ldr	r2, [pc, #576]	; (8004944 <HAL_GPIO_Init+0x2b0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d85d      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 8004706:	2b12      	cmp	r3, #18
 8004708:	d82a      	bhi.n	8004760 <HAL_GPIO_Init+0xcc>
 800470a:	2b12      	cmp	r3, #18
 800470c:	d859      	bhi.n	80047c2 <HAL_GPIO_Init+0x12e>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <HAL_GPIO_Init+0x80>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	0800478f 	.word	0x0800478f
 8004718:	08004769 	.word	0x08004769
 800471c:	0800477b 	.word	0x0800477b
 8004720:	080047bd 	.word	0x080047bd
 8004724:	080047c3 	.word	0x080047c3
 8004728:	080047c3 	.word	0x080047c3
 800472c:	080047c3 	.word	0x080047c3
 8004730:	080047c3 	.word	0x080047c3
 8004734:	080047c3 	.word	0x080047c3
 8004738:	080047c3 	.word	0x080047c3
 800473c:	080047c3 	.word	0x080047c3
 8004740:	080047c3 	.word	0x080047c3
 8004744:	080047c3 	.word	0x080047c3
 8004748:	080047c3 	.word	0x080047c3
 800474c:	080047c3 	.word	0x080047c3
 8004750:	080047c3 	.word	0x080047c3
 8004754:	080047c3 	.word	0x080047c3
 8004758:	08004771 	.word	0x08004771
 800475c:	08004785 	.word	0x08004785
 8004760:	4a79      	ldr	r2, [pc, #484]	; (8004948 <HAL_GPIO_Init+0x2b4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004766:	e02c      	b.n	80047c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	623b      	str	r3, [r7, #32]
          break;
 800476e:	e029      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	3304      	adds	r3, #4
 8004776:	623b      	str	r3, [r7, #32]
          break;
 8004778:	e024      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	3308      	adds	r3, #8
 8004780:	623b      	str	r3, [r7, #32]
          break;
 8004782:	e01f      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	330c      	adds	r3, #12
 800478a:	623b      	str	r3, [r7, #32]
          break;
 800478c:	e01a      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004796:	2304      	movs	r3, #4
 8004798:	623b      	str	r3, [r7, #32]
          break;
 800479a:	e013      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047a4:	2308      	movs	r3, #8
 80047a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	611a      	str	r2, [r3, #16]
          break;
 80047ae:	e009      	b.n	80047c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047b0:	2308      	movs	r3, #8
 80047b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	615a      	str	r2, [r3, #20]
          break;
 80047ba:	e003      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047bc:	2300      	movs	r3, #0
 80047be:	623b      	str	r3, [r7, #32]
          break;
 80047c0:	e000      	b.n	80047c4 <HAL_GPIO_Init+0x130>
          break;
 80047c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2bff      	cmp	r3, #255	; 0xff
 80047c8:	d801      	bhi.n	80047ce <HAL_GPIO_Init+0x13a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	e001      	b.n	80047d2 <HAL_GPIO_Init+0x13e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2bff      	cmp	r3, #255	; 0xff
 80047d8:	d802      	bhi.n	80047e0 <HAL_GPIO_Init+0x14c>
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	e002      	b.n	80047e6 <HAL_GPIO_Init+0x152>
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	3b08      	subs	r3, #8
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	210f      	movs	r1, #15
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	401a      	ands	r2, r3
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	431a      	orrs	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80b1 	beq.w	8004976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004814:	4b4d      	ldr	r3, [pc, #308]	; (800494c <HAL_GPIO_Init+0x2b8>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4a4c      	ldr	r2, [pc, #304]	; (800494c <HAL_GPIO_Init+0x2b8>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6193      	str	r3, [r2, #24]
 8004820:	4b4a      	ldr	r3, [pc, #296]	; (800494c <HAL_GPIO_Init+0x2b8>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800482c:	4a48      	ldr	r2, [pc, #288]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	220f      	movs	r2, #15
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4013      	ands	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a40      	ldr	r2, [pc, #256]	; (8004954 <HAL_GPIO_Init+0x2c0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_GPIO_Init+0x1ec>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <HAL_GPIO_Init+0x2c4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00d      	beq.n	800487c <HAL_GPIO_Init+0x1e8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3e      	ldr	r2, [pc, #248]	; (800495c <HAL_GPIO_Init+0x2c8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <HAL_GPIO_Init+0x1e4>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3d      	ldr	r2, [pc, #244]	; (8004960 <HAL_GPIO_Init+0x2cc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_GPIO_Init+0x1e0>
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 8004874:	2304      	movs	r3, #4
 8004876:	e004      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 8004878:	2302      	movs	r3, #2
 800487a:	e002      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_GPIO_Init+0x1ee>
 8004880:	2300      	movs	r3, #0
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	f002 0203 	and.w	r2, r2, #3
 8004888:	0092      	lsls	r2, r2, #2
 800488a:	4093      	lsls	r3, r2
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004892:	492f      	ldr	r1, [pc, #188]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	3302      	adds	r3, #2
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048ac:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	492c      	ldr	r1, [pc, #176]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	608b      	str	r3, [r1, #8]
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	4928      	ldr	r1, [pc, #160]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	4922      	ldr	r1, [pc, #136]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60cb      	str	r3, [r1, #12]
 80048e0:	e006      	b.n	80048f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	491e      	ldr	r1, [pc, #120]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d006      	beq.n	800490a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	4918      	ldr	r1, [pc, #96]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
 8004908:	e006      	b.n	8004918 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	43db      	mvns	r3, r3
 8004912:	4914      	ldr	r1, [pc, #80]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 8004914:	4013      	ands	r3, r2
 8004916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d021      	beq.n	8004968 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_GPIO_Init+0x2d0>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e021      	b.n	8004976 <HAL_GPIO_Init+0x2e2>
 8004932:	bf00      	nop
 8004934:	10320000 	.word	0x10320000
 8004938:	10310000 	.word	0x10310000
 800493c:	10220000 	.word	0x10220000
 8004940:	10210000 	.word	0x10210000
 8004944:	10120000 	.word	0x10120000
 8004948:	10110000 	.word	0x10110000
 800494c:	40021000 	.word	0x40021000
 8004950:	40010000 	.word	0x40010000
 8004954:	40010800 	.word	0x40010800
 8004958:	40010c00 	.word	0x40010c00
 800495c:	40011000 	.word	0x40011000
 8004960:	40011400 	.word	0x40011400
 8004964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_GPIO_Init+0x304>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	43db      	mvns	r3, r3
 8004970:	4909      	ldr	r1, [pc, #36]	; (8004998 <HAL_GPIO_Init+0x304>)
 8004972:	4013      	ands	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	3301      	adds	r3, #1
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f47f ae8e 	bne.w	80046a8 <HAL_GPIO_Init+0x14>
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	372c      	adds	r7, #44	; 0x2c
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40010400 	.word	0x40010400

0800499c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049ac:	787b      	ldrb	r3, [r7, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049b8:	e003      	b.n	80049c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	611a      	str	r2, [r3, #16]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e12b      	b.n	8004c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fe fab6 	bl	8002f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	; 0x24
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a30:	f000 fcd8 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8004a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4a81      	ldr	r2, [pc, #516]	; (8004c40 <HAL_I2C_Init+0x274>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d807      	bhi.n	8004a50 <HAL_I2C_Init+0x84>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a80      	ldr	r2, [pc, #512]	; (8004c44 <HAL_I2C_Init+0x278>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	bf94      	ite	ls
 8004a48:	2301      	movls	r3, #1
 8004a4a:	2300      	movhi	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e006      	b.n	8004a5e <HAL_I2C_Init+0x92>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a7d      	ldr	r2, [pc, #500]	; (8004c48 <HAL_I2C_Init+0x27c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	bf94      	ite	ls
 8004a58:	2301      	movls	r3, #1
 8004a5a:	2300      	movhi	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0e7      	b.n	8004c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a78      	ldr	r2, [pc, #480]	; (8004c4c <HAL_I2C_Init+0x280>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0c9b      	lsrs	r3, r3, #18
 8004a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a6a      	ldr	r2, [pc, #424]	; (8004c40 <HAL_I2C_Init+0x274>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d802      	bhi.n	8004aa0 <HAL_I2C_Init+0xd4>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	e009      	b.n	8004ab4 <HAL_I2C_Init+0xe8>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	4a69      	ldr	r2, [pc, #420]	; (8004c50 <HAL_I2C_Init+0x284>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ac6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	495c      	ldr	r1, [pc, #368]	; (8004c40 <HAL_I2C_Init+0x274>)
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	d819      	bhi.n	8004b08 <HAL_I2C_Init+0x13c>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e59      	subs	r1, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ae2:	1c59      	adds	r1, r3, #1
 8004ae4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ae8:	400b      	ands	r3, r1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_I2C_Init+0x138>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1e59      	subs	r1, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004afc:	3301      	adds	r3, #1
 8004afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b02:	e051      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b04:	2304      	movs	r3, #4
 8004b06:	e04f      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d111      	bne.n	8004b34 <HAL_I2C_Init+0x168>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1e58      	subs	r0, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	440b      	add	r3, r1
 8004b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b22:	3301      	adds	r3, #1
 8004b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e012      	b.n	8004b5a <HAL_I2C_Init+0x18e>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	0099      	lsls	r1, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Init+0x196>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e022      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10e      	bne.n	8004b88 <HAL_I2C_Init+0x1bc>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1e58      	subs	r0, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6859      	ldr	r1, [r3, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	440b      	add	r3, r1
 8004b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	e00f      	b.n	8004ba8 <HAL_I2C_Init+0x1dc>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1e58      	subs	r0, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	0099      	lsls	r1, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	6809      	ldr	r1, [r1, #0]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6911      	ldr	r1, [r2, #16]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68d2      	ldr	r2, [r2, #12]
 8004be2:	4311      	orrs	r1, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	000186a0 	.word	0x000186a0
 8004c44:	001e847f 	.word	0x001e847f
 8004c48:	003d08ff 	.word	0x003d08ff
 8004c4c:	431bde83 	.word	0x431bde83
 8004c50:	10624dd3 	.word	0x10624dd3

08004c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e26c      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8087 	beq.w	8004d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c74:	4b92      	ldr	r3, [pc, #584]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d00c      	beq.n	8004c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c80:	4b8f      	ldr	r3, [pc, #572]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d112      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x5e>
 8004c8c:	4b8c      	ldr	r3, [pc, #560]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d10b      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9a:	4b89      	ldr	r3, [pc, #548]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d06c      	beq.n	8004d80 <HAL_RCC_OscConfig+0x12c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d168      	bne.n	8004d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e246      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cba:	d106      	bne.n	8004cca <HAL_RCC_OscConfig+0x76>
 8004cbc:	4b80      	ldr	r3, [pc, #512]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a7f      	ldr	r2, [pc, #508]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e02e      	b.n	8004d28 <HAL_RCC_OscConfig+0xd4>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0x98>
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a7a      	ldr	r2, [pc, #488]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b78      	ldr	r3, [pc, #480]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a77      	ldr	r2, [pc, #476]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e01d      	b.n	8004d28 <HAL_RCC_OscConfig+0xd4>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0xbc>
 8004cf6:	4b72      	ldr	r3, [pc, #456]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a71      	ldr	r2, [pc, #452]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b6f      	ldr	r3, [pc, #444]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6e      	ldr	r2, [pc, #440]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCC_OscConfig+0xd4>
 8004d10:	4b6b      	ldr	r3, [pc, #428]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a6a      	ldr	r2, [pc, #424]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	4b68      	ldr	r3, [pc, #416]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a67      	ldr	r2, [pc, #412]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d013      	beq.n	8004d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fe fc42 	bl	80035b8 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fe fc3e 	bl	80035b8 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e1fa      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0xe4>
 8004d56:	e014      	b.n	8004d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d58:	f7fe fc2e 	bl	80035b8 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d60:	f7fe fc2a 	bl	80035b8 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b64      	cmp	r3, #100	; 0x64
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e1e6      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x10c>
 8004d7e:	e000      	b.n	8004d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d063      	beq.n	8004e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d8e:	4b4c      	ldr	r3, [pc, #304]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d9a:	4b49      	ldr	r3, [pc, #292]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d11c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x18c>
 8004da6:	4b46      	ldr	r3, [pc, #280]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d116      	bne.n	8004de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db2:	4b43      	ldr	r3, [pc, #268]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCC_OscConfig+0x176>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e1ba      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dca:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4939      	ldr	r1, [pc, #228]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dde:	e03a      	b.n	8004e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de8:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <HAL_RCC_OscConfig+0x270>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fe fbe3 	bl	80035b8 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df6:	f7fe fbdf 	bl	80035b8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e19b      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4927      	ldr	r1, [pc, #156]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]
 8004e28:	e015      	b.n	8004e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2a:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <HAL_RCC_OscConfig+0x270>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fe fbc2 	bl	80035b8 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fe fbbe 	bl	80035b8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e17a      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d03a      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d019      	beq.n	8004e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e70:	f7fe fba2 	bl	80035b8 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e78:	f7fe fb9e 	bl	80035b8 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e15a      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e96:	2001      	movs	r0, #1
 8004e98:	f000 facc 	bl	8005434 <RCC_Delay>
 8004e9c:	e01c      	b.n	8004ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_RCC_OscConfig+0x274>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea4:	f7fe fb88 	bl	80035b8 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eaa:	e00f      	b.n	8004ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eac:	f7fe fb84 	bl	80035b8 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d908      	bls.n	8004ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e140      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	42420000 	.word	0x42420000
 8004ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	4b9e      	ldr	r3, [pc, #632]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e9      	bne.n	8004eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80a6 	beq.w	8005032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eea:	4b97      	ldr	r3, [pc, #604]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef6:	4b94      	ldr	r3, [pc, #592]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	4a93      	ldr	r2, [pc, #588]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	61d3      	str	r3, [r2, #28]
 8004f02:	4b91      	ldr	r3, [pc, #580]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	4b8e      	ldr	r3, [pc, #568]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d118      	bne.n	8004f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1e:	4b8b      	ldr	r3, [pc, #556]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a8a      	ldr	r2, [pc, #552]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fe fb45 	bl	80035b8 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f32:	f7fe fb41 	bl	80035b8 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b64      	cmp	r3, #100	; 0x64
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e0fd      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	4b81      	ldr	r3, [pc, #516]	; (800514c <HAL_RCC_OscConfig+0x4f8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x312>
 8004f58:	4b7b      	ldr	r3, [pc, #492]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	4a7a      	ldr	r2, [pc, #488]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6213      	str	r3, [r2, #32]
 8004f64:	e02d      	b.n	8004fc2 <HAL_RCC_OscConfig+0x36e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x334>
 8004f6e:	4b76      	ldr	r3, [pc, #472]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	4a75      	ldr	r2, [pc, #468]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	6213      	str	r3, [r2, #32]
 8004f7a:	4b73      	ldr	r3, [pc, #460]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	4a72      	ldr	r2, [pc, #456]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	6213      	str	r3, [r2, #32]
 8004f86:	e01c      	b.n	8004fc2 <HAL_RCC_OscConfig+0x36e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d10c      	bne.n	8004faa <HAL_RCC_OscConfig+0x356>
 8004f90:	4b6d      	ldr	r3, [pc, #436]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	4a6c      	ldr	r2, [pc, #432]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	6213      	str	r3, [r2, #32]
 8004f9c:	4b6a      	ldr	r3, [pc, #424]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	4a69      	ldr	r2, [pc, #420]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6213      	str	r3, [r2, #32]
 8004fa8:	e00b      	b.n	8004fc2 <HAL_RCC_OscConfig+0x36e>
 8004faa:	4b67      	ldr	r3, [pc, #412]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4a66      	ldr	r2, [pc, #408]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	6213      	str	r3, [r2, #32]
 8004fb6:	4b64      	ldr	r3, [pc, #400]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	4a63      	ldr	r2, [pc, #396]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004fbc:	f023 0304 	bic.w	r3, r3, #4
 8004fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d015      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fca:	f7fe faf5 	bl	80035b8 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fe faf1 	bl	80035b8 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e0ab      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe8:	4b57      	ldr	r3, [pc, #348]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0ee      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x37e>
 8004ff4:	e014      	b.n	8005020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff6:	f7fe fadf 	bl	80035b8 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f7fe fadb 	bl	80035b8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	; 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e095      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005014:	4b4c      	ldr	r3, [pc, #304]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1ee      	bne.n	8004ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005026:	4b48      	ldr	r3, [pc, #288]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4a47      	ldr	r2, [pc, #284]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 800502c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 8081 	beq.w	800513e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800503c:	4b42      	ldr	r3, [pc, #264]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 030c 	and.w	r3, r3, #12
 8005044:	2b08      	cmp	r3, #8
 8005046:	d061      	beq.n	800510c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d146      	bne.n	80050de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005050:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <HAL_RCC_OscConfig+0x4fc>)
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005056:	f7fe faaf 	bl	80035b8 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505e:	f7fe faab 	bl	80035b8 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e067      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005070:	4b35      	ldr	r3, [pc, #212]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f0      	bne.n	800505e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005084:	d108      	bne.n	8005098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005086:	4b30      	ldr	r3, [pc, #192]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	492d      	ldr	r1, [pc, #180]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005098:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a19      	ldr	r1, [r3, #32]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	430b      	orrs	r3, r1
 80050aa:	4927      	ldr	r1, [pc, #156]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_RCC_OscConfig+0x4fc>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fe fa7f 	bl	80035b8 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050be:	f7fe fa7b 	bl	80035b8 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e037      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x46a>
 80050dc:	e02f      	b.n	800513e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050de:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <HAL_RCC_OscConfig+0x4fc>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fe fa68 	bl	80035b8 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe fa64 	bl	80035b8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e020      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x498>
 800510a:	e018      	b.n	800513e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e013      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_OscConfig+0x4f4>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	429a      	cmp	r2, r3
 800512a:	d106      	bne.n	800513a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d001      	beq.n	800513e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
 8005150:	42420060 	.word	0x42420060

08005154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0d0      	b.n	800530a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b6a      	ldr	r3, [pc, #424]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d910      	bls.n	8005198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b67      	ldr	r3, [pc, #412]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0207 	bic.w	r2, r3, #7
 800517e:	4965      	ldr	r1, [pc, #404]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b63      	ldr	r3, [pc, #396]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0b8      	b.n	800530a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d020      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4a58      	ldr	r2, [pc, #352]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c8:	4b53      	ldr	r3, [pc, #332]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a52      	ldr	r2, [pc, #328]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d4:	4b50      	ldr	r3, [pc, #320]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	494d      	ldr	r1, [pc, #308]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d040      	beq.n	8005274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d107      	bne.n	800520a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fa:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d115      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07f      	b.n	800530a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b41      	ldr	r3, [pc, #260]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e073      	b.n	800530a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005222:	4b3d      	ldr	r3, [pc, #244]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e06b      	b.n	800530a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005232:	4b39      	ldr	r3, [pc, #228]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f023 0203 	bic.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4936      	ldr	r1, [pc, #216]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005244:	f7fe f9b8 	bl	80035b8 <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	e00a      	b.n	8005262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fe f9b4 	bl	80035b8 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e053      	b.n	800530a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 020c 	and.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1eb      	bne.n	800524c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d210      	bcs.n	80052a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 0207 	bic.w	r2, r3, #7
 800528a:	4922      	ldr	r1, [pc, #136]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	4b20      	ldr	r3, [pc, #128]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d001      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e032      	b.n	800530a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4916      	ldr	r1, [pc, #88]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d009      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	490e      	ldr	r1, [pc, #56]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052e2:	f000 f821 	bl	8005328 <HAL_RCC_GetSysClockFreq>
 80052e6:	4602      	mov	r2, r0
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	490a      	ldr	r1, [pc, #40]	; (800531c <HAL_RCC_ClockConfig+0x1c8>)
 80052f4:	5ccb      	ldrb	r3, [r1, r3]
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <HAL_RCC_ClockConfig+0x1cc>)
 80052fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <HAL_RCC_ClockConfig+0x1d0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe f916 	bl	8003534 <HAL_InitTick>

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40022000 	.word	0x40022000
 8005318:	40021000 	.word	0x40021000
 800531c:	0800cbb4 	.word	0x0800cbb4
 8005320:	20000098 	.word	0x20000098
 8005324:	2000009c 	.word	0x2000009c

08005328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005342:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b04      	cmp	r3, #4
 8005350:	d002      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x30>
 8005352:	2b08      	cmp	r3, #8
 8005354:	d003      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x36>
 8005356:	e027      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005358:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800535a:	613b      	str	r3, [r7, #16]
      break;
 800535c:	e027      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	0c9b      	lsrs	r3, r3, #18
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	4a17      	ldr	r2, [pc, #92]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005368:	5cd3      	ldrb	r3, [r2, r3]
 800536a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d010      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	0c5b      	lsrs	r3, r3, #17
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005382:	5cd3      	ldrb	r3, [r2, r3]
 8005384:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a0d      	ldr	r2, [pc, #52]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800538a:	fb02 f203 	mul.w	r2, r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e004      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a0c      	ldr	r2, [pc, #48]	; (80053cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800539c:	fb02 f303 	mul.w	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	613b      	str	r3, [r7, #16]
      break;
 80053a6:	e002      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80053aa:	613b      	str	r3, [r7, #16]
      break;
 80053ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ae:	693b      	ldr	r3, [r7, #16]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000
 80053c0:	007a1200 	.word	0x007a1200
 80053c4:	0800cbcc 	.word	0x0800cbcc
 80053c8:	0800cbdc 	.word	0x0800cbdc
 80053cc:	003d0900 	.word	0x003d0900

080053d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d4:	4b02      	ldr	r3, [pc, #8]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80053d6:	681b      	ldr	r3, [r3, #0]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr
 80053e0:	20000098 	.word	0x20000098

080053e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053e8:	f7ff fff2 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4903      	ldr	r1, [pc, #12]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40021000 	.word	0x40021000
 8005408:	0800cbc4 	.word	0x0800cbc4

0800540c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005410:	f7ff ffde 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	0adb      	lsrs	r3, r3, #11
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	0800cbc4 	.word	0x0800cbc4

08005434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <RCC_Delay+0x34>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0a      	ldr	r2, [pc, #40]	; (800546c <RCC_Delay+0x38>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	0a5b      	lsrs	r3, r3, #9
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005450:	bf00      	nop
  }
  while (Delay --);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1e5a      	subs	r2, r3, #1
 8005456:	60fa      	str	r2, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f9      	bne.n	8005450 <RCC_Delay+0x1c>
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr
 8005468:	20000098 	.word	0x20000098
 800546c:	10624dd3 	.word	0x10624dd3

08005470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e076      	b.n	8005570 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d108      	bne.n	800549c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005492:	d009      	beq.n	80054a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	61da      	str	r2, [r3, #28]
 800549a:	e005      	b.n	80054a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fd fd9e 	bl	8003004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	ea42 0103 	orr.w	r1, r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	0c1a      	lsrs	r2, r3, #16
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f002 0204 	and.w	r2, r2, #4
 800554e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800555e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_SPI_Transmit+0x22>
 8005596:	2302      	movs	r3, #2
 8005598:	e12d      	b.n	80057f6 <HAL_SPI_Transmit+0x27e>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a2:	f7fe f809 	bl	80035b8 <HAL_GetTick>
 80055a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d002      	beq.n	80055be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
 80055ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055bc:	e116      	b.n	80057ec <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_SPI_Transmit+0x52>
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ce:	e10d      	b.n	80057ec <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2203      	movs	r2, #3
 80055d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005616:	d10f      	bne.n	8005638 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005626:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005636:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d007      	beq.n	8005656 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005654:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565e:	d14f      	bne.n	8005700 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <HAL_SPI_Transmit+0xf6>
 8005668:	8afb      	ldrh	r3, [r7, #22]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d142      	bne.n	80056f4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	881a      	ldrh	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	1c9a      	adds	r2, r3, #2
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005692:	e02f      	b.n	80056f4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d112      	bne.n	80056c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	1c9a      	adds	r2, r3, #2
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80056c6:	e015      	b.n	80056f4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c8:	f7fd ff76 	bl	80035b8 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d803      	bhi.n	80056e0 <HAL_SPI_Transmit+0x168>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d102      	bne.n	80056e6 <HAL_SPI_Transmit+0x16e>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80056f2:	e07b      	b.n	80057ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ca      	bne.n	8005694 <HAL_SPI_Transmit+0x11c>
 80056fe:	e050      	b.n	80057a2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_SPI_Transmit+0x196>
 8005708:	8afb      	ldrh	r3, [r7, #22]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d144      	bne.n	8005798 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	7812      	ldrb	r2, [r2, #0]
 800571a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005734:	e030      	b.n	8005798 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d113      	bne.n	800576c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	86da      	strh	r2, [r3, #54]	; 0x36
 800576a:	e015      	b.n	8005798 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576c:	f7fd ff24 	bl	80035b8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d803      	bhi.n	8005784 <HAL_SPI_Transmit+0x20c>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d102      	bne.n	800578a <HAL_SPI_Transmit+0x212>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005796:	e029      	b.n	80057ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1c9      	bne.n	8005736 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fbcc 	bl	8005f44 <SPI_EndRxTxTransaction>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e003      	b.n	80057ec <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b088      	sub	sp, #32
 8005802:	af02      	add	r7, sp, #8
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	d002      	beq.n	8005824 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800581e:	2302      	movs	r3, #2
 8005820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005822:	e0fb      	b.n	8005a1c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582c:	d112      	bne.n	8005854 <HAL_SPI_Receive+0x56>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10e      	bne.n	8005854 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2204      	movs	r2, #4
 800583a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800583e:	88fa      	ldrh	r2, [r7, #6]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f8ef 	bl	8005a2e <HAL_SPI_TransmitReceive>
 8005850:	4603      	mov	r3, r0
 8005852:	e0e8      	b.n	8005a26 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_SPI_Receive+0x64>
 800585e:	2302      	movs	r3, #2
 8005860:	e0e1      	b.n	8005a26 <HAL_SPI_Receive+0x228>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800586a:	f7fd fea5 	bl	80035b8 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_SPI_Receive+0x7e>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005880:	e0cc      	b.n	8005a1c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2204      	movs	r2, #4
 8005886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	88fa      	ldrh	r2, [r7, #6]
 800589a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	88fa      	ldrh	r2, [r7, #6]
 80058a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c8:	d10f      	bne.n	80058ea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d007      	beq.n	8005908 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005906:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d16a      	bne.n	80059e6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005910:	e032      	b.n	8005978 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d115      	bne.n	800594c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f103 020c 	add.w	r2, r3, #12
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	7812      	ldrb	r2, [r2, #0]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800594a:	e015      	b.n	8005978 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800594c:	f7fd fe34 	bl	80035b8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d803      	bhi.n	8005964 <HAL_SPI_Receive+0x166>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d102      	bne.n	800596a <HAL_SPI_Receive+0x16c>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005976:	e051      	b.n	8005a1c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1c7      	bne.n	8005912 <HAL_SPI_Receive+0x114>
 8005982:	e035      	b.n	80059f0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b01      	cmp	r3, #1
 8005990:	d113      	bne.n	80059ba <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	b292      	uxth	r2, r2
 800599e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	1c9a      	adds	r2, r3, #2
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b8:	e015      	b.n	80059e6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ba:	f7fd fdfd 	bl	80035b8 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d803      	bhi.n	80059d2 <HAL_SPI_Receive+0x1d4>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_Receive+0x1da>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80059e4:	e01a      	b.n	8005a1c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1c9      	bne.n	8005984 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fa53 	bl	8005ea0 <SPI_EndRxTransaction>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
 8005a12:	e003      	b.n	8005a1c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08c      	sub	sp, #48	; 0x30
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x26>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e198      	b.n	8005d86 <HAL_SPI_TransmitReceive+0x358>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a5c:	f7fd fdac 	bl	80035b8 <HAL_GetTick>
 8005a60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a72:	887b      	ldrh	r3, [r7, #2]
 8005a74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d00f      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x70>
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a84:	d107      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x68>
 8005a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d003      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
 8005a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a9c:	e16d      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x82>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x82>
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d103      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ab6:	e160      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d003      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	887a      	ldrh	r2, [r7, #2]
 8005ae2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d007      	beq.n	8005b20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b28:	d17c      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x10a>
 8005b32:	8b7b      	ldrh	r3, [r7, #26]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d16a      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	1c9a      	adds	r2, r3, #2
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5c:	e057      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_SPI_TransmitReceive+0x176>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_SPI_TransmitReceive+0x176>
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d113      	bne.n	8005ba4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	881a      	ldrh	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d119      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x1b8>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d014      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	b292      	uxth	r2, r2
 8005bc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be2:	2301      	movs	r3, #1
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005be6:	f7fd fce7 	bl	80035b8 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d80b      	bhi.n	8005c0e <HAL_SPI_TransmitReceive+0x1e0>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d007      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005c0c:	e0b5      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1a2      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x130>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d19d      	bne.n	8005b5e <HAL_SPI_TransmitReceive+0x130>
 8005c22:	e080      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x204>
 8005c2c:	8b7b      	ldrh	r3, [r7, #26]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d16f      	bne.n	8005d12 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c58:	e05b      	b.n	8005d12 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d11c      	bne.n	8005ca2 <HAL_SPI_TransmitReceive+0x274>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d017      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0x274>
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d114      	bne.n	8005ca2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d119      	bne.n	8005ce4 <HAL_SPI_TransmitReceive+0x2b6>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d014      	beq.n	8005ce4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ce4:	f7fd fc68 	bl	80035b8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d803      	bhi.n	8005cfc <HAL_SPI_TransmitReceive+0x2ce>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d102      	bne.n	8005d02 <HAL_SPI_TransmitReceive+0x2d4>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d107      	bne.n	8005d12 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005d10:	e033      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d19e      	bne.n	8005c5a <HAL_SPI_TransmitReceive+0x22c>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d199      	bne.n	8005c5a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f90a 	bl	8005f44 <SPI_EndRxTxTransaction>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d006      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d42:	e01a      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d70:	e003      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3730      	adds	r7, #48	; 0x30
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005da0:	f7fd fc0a 	bl	80035b8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	4413      	add	r3, r2
 8005dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005db0:	f7fd fc02 	bl	80035b8 <HAL_GetTick>
 8005db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005db6:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	015b      	lsls	r3, r3, #5
 8005dbc:	0d1b      	lsrs	r3, r3, #20
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dc6:	e054      	b.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d050      	beq.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dd0:	f7fd fbf2 	bl	80035b8 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d902      	bls.n	8005de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d13d      	bne.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfe:	d111      	bne.n	8005e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e08:	d004      	beq.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e12:	d107      	bne.n	8005e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2c:	d10f      	bne.n	8005e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e017      	b.n	8005e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d19b      	bne.n	8005dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000098 	.word	0x20000098

08005ea0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb4:	d111      	bne.n	8005eda <SPI_EndRxTransaction+0x3a>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebe:	d004      	beq.n	8005eca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec8:	d107      	bne.n	8005eda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee2:	d117      	bne.n	8005f14 <SPI_EndRxTransaction+0x74>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d112      	bne.n	8005f14 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff ff49 	bl	8005d90 <SPI_WaitFlagStateUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01a      	beq.n	8005f3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	f043 0220 	orr.w	r2, r3, #32
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e013      	b.n	8005f3c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2180      	movs	r1, #128	; 0x80
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff ff36 	bl	8005d90 <SPI_WaitFlagStateUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e000      	b.n	8005f3c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2180      	movs	r1, #128	; 0x80
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff ff18 	bl	8005d90 <SPI_WaitFlagStateUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f043 0220 	orr.w	r2, r3, #32
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e000      	b.n	8005f78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e042      	b.n	8006018 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fd f876 	bl	8003098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fdc5 	bl	8006b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b20      	cmp	r3, #32
 800603e:	d16d      	bne.n	800611c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_UART_Transmit+0x2c>
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e066      	b.n	800611e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2221      	movs	r2, #33	; 0x21
 800605a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800605e:	f7fd faab 	bl	80035b8 <HAL_GetTick>
 8006062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	88fa      	ldrh	r2, [r7, #6]
 8006068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006078:	d108      	bne.n	800608c <HAL_UART_Transmit+0x6c>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	e003      	b.n	8006094 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006090:	2300      	movs	r3, #0
 8006092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006094:	e02a      	b.n	80060ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	; 0x80
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fb14 	bl	80066ce <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e036      	b.n	800611e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	3302      	adds	r3, #2
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e007      	b.n	80060de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	3301      	adds	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1cf      	bne.n	8006096 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2140      	movs	r1, #64	; 0x40
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fae4 	bl	80066ce <UART_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e006      	b.n	800611e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	4613      	mov	r3, r2
 8006132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b20      	cmp	r3, #32
 800613e:	d112      	bne.n	8006166 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Receive_IT+0x26>
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e00b      	b.n	8006168 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	461a      	mov	r2, r3
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fb24 	bl	80067aa <UART_Start_Receive_IT>
 8006162:	4603      	mov	r3, r0
 8006164:	e000      	b.n	8006168 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006166:	2302      	movs	r3, #2
  }
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b0ba      	sub	sp, #232	; 0xe8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006196:	2300      	movs	r3, #0
 8006198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_UART_IRQHandler+0x66>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fc01 	bl	80069d6 <UART_Receive_IT>
      return;
 80061d4:	e25b      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80de 	beq.w	800639c <HAL_UART_IRQHandler+0x22c>
 80061e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80d1 	beq.w	800639c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_UART_IRQHandler+0xae>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f043 0201 	orr.w	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <HAL_UART_IRQHandler+0xd2>
 800622a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	f043 0202 	orr.w	r2, r3, #2
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_UART_IRQHandler+0xf6>
 800624e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f043 0204 	orr.w	r2, r3, #4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d011      	beq.n	8006296 <HAL_UART_IRQHandler+0x126>
 8006272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d105      	bne.n	800628a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800627e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f043 0208 	orr.w	r2, r3, #8
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 81f2 	beq.w	8006684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_UART_IRQHandler+0x14e>
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb8c 	bl	80069d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <HAL_UART_IRQHandler+0x17a>
 80062e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d04f      	beq.n	800638a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa96 	bl	800681c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d041      	beq.n	8006382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3314      	adds	r3, #20
 8006304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800632a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800632e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1d9      	bne.n	80062fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d013      	beq.n	800637a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	4a7e      	ldr	r2, [pc, #504]	; (8006550 <HAL_UART_IRQHandler+0x3e0>)
 8006358:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe f920 	bl	80045a4 <HAL_DMA_Abort_IT>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d016      	beq.n	8006398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	e00e      	b.n	8006398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f993 	bl	80066a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00a      	b.n	8006398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f98f 	bl	80066a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e006      	b.n	8006398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f98b 	bl	80066a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006396:	e175      	b.n	8006684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	bf00      	nop
    return;
 800639a:	e173      	b.n	8006684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f040 814f 	bne.w	8006644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8148 	beq.w	8006644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8141 	beq.w	8006644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063c2:	2300      	movs	r3, #0
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80b6 	beq.w	8006554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8145 	beq.w	8006688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006406:	429a      	cmp	r2, r3
 8006408:	f080 813e 	bcs.w	8006688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006412:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b20      	cmp	r3, #32
 800641c:	f000 8088 	beq.w	8006530 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800643a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800643e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	330c      	adds	r3, #12
 8006448:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800644c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006450:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006458:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1d9      	bne.n	8006420 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800647c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800647e:	f023 0301 	bic.w	r3, r3, #1
 8006482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3314      	adds	r3, #20
 800648c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006490:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006494:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006498:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e1      	bne.n	800646c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3314      	adds	r3, #20
 80064ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3314      	adds	r3, #20
 80064c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	f023 0310 	bic.w	r3, r3, #16
 8006504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006512:	65ba      	str	r2, [r7, #88]	; 0x58
 8006514:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	4618      	mov	r0, r3
 800652c:	f7fd ffff 	bl	800452e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800653e:	b29b      	uxth	r3, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8b6 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800654c:	e09c      	b.n	8006688 <HAL_UART_IRQHandler+0x518>
 800654e:	bf00      	nop
 8006550:	080068e1 	.word	0x080068e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800655c:	b29b      	uxth	r3, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 808e 	beq.w	800668c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8089 	beq.w	800668c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	330c      	adds	r3, #12
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800659e:	647a      	str	r2, [r7, #68]	; 0x44
 80065a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e3      	bne.n	800657a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3314      	adds	r3, #20
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	623b      	str	r3, [r7, #32]
   return(result);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3314      	adds	r3, #20
 80065d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065d6:	633a      	str	r2, [r7, #48]	; 0x30
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e3      	bne.n	80065b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60fb      	str	r3, [r7, #12]
   return(result);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0310 	bic.w	r3, r3, #16
 800660e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800661c:	61fa      	str	r2, [r7, #28]
 800661e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	617b      	str	r3, [r7, #20]
   return(result);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e3      	bne.n	80065f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f83b 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006642:	e023      	b.n	800668c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <HAL_UART_IRQHandler+0x4f4>
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f953 	bl	8006908 <UART_Transmit_IT>
    return;
 8006662:	e014      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <HAL_UART_IRQHandler+0x51e>
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f992 	bl	80069a6 <UART_EndTransmit_IT>
    return;
 8006682:	e004      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
    return;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
      return;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
      return;
 800668c:	bf00      	nop
  }
}
 800668e:	37e8      	adds	r7, #232	; 0xe8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr

080066a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b090      	sub	sp, #64	; 0x40
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066de:	e050      	b.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d04c      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0x30>
 80066ee:	f7fc ff63 	bl	80035b8 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d241      	bcs.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800671e:	637a      	str	r2, [r7, #52]	; 0x34
 8006720:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3314      	adds	r3, #20
 8006738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	63bb      	str	r3, [r7, #56]	; 0x38
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006752:	623a      	str	r2, [r7, #32]
 8006754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	69f9      	ldr	r1, [r7, #28]
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00f      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4013      	ands	r3, r2
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	bf0c      	ite	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	2300      	movne	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	429a      	cmp	r2, r3
 800679e:	d09f      	beq.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3740      	adds	r7, #64	; 0x40
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	88fa      	ldrh	r2, [r7, #6]
 80067c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	88fa      	ldrh	r2, [r7, #6]
 80067c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2222      	movs	r2, #34	; 0x22
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0220 	orr.w	r2, r2, #32
 800680e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr

0800681c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b095      	sub	sp, #84	; 0x54
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006844:	643a      	str	r2, [r7, #64]	; 0x40
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800684a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e5      	bne.n	8006824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	61fb      	str	r3, [r7, #28]
   return(result);
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3314      	adds	r3, #20
 8006876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800687e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e5      	bne.n	8006858 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	2b01      	cmp	r3, #1
 8006892:	d119      	bne.n	80068c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f023 0310 	bic.w	r3, r3, #16
 80068aa:	647b      	str	r3, [r7, #68]	; 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068b4:	61ba      	str	r2, [r7, #24]
 80068b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6979      	ldr	r1, [r7, #20]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	613b      	str	r3, [r7, #16]
   return(result);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068d6:	bf00      	nop
 80068d8:	3754      	adds	r7, #84	; 0x54
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr

080068e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fed3 	bl	80066a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b21      	cmp	r3, #33	; 0x21
 800691a:	d13e      	bne.n	800699a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006924:	d114      	bne.n	8006950 <UART_Transmit_IT+0x48>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d110      	bne.n	8006950 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006942:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	1c9a      	adds	r2, r3, #2
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]
 800694e:	e008      	b.n	8006962 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	1c59      	adds	r1, r3, #1
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6211      	str	r1, [r2, #32]
 800695a:	781a      	ldrb	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29b      	uxth	r3, r3
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	4619      	mov	r1, r3
 8006970:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10f      	bne.n	8006996 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006984:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006994:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e000      	b.n	800699c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800699a:	2302      	movs	r3, #2
  }
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr

080069a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fe64 	bl	8006694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b08c      	sub	sp, #48	; 0x30
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b22      	cmp	r3, #34	; 0x22
 80069e8:	f040 80ae 	bne.w	8006b48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f4:	d117      	bne.n	8006a26 <UART_Receive_IT+0x50>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d113      	bne.n	8006a26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
 8006a24:	e026      	b.n	8006a74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a38:	d007      	beq.n	8006a4a <UART_Receive_IT+0x74>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <UART_Receive_IT+0x82>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e008      	b.n	8006a6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4619      	mov	r1, r3
 8006a82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d15d      	bne.n	8006b44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0220 	bic.w	r2, r2, #32
 8006a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d135      	bne.n	8006b3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	623a      	str	r2, [r7, #32]
 8006af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0310 	and.w	r3, r3, #16
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d10a      	bne.n	8006b2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff fdc0 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
 8006b38:	e002      	b.n	8006b40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fb fc56 	bl	80023ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e002      	b.n	8006b4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e000      	b.n	8006b4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b48:	2302      	movs	r3, #2
  }
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3730      	adds	r7, #48	; 0x30
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b8e:	f023 030c 	bic.w	r3, r3, #12
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <UART_SetConfig+0x114>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d103      	bne.n	8006bc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bbc:	f7fe fc26 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	e002      	b.n	8006bca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bc4:	f7fe fc0e 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8006bc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009a      	lsls	r2, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <UART_SetConfig+0x118>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	0119      	lsls	r1, r3, #4
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009a      	lsls	r2, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c00:	4b1a      	ldr	r3, [pc, #104]	; (8006c6c <UART_SetConfig+0x118>)
 8006c02:	fba3 0302 	umull	r0, r3, r3, r2
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	2064      	movs	r0, #100	; 0x64
 8006c0a:	fb00 f303 	mul.w	r3, r0, r3
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	3332      	adds	r3, #50	; 0x32
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <UART_SetConfig+0x118>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c20:	4419      	add	r1, r3
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009a      	lsls	r2, r3, #2
 8006c2c:	441a      	add	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c38:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <UART_SetConfig+0x118>)
 8006c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	2064      	movs	r0, #100	; 0x64
 8006c42:	fb00 f303 	mul.w	r3, r0, r3
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	3332      	adds	r3, #50	; 0x32
 8006c4c:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <UART_SetConfig+0x118>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	f003 020f 	and.w	r2, r3, #15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40013800 	.word	0x40013800
 8006c6c:	51eb851f 	.word	0x51eb851f

08006c70 <loopback_udps>:
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b089      	sub	sp, #36	; 0x24
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	71fb      	strb	r3, [r7, #7]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	80bb      	strh	r3, [r7, #4]
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	3301      	adds	r3, #1
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f885 	bl	8006d9c <WIZCHIP_READ>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d05a      	beq.n	8006d4e <loopback_udps+0xde>
 8006c98:	2b22      	cmp	r3, #34	; 0x22
 8006c9a:	d16d      	bne.n	8006d78 <loopback_udps+0x108>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fa21 	bl	80070e6 <getSn_RX_RSR>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	82fb      	strh	r3, [r7, #22]
 8006ca8:	8afb      	ldrh	r3, [r7, #22]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d066      	beq.n	8006d7c <loopback_udps+0x10c>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8006cae:	8afb      	ldrh	r3, [r7, #22]
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb4:	d902      	bls.n	8006cbc <loopback_udps+0x4c>
 8006cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cba:	82fb      	strh	r3, [r7, #22]
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
 8006cbc:	f107 010c 	add.w	r1, r7, #12
 8006cc0:	8afa      	ldrh	r2, [r7, #22]
 8006cc2:	79f8      	ldrb	r0, [r7, #7]
 8006cc4:	f107 030a 	add.w	r3, r7, #10
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	f000 fe0f 	bl	80078f0 <recvfrom>
 8006cd2:	6138      	str	r0, [r7, #16]
            if(ret <= 0)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dc07      	bgt.n	8006cea <loopback_udps+0x7a>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4829      	ldr	r0, [pc, #164]	; (8006d88 <loopback_udps+0x118>)
 8006ce2:	f003 fbed 	bl	800a4c0 <iprintf>
#endif
               return ret;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	e04a      	b.n	8006d80 <loopback_udps+0x110>
            }
            printf("[JCNET : UDP] Rx = %d\n",ret);
 8006cea:	6939      	ldr	r1, [r7, #16]
 8006cec:	4827      	ldr	r0, [pc, #156]	; (8006d8c <loopback_udps+0x11c>)
 8006cee:	f003 fbe7 	bl	800a4c0 <iprintf>
            size = (uint16_t) ret;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	82fb      	strh	r3, [r7, #22]
            sentsize = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 8006cfa:	e023      	b.n	8006d44 <loopback_udps+0xd4>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
 8006cfc:	8abb      	ldrh	r3, [r7, #20]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	18d1      	adds	r1, r2, r3
 8006d02:	8afa      	ldrh	r2, [r7, #22]
 8006d04:	8abb      	ldrh	r3, [r7, #20]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	897b      	ldrh	r3, [r7, #10]
 8006d0c:	f107 040c 	add.w	r4, r7, #12
 8006d10:	79f8      	ldrb	r0, [r7, #7]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4623      	mov	r3, r4
 8006d16:	f000 fcb5 	bl	8007684 <sendto>
 8006d1a:	6138      	str	r0, [r7, #16]
               if(ret < 0)
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da07      	bge.n	8006d32 <loopback_udps+0xc2>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4619      	mov	r1, r3
 8006d28:	4819      	ldr	r0, [pc, #100]	; (8006d90 <loopback_udps+0x120>)
 8006d2a:	f003 fbc9 	bl	800a4c0 <iprintf>
#endif
                  return ret;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	e026      	b.n	8006d80 <loopback_udps+0x110>
               }
               printf("[JCNET : UDP] Tx = %d\n",ret);
 8006d32:	6939      	ldr	r1, [r7, #16]
 8006d34:	4817      	ldr	r0, [pc, #92]	; (8006d94 <loopback_udps+0x124>)
 8006d36:	f003 fbc3 	bl	800a4c0 <iprintf>
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	8abb      	ldrh	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 8006d44:	8aba      	ldrh	r2, [r7, #20]
 8006d46:	8afb      	ldrh	r3, [r7, #22]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d1d7      	bne.n	8006cfc <loopback_udps+0x8c>
            }
         }
         break;
 8006d4c:	e016      	b.n	8006d7c <loopback_udps+0x10c>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 8006d4e:	88ba      	ldrh	r2, [r7, #4]
 8006d50:	79f8      	ldrb	r0, [r7, #7]
 8006d52:	2300      	movs	r3, #0
 8006d54:	2102      	movs	r1, #2
 8006d56:	f000 fb11 	bl	800737c <socket>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d001      	beq.n	8006d6a <loopback_udps+0xfa>
            return ret;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	e00a      	b.n	8006d80 <loopback_udps+0x110>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	88ba      	ldrh	r2, [r7, #4]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4809      	ldr	r0, [pc, #36]	; (8006d98 <loopback_udps+0x128>)
 8006d72:	f003 fba5 	bl	800a4c0 <iprintf>
#endif
         break;
 8006d76:	e002      	b.n	8006d7e <loopback_udps+0x10e>
      default :
         break;
 8006d78:	bf00      	nop
 8006d7a:	e000      	b.n	8006d7e <loopback_udps+0x10e>
         break;
 8006d7c:	bf00      	nop
   }
   return 1;
 8006d7e:	2301      	movs	r3, #1
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd90      	pop	{r4, r7, pc}
 8006d88:	0800cab4 	.word	0x0800cab4
 8006d8c:	0800cad0 	.word	0x0800cad0
 8006d90:	0800cae8 	.word	0x0800cae8
 8006d94:	0800cb00 	.word	0x0800cb00
 8006d98:	0800cb18 	.word	0x0800cb18

08006d9c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8006da4:	4b22      	ldr	r3, [pc, #136]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006daa:	4b21      	ldr	r3, [pc, #132]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006db0:	4b1f      	ldr	r3, [pc, #124]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <WIZCHIP_READ+0x24>
 8006db8:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d114      	bne.n	8006dea <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006dc0:	4b1b      	ldr	r3, [pc, #108]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	0c12      	lsrs	r2, r2, #16
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	4610      	mov	r0, r2
 8006dcc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006dce:	4b18      	ldr	r3, [pc, #96]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	0a12      	lsrs	r2, r2, #8
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006ddc:	4b14      	ldr	r3, [pc, #80]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	e011      	b.n	8006e0e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0c1b      	lsrs	r3, r3, #16
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	0a1b      	lsrs	r3, r3, #8
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f107 020c 	add.w	r2, r7, #12
 8006e08:	2103      	movs	r1, #3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8006e0e:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	4798      	blx	r3
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006e1e:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <WIZCHIP_READ+0x94>)
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	4798      	blx	r3
   return ret;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200000a4 	.word	0x200000a4

08006e34 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8006e40:	4b22      	ldr	r3, [pc, #136]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006e46:	4b21      	ldr	r3, [pc, #132]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f043 0304 	orr.w	r3, r3, #4
 8006e52:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006e54:	4b1d      	ldr	r3, [pc, #116]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d119      	bne.n	8006e90 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	0c12      	lsrs	r2, r2, #16
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	4610      	mov	r0, r2
 8006e68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	0a12      	lsrs	r2, r2, #8
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006e78:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	78fa      	ldrb	r2, [r7, #3]
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4798      	blx	r3
 8006e8e:	e013      	b.n	8006eb8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0c1b      	lsrs	r3, r3, #16
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	0a1b      	lsrs	r3, r3, #8
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	f107 020c 	add.w	r2, r7, #12
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006ebe:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <WIZCHIP_WRITE+0x98>)
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	4798      	blx	r3
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	200000a4 	.word	0x200000a4

08006ed0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006ed0:	b590      	push	{r4, r7, lr}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8006ede:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006ee4:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006eea:	4b28      	ldr	r3, [pc, #160]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <WIZCHIP_READ_BUF+0x2a>
 8006ef2:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d126      	bne.n	8006f48 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	0c12      	lsrs	r2, r2, #16
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	0a12      	lsrs	r2, r2, #8
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	4610      	mov	r0, r2
 8006f14:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006f16:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	4610      	mov	r0, r2
 8006f20:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006f22:	2300      	movs	r3, #0
 8006f24:	82fb      	strh	r3, [r7, #22]
 8006f26:	e00a      	b.n	8006f3e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8006f28:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	8afa      	ldrh	r2, [r7, #22]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	188c      	adds	r4, r1, r2
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8006f38:	8afb      	ldrh	r3, [r7, #22]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	82fb      	strh	r3, [r7, #22]
 8006f3e:	8afa      	ldrh	r2, [r7, #22]
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d3f0      	bcc.n	8006f28 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006f46:	e017      	b.n	8006f78 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	0a1b      	lsrs	r3, r3, #8
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	f107 0210 	add.w	r2, r7, #16
 8006f66:	2103      	movs	r1, #3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8006f6c:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	88fa      	ldrh	r2, [r7, #6]
 8006f72:	4611      	mov	r1, r2
 8006f74:	68b8      	ldr	r0, [r7, #8]
 8006f76:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006f78:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006f7e:	4b03      	ldr	r3, [pc, #12]	; (8006f8c <WIZCHIP_READ_BUF+0xbc>)
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	4798      	blx	r3
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd90      	pop	{r4, r7, pc}
 8006f8c:	200000a4 	.word	0x200000a4

08006f90 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8006f9e:	4b2b      	ldr	r3, [pc, #172]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006fa4:	4b29      	ldr	r3, [pc, #164]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f043 0304 	orr.w	r3, r3, #4
 8006fb0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d126      	bne.n	8007008 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	0c12      	lsrs	r2, r2, #16
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	0a12      	lsrs	r2, r2, #8
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006fd6:	4b1d      	ldr	r3, [pc, #116]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	4610      	mov	r0, r2
 8006fe0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	82fb      	strh	r3, [r7, #22]
 8006fe6:	e00a      	b.n	8006ffe <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8006fe8:	4b18      	ldr	r3, [pc, #96]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	8afa      	ldrh	r2, [r7, #22]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006ff8:	8afb      	ldrh	r3, [r7, #22]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	82fb      	strh	r3, [r7, #22]
 8006ffe:	8afa      	ldrh	r2, [r7, #22]
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	429a      	cmp	r2, r3
 8007004:	d3f0      	bcc.n	8006fe8 <WIZCHIP_WRITE_BUF+0x58>
 8007006:	e017      	b.n	8007038 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	b2db      	uxtb	r3, r3
 800700e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	b2db      	uxtb	r3, r3
 8007016:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	f107 0210 	add.w	r2, r7, #16
 8007026:	2103      	movs	r1, #3
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800702c:	4b07      	ldr	r3, [pc, #28]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	88fa      	ldrh	r2, [r7, #6]
 8007032:	4611      	mov	r1, r2
 8007034:	68b8      	ldr	r0, [r7, #8]
 8007036:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007038:	4b04      	ldr	r3, [pc, #16]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <WIZCHIP_WRITE_BUF+0xbc>)
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	4798      	blx	r3
}
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200000a4 	.word	0x200000a4

08007050 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800705a:	2300      	movs	r3, #0
 800705c:	81fb      	strh	r3, [r7, #14]
 800705e:	2300      	movs	r3, #0
 8007060:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	3301      	adds	r3, #1
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fe94 	bl	8006d9c <WIZCHIP_READ>
 8007074:	4603      	mov	r3, r0
 8007076:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007078:	89bb      	ldrh	r3, [r7, #12]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	b29c      	uxth	r4, r3
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	3301      	adds	r3, #1
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fe86 	bl	8006d9c <WIZCHIP_READ>
 8007090:	4603      	mov	r3, r0
 8007092:	b29b      	uxth	r3, r3
 8007094:	4423      	add	r3, r4
 8007096:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007098:	89bb      	ldrh	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d01a      	beq.n	80070d4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	3301      	adds	r3, #1
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fe76 	bl	8006d9c <WIZCHIP_READ>
 80070b0:	4603      	mov	r3, r0
 80070b2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80070b4:	89fb      	ldrh	r3, [r7, #14]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	b29c      	uxth	r4, r3
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	3301      	adds	r3, #1
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fe68 	bl	8006d9c <WIZCHIP_READ>
 80070cc:	4603      	mov	r3, r0
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4423      	add	r3, r4
 80070d2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80070d4:	89fa      	ldrh	r2, [r7, #14]
 80070d6:	89bb      	ldrh	r3, [r7, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1c2      	bne.n	8007062 <getSn_TX_FSR+0x12>
   return val;
 80070dc:	89fb      	ldrh	r3, [r7, #14]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd90      	pop	{r4, r7, pc}

080070e6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80070e6:	b590      	push	{r4, r7, lr}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	4603      	mov	r3, r0
 80070ee:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	81fb      	strh	r3, [r7, #14]
 80070f4:	2300      	movs	r3, #0
 80070f6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	3301      	adds	r3, #1
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fe49 	bl	8006d9c <WIZCHIP_READ>
 800710a:	4603      	mov	r3, r0
 800710c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800710e:	89bb      	ldrh	r3, [r7, #12]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	b29c      	uxth	r4, r3
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	3301      	adds	r3, #1
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff fe3b 	bl	8006d9c <WIZCHIP_READ>
 8007126:	4603      	mov	r3, r0
 8007128:	b29b      	uxth	r3, r3
 800712a:	4423      	add	r3, r4
 800712c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800712e:	89bb      	ldrh	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01a      	beq.n	800716a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	3301      	adds	r3, #1
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff fe2b 	bl	8006d9c <WIZCHIP_READ>
 8007146:	4603      	mov	r3, r0
 8007148:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800714a:	89fb      	ldrh	r3, [r7, #14]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	b29c      	uxth	r4, r3
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	3301      	adds	r3, #1
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fe1d 	bl	8006d9c <WIZCHIP_READ>
 8007162:	4603      	mov	r3, r0
 8007164:	b29b      	uxth	r3, r3
 8007166:	4423      	add	r3, r4
 8007168:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800716a:	89fa      	ldrh	r2, [r7, #14]
 800716c:	89bb      	ldrh	r3, [r7, #12]
 800716e:	429a      	cmp	r2, r3
 8007170:	d1c2      	bne.n	80070f8 <getSn_RX_RSR+0x12>
   return val;
 8007172:	89fb      	ldrh	r3, [r7, #14]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	bd90      	pop	{r4, r7, pc}

0800717c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	6039      	str	r1, [r7, #0]
 8007186:	71fb      	strb	r3, [r7, #7]
 8007188:	4613      	mov	r3, r2
 800718a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8007194:	88bb      	ldrh	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d048      	beq.n	800722c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	3301      	adds	r3, #1
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fdf8 	bl	8006d9c <WIZCHIP_READ>
 80071ac:	4603      	mov	r3, r0
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	b29c      	uxth	r4, r3
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	3301      	adds	r3, #1
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fdeb 	bl	8006d9c <WIZCHIP_READ>
 80071c6:	4603      	mov	r3, r0
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4423      	add	r3, r4
 80071cc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80071ce:	89fb      	ldrh	r3, [r7, #14]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	79fa      	ldrb	r2, [r7, #7]
 80071d4:	0092      	lsls	r2, r2, #2
 80071d6:	3202      	adds	r2, #2
 80071d8:	00d2      	lsls	r2, r2, #3
 80071da:	4413      	add	r3, r2
 80071dc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80071de:	88bb      	ldrh	r3, [r7, #4]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f7ff fed3 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80071ea:	89fa      	ldrh	r2, [r7, #14]
 80071ec:	88bb      	ldrh	r3, [r7, #4]
 80071ee:	4413      	add	r3, r2
 80071f0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	3301      	adds	r3, #1
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80071fe:	461a      	mov	r2, r3
 8007200:	89fb      	ldrh	r3, [r7, #14]
 8007202:	0a1b      	lsrs	r3, r3, #8
 8007204:	b29b      	uxth	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f7ff fe12 	bl	8006e34 <WIZCHIP_WRITE>
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	3301      	adds	r3, #1
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800721c:	461a      	mov	r2, r3
 800721e:	89fb      	ldrh	r3, [r7, #14]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f7ff fe05 	bl	8006e34 <WIZCHIP_WRITE>
 800722a:	e000      	b.n	800722e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800722c:	bf00      	nop
}
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	bd90      	pop	{r4, r7, pc}

08007234 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	6039      	str	r1, [r7, #0]
 800723e:	71fb      	strb	r3, [r7, #7]
 8007240:	4613      	mov	r3, r2
 8007242:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800724c:	88bb      	ldrh	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d048      	beq.n	80072e4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	3301      	adds	r3, #1
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff fd9c 	bl	8006d9c <WIZCHIP_READ>
 8007264:	4603      	mov	r3, r0
 8007266:	b29b      	uxth	r3, r3
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	b29c      	uxth	r4, r3
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	3301      	adds	r3, #1
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fd8f 	bl	8006d9c <WIZCHIP_READ>
 800727e:	4603      	mov	r3, r0
 8007280:	b29b      	uxth	r3, r3
 8007282:	4423      	add	r3, r4
 8007284:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8007286:	89fb      	ldrh	r3, [r7, #14]
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	79fa      	ldrb	r2, [r7, #7]
 800728c:	0092      	lsls	r2, r2, #2
 800728e:	3203      	adds	r2, #3
 8007290:	00d2      	lsls	r2, r2, #3
 8007292:	4413      	add	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8007296:	88bb      	ldrh	r3, [r7, #4]
 8007298:	461a      	mov	r2, r3
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	68b8      	ldr	r0, [r7, #8]
 800729e:	f7ff fe17 	bl	8006ed0 <WIZCHIP_READ_BUF>
   ptr += len;
 80072a2:	89fa      	ldrh	r2, [r7, #14]
 80072a4:	88bb      	ldrh	r3, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	3301      	adds	r3, #1
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80072b6:	461a      	mov	r2, r3
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	b29b      	uxth	r3, r3
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f7ff fdb6 	bl	8006e34 <WIZCHIP_WRITE>
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	3301      	adds	r3, #1
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80072d4:	461a      	mov	r2, r3
 80072d6:	89fb      	ldrh	r3, [r7, #14]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	4619      	mov	r1, r3
 80072dc:	4610      	mov	r0, r2
 80072de:	f7ff fda9 	bl	8006e34 <WIZCHIP_WRITE>
 80072e2:	e000      	b.n	80072e6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80072e4:	bf00      	nop
}
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd90      	pop	{r4, r7, pc}

080072ec <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	460a      	mov	r2, r1
 80072f6:	71fb      	strb	r3, [r7, #7]
 80072f8:	4613      	mov	r3, r2
 80072fa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	3301      	adds	r3, #1
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fd45 	bl	8006d9c <WIZCHIP_READ>
 8007312:	4603      	mov	r3, r0
 8007314:	b29b      	uxth	r3, r3
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	b29c      	uxth	r4, r3
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	3301      	adds	r3, #1
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff fd38 	bl	8006d9c <WIZCHIP_READ>
 800732c:	4603      	mov	r3, r0
 800732e:	b29b      	uxth	r3, r3
 8007330:	4423      	add	r3, r4
 8007332:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8007334:	89fa      	ldrh	r2, [r7, #14]
 8007336:	88bb      	ldrh	r3, [r7, #4]
 8007338:	4413      	add	r3, r2
 800733a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	3301      	adds	r3, #1
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007348:	461a      	mov	r2, r3
 800734a:	89fb      	ldrh	r3, [r7, #14]
 800734c:	0a1b      	lsrs	r3, r3, #8
 800734e:	b29b      	uxth	r3, r3
 8007350:	b2db      	uxtb	r3, r3
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f7ff fd6d 	bl	8006e34 <WIZCHIP_WRITE>
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	3301      	adds	r3, #1
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007366:	461a      	mov	r2, r3
 8007368:	89fb      	ldrh	r3, [r7, #14]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7ff fd60 	bl	8006e34 <WIZCHIP_WRITE>
}
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	bd90      	pop	{r4, r7, pc}

0800737c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	4611      	mov	r1, r2
 8007388:	461a      	mov	r2, r3
 800738a:	4623      	mov	r3, r4
 800738c:	71fb      	strb	r3, [r7, #7]
 800738e:	4603      	mov	r3, r0
 8007390:	71bb      	strb	r3, [r7, #6]
 8007392:	460b      	mov	r3, r1
 8007394:	80bb      	strh	r3, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	2b08      	cmp	r3, #8
 800739e:	d902      	bls.n	80073a6 <socket+0x2a>
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	e0f2      	b.n	800758c <socket+0x210>
	switch(protocol)
 80073a6:	79bb      	ldrb	r3, [r7, #6]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d005      	beq.n	80073b8 <socket+0x3c>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd11      	ble.n	80073d4 <socket+0x58>
 80073b0:	3b02      	subs	r3, #2
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d80e      	bhi.n	80073d4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80073b6:	e011      	b.n	80073dc <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	2204      	movs	r2, #4
 80073be:	4619      	mov	r1, r3
 80073c0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80073c4:	f7ff fd84 	bl	8006ed0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <socket+0x5e>
 80073ce:	f06f 0302 	mvn.w	r3, #2
 80073d2:	e0db      	b.n	800758c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80073d4:	f06f 0304 	mvn.w	r3, #4
 80073d8:	e0d8      	b.n	800758c <socket+0x210>
	    break;
 80073da:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <socket+0x70>
 80073e6:	f06f 0305 	mvn.w	r3, #5
 80073ea:	e0cf      	b.n	800758c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d025      	beq.n	800743e <socket+0xc2>
	{
   	switch(protocol)
 80073f2:	79bb      	ldrb	r3, [r7, #6]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d002      	beq.n	80073fe <socket+0x82>
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d008      	beq.n	800740e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80073fc:	e024      	b.n	8007448 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11c      	bne.n	8007442 <socket+0xc6>
 8007408:	f06f 0305 	mvn.w	r3, #5
 800740c:	e0be      	b.n	800758c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8007418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800741c:	2b00      	cmp	r3, #0
 800741e:	db02      	blt.n	8007426 <socket+0xaa>
 8007420:	f06f 0305 	mvn.w	r3, #5
 8007424:	e0b2      	b.n	800758c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8007430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007434:	2b00      	cmp	r3, #0
 8007436:	db06      	blt.n	8007446 <socket+0xca>
 8007438:	f06f 0305 	mvn.w	r3, #5
 800743c:	e0a6      	b.n	800758c <socket+0x210>
   	}
   }
 800743e:	bf00      	nop
 8007440:	e002      	b.n	8007448 <socket+0xcc>
   	      break;
 8007442:	bf00      	nop
 8007444:	e000      	b.n	8007448 <socket+0xcc>
   	      break;
 8007446:	bf00      	nop
	close(sn);
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f8ac 	bl	80075a8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	3301      	adds	r3, #1
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4618      	mov	r0, r3
 800745a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800745e:	f023 030f 	bic.w	r3, r3, #15
 8007462:	b25a      	sxtb	r2, r3
 8007464:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007468:	4313      	orrs	r3, r2
 800746a:	b25b      	sxtb	r3, r3
 800746c:	b2db      	uxtb	r3, r3
 800746e:	4619      	mov	r1, r3
 8007470:	f7ff fce0 	bl	8006e34 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8007474:	88bb      	ldrh	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d110      	bne.n	800749c <socket+0x120>
	{
	   port = sock_any_port++;
 800747a:	4b46      	ldr	r3, [pc, #280]	; (8007594 <socket+0x218>)
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	b291      	uxth	r1, r2
 8007482:	4a44      	ldr	r2, [pc, #272]	; (8007594 <socket+0x218>)
 8007484:	8011      	strh	r1, [r2, #0]
 8007486:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007488:	4b42      	ldr	r3, [pc, #264]	; (8007594 <socket+0x218>)
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007490:	4293      	cmp	r3, r2
 8007492:	d103      	bne.n	800749c <socket+0x120>
 8007494:	4b3f      	ldr	r3, [pc, #252]	; (8007594 <socket+0x218>)
 8007496:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800749a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	3301      	adds	r3, #1
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074a8:	461a      	mov	r2, r3
 80074aa:	88bb      	ldrh	r3, [r7, #4]
 80074ac:	0a1b      	lsrs	r3, r3, #8
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7ff fcbd 	bl	8006e34 <WIZCHIP_WRITE>
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	3301      	adds	r3, #1
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c6:	461a      	mov	r2, r3
 80074c8:	88bb      	ldrh	r3, [r7, #4]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7ff fcb0 	bl	8006e34 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	3301      	adds	r3, #1
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80074e0:	2101      	movs	r1, #1
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fca6 	bl	8006e34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80074e8:	bf00      	nop
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	3301      	adds	r3, #1
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fc50 	bl	8006d9c <WIZCHIP_READ>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f3      	bne.n	80074ea <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	2201      	movs	r2, #1
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	b21b      	sxth	r3, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	b21a      	sxth	r2, r3
 8007510:	4b21      	ldr	r3, [pc, #132]	; (8007598 <socket+0x21c>)
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b21b      	sxth	r3, r3
 8007516:	4013      	ands	r3, r2
 8007518:	b21b      	sxth	r3, r3
 800751a:	b29a      	uxth	r2, r3
 800751c:	4b1e      	ldr	r3, [pc, #120]	; (8007598 <socket+0x21c>)
 800751e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	f003 0201 	and.w	r2, r3, #1
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	b21a      	sxth	r2, r3
 800752e:	4b1a      	ldr	r3, [pc, #104]	; (8007598 <socket+0x21c>)
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b21b      	sxth	r3, r3
 8007534:	4313      	orrs	r3, r2
 8007536:	b21b      	sxth	r3, r3
 8007538:	b29a      	uxth	r2, r3
 800753a:	4b17      	ldr	r3, [pc, #92]	; (8007598 <socket+0x21c>)
 800753c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	2201      	movs	r2, #1
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	b21b      	sxth	r3, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	b21a      	sxth	r2, r3
 800754c:	4b13      	ldr	r3, [pc, #76]	; (800759c <socket+0x220>)
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b21b      	sxth	r3, r3
 8007552:	4013      	ands	r3, r2
 8007554:	b21b      	sxth	r3, r3
 8007556:	b29a      	uxth	r2, r3
 8007558:	4b10      	ldr	r3, [pc, #64]	; (800759c <socket+0x220>)
 800755a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	4a10      	ldr	r2, [pc, #64]	; (80075a0 <socket+0x224>)
 8007560:	2100      	movs	r1, #0
 8007562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	4a0e      	ldr	r2, [pc, #56]	; (80075a4 <socket+0x228>)
 800756a:	2100      	movs	r1, #0
 800756c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800756e:	bf00      	nop
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	3301      	adds	r3, #1
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fc0d 	bl	8006d9c <WIZCHIP_READ>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0f3      	beq.n	8007570 <socket+0x1f4>
   return (int8_t)sn;
 8007588:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	bd90      	pop	{r4, r7, pc}
 8007594:	200000a2 	.word	0x200000a2
 8007598:	20000348 	.word	0x20000348
 800759c:	2000034a 	.word	0x2000034a
 80075a0:	2000034c 	.word	0x2000034c
 80075a4:	2000035c 	.word	0x2000035c

080075a8 <close>:

int8_t close(uint8_t sn)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d902      	bls.n	80075be <close+0x16>
 80075b8:	f04f 33ff 	mov.w	r3, #4294967295
 80075bc:	e055      	b.n	800766a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	3301      	adds	r3, #1
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80075ca:	2110      	movs	r1, #16
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fc31 	bl	8006e34 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80075d2:	bf00      	nop
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	3301      	adds	r3, #1
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fbdb 	bl	8006d9c <WIZCHIP_READ>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f3      	bne.n	80075d4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80075ec:	79fb      	ldrb	r3, [r7, #7]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	3301      	adds	r3, #1
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80075f8:	211f      	movs	r1, #31
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fc1a 	bl	8006e34 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2201      	movs	r2, #1
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	b21b      	sxth	r3, r3
 800760a:	43db      	mvns	r3, r3
 800760c:	b21a      	sxth	r2, r3
 800760e:	4b19      	ldr	r3, [pc, #100]	; (8007674 <close+0xcc>)
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b21b      	sxth	r3, r3
 8007614:	4013      	ands	r3, r2
 8007616:	b21b      	sxth	r3, r3
 8007618:	b29a      	uxth	r2, r3
 800761a:	4b16      	ldr	r3, [pc, #88]	; (8007674 <close+0xcc>)
 800761c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	2201      	movs	r2, #1
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	b21b      	sxth	r3, r3
 8007628:	43db      	mvns	r3, r3
 800762a:	b21a      	sxth	r2, r3
 800762c:	4b12      	ldr	r3, [pc, #72]	; (8007678 <close+0xd0>)
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b21b      	sxth	r3, r3
 8007632:	4013      	ands	r3, r2
 8007634:	b21b      	sxth	r3, r3
 8007636:	b29a      	uxth	r2, r3
 8007638:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <close+0xd0>)
 800763a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	4a0f      	ldr	r2, [pc, #60]	; (800767c <close+0xd4>)
 8007640:	2100      	movs	r1, #0
 8007642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	4a0d      	ldr	r2, [pc, #52]	; (8007680 <close+0xd8>)
 800764a:	2100      	movs	r1, #0
 800764c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800764e:	bf00      	nop
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	3301      	adds	r3, #1
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff fb9d 	bl	8006d9c <WIZCHIP_READ>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f3      	bne.n	8007650 <close+0xa8>
	return SOCK_OK;
 8007668:	2301      	movs	r3, #1
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20000348 	.word	0x20000348
 8007678:	2000034a 	.word	0x2000034a
 800767c:	2000034c 	.word	0x2000034c
 8007680:	2000035c 	.word	0x2000035c

08007684 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607b      	str	r3, [r7, #4]
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
 8007692:	4613      	mov	r3, r2
 8007694:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d902      	bls.n	80076aa <sendto+0x26>
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	e11b      	b.n	80078e2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	3301      	adds	r3, #1
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fb72 	bl	8006d9c <WIZCHIP_READ>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	3b02      	subs	r3, #2
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d902      	bls.n	80076ca <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80076c4:	f06f 0304 	mvn.w	r3, #4
 80076c8:	e10b      	b.n	80078e2 <sendto+0x25e>
         break;
 80076ca:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80076cc:	89bb      	ldrh	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <sendto+0x54>
 80076d2:	f06f 030d 	mvn.w	r3, #13
 80076d6:	e104      	b.n	80078e2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	3201      	adds	r2, #1
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	4413      	add	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	3202      	adds	r2, #2
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	4413      	add	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	3203      	adds	r2, #3
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	4413      	add	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10e      	bne.n	800772c <sendto+0xa8>
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	3301      	adds	r3, #1
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fb40 	bl	8006d9c <WIZCHIP_READ>
 800771c:	4603      	mov	r3, r0
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b04      	cmp	r3, #4
 8007724:	d002      	beq.n	800772c <sendto+0xa8>
 8007726:	f06f 030b 	mvn.w	r3, #11
 800772a:	e0da      	b.n	80078e2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800772c:	8c3b      	ldrh	r3, [r7, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10e      	bne.n	8007750 <sendto+0xcc>
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	3301      	adds	r3, #1
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff fb2e 	bl	8006d9c <WIZCHIP_READ>
 8007740:	4603      	mov	r3, r0
 8007742:	f003 0304 	and.w	r3, r3, #4
 8007746:	2b04      	cmp	r3, #4
 8007748:	d002      	beq.n	8007750 <sendto+0xcc>
 800774a:	f06f 030a 	mvn.w	r3, #10
 800774e:	e0c8      	b.n	80078e2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	3301      	adds	r3, #1
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fb1d 	bl	8006d9c <WIZCHIP_READ>
 8007762:	4603      	mov	r3, r0
 8007764:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	2b42      	cmp	r3, #66	; 0x42
 800776a:	d008      	beq.n	800777e <sendto+0xfa>
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	2b22      	cmp	r3, #34	; 0x22
 8007770:	d005      	beq.n	800777e <sendto+0xfa>
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	2b32      	cmp	r3, #50	; 0x32
 8007776:	d002      	beq.n	800777e <sendto+0xfa>
 8007778:	f06f 0306 	mvn.w	r3, #6
 800777c:	e0b1      	b.n	80078e2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	3301      	adds	r3, #1
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800778a:	2204      	movs	r2, #4
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff fbfe 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	3301      	adds	r3, #1
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a0:	461a      	mov	r2, r3
 80077a2:	8c3b      	ldrh	r3, [r7, #32]
 80077a4:	0a1b      	lsrs	r3, r3, #8
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7ff fb41 	bl	8006e34 <WIZCHIP_WRITE>
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	3301      	adds	r3, #1
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80077be:	461a      	mov	r2, r3
 80077c0:	8c3b      	ldrh	r3, [r7, #32]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7ff fb34 	bl	8006e34 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	3301      	adds	r3, #1
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fadf 	bl	8006d9c <WIZCHIP_READ>
 80077de:	4603      	mov	r3, r0
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	029b      	lsls	r3, r3, #10
 80077e4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80077e6:	89ba      	ldrh	r2, [r7, #12]
 80077e8:	8abb      	ldrh	r3, [r7, #20]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d901      	bls.n	80077f2 <sendto+0x16e>
 80077ee:	8abb      	ldrh	r3, [r7, #20]
 80077f0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fc2b 	bl	8007050 <getSn_TX_FSR>
 80077fa:	4603      	mov	r3, r0
 80077fc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	3301      	adds	r3, #1
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fac6 	bl	8006d9c <WIZCHIP_READ>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <sendto+0x198>
 8007816:	f06f 0303 	mvn.w	r3, #3
 800781a:	e062      	b.n	80078e2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800781c:	4b33      	ldr	r3, [pc, #204]	; (80078ec <sendto+0x268>)
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	fa42 f303 	asr.w	r3, r2, r3
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <sendto+0x1b8>
 8007830:	89ba      	ldrh	r2, [r7, #12]
 8007832:	8abb      	ldrh	r3, [r7, #20]
 8007834:	429a      	cmp	r2, r3
 8007836:	d901      	bls.n	800783c <sendto+0x1b8>
 8007838:	2300      	movs	r3, #0
 800783a:	e052      	b.n	80078e2 <sendto+0x25e>
      if(len <= freesize) break;
 800783c:	89ba      	ldrh	r2, [r7, #12]
 800783e:	8abb      	ldrh	r3, [r7, #20]
 8007840:	429a      	cmp	r2, r3
 8007842:	d900      	bls.n	8007846 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8007844:	e7d5      	b.n	80077f2 <sendto+0x16e>
      if(len <= freesize) break;
 8007846:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8007848:	89ba      	ldrh	r2, [r7, #12]
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fc94 	bl	800717c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	3301      	adds	r3, #1
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007860:	2120      	movs	r1, #32
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fae6 	bl	8006e34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8007868:	bf00      	nop
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	3301      	adds	r3, #1
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fa90 	bl	8006d9c <WIZCHIP_READ>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f3      	bne.n	800786a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	3301      	adds	r3, #1
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fa84 	bl	8006d9c <WIZCHIP_READ>
 8007894:	4603      	mov	r3, r0
 8007896:	f003 031f 	and.w	r3, r3, #31
 800789a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	f003 0310 	and.w	r3, r3, #16
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00c      	beq.n	80078c0 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	3301      	adds	r3, #1
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80078b2:	2110      	movs	r1, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fabd 	bl	8006e34 <WIZCHIP_WRITE>
         break;
 80078ba:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80078bc:	89bb      	ldrh	r3, [r7, #12]
 80078be:	e010      	b.n	80078e2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0db      	beq.n	8007882 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	3301      	adds	r3, #1
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80078d6:	2108      	movs	r1, #8
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff faab 	bl	8006e34 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80078de:	f06f 030c 	mvn.w	r3, #12
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000348 	.word	0x20000348

080078f0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	607b      	str	r3, [r7, #4]
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
 80078fe:	4613      	mov	r3, r2
 8007900:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8007902:	2300      	movs	r3, #0
 8007904:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d902      	bls.n	8007912 <recvfrom+0x22>
 800790c:	f04f 33ff 	mov.w	r3, #4294967295
 8007910:	e1d4      	b.n	8007cbc <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	3301      	adds	r3, #1
 8007918:	00db      	lsls	r3, r3, #3
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fa3e 	bl	8006d9c <WIZCHIP_READ>
 8007920:	4603      	mov	r3, r0
 8007922:	777b      	strb	r3, [r7, #29]
 8007924:	7f7b      	ldrb	r3, [r7, #29]
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	3b02      	subs	r3, #2
 800792c:	2b02      	cmp	r3, #2
 800792e:	d902      	bls.n	8007936 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8007930:	f06f 0304 	mvn.w	r3, #4
 8007934:	e1c2      	b.n	8007cbc <recvfrom+0x3cc>
         break;
 8007936:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8007938:	89bb      	ldrh	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <recvfrom+0x54>
 800793e:	f06f 030d 	mvn.w	r3, #13
 8007942:	e1bb      	b.n	8007cbc <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	4a88      	ldr	r2, [pc, #544]	; (8007b68 <recvfrom+0x278>)
 8007948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d128      	bne.n	80079a2 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fbc7 	bl	80070e6 <getSn_RX_RSR>
 8007958:	4603      	mov	r3, r0
 800795a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	3301      	adds	r3, #1
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fa17 	bl	8006d9c <WIZCHIP_READ>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <recvfrom+0x8a>
 8007974:	f06f 0303 	mvn.w	r3, #3
 8007978:	e1a0      	b.n	8007cbc <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800797a:	4b7c      	ldr	r3, [pc, #496]	; (8007b6c <recvfrom+0x27c>)
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	fa42 f303 	asr.w	r3, r2, r3
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <recvfrom+0xa8>
 800798e:	8bfb      	ldrh	r3, [r7, #30]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <recvfrom+0xa8>
 8007994:	2300      	movs	r3, #0
 8007996:	e191      	b.n	8007cbc <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8007998:	8bfb      	ldrh	r3, [r7, #30]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d100      	bne.n	80079a0 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800799e:	e7d7      	b.n	8007950 <recvfrom+0x60>
         if(pack_len != 0) break;
 80079a0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80079a2:	7f7b      	ldrb	r3, [r7, #29]
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d079      	beq.n	8007aa0 <recvfrom+0x1b0>
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	f300 8142 	bgt.w	8007c36 <recvfrom+0x346>
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d003      	beq.n	80079be <recvfrom+0xce>
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	f000 80dc 	beq.w	8007b74 <recvfrom+0x284>
 80079bc:	e13b      	b.n	8007c36 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	4a69      	ldr	r2, [pc, #420]	; (8007b68 <recvfrom+0x278>)
 80079c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d152      	bne.n	8007a70 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 80079ca:	f107 0114 	add.w	r1, r7, #20
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2208      	movs	r2, #8
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fc2e 	bl	8007234 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	3301      	adds	r3, #1
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fa24 	bl	8006e34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80079ec:	bf00      	nop
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	3301      	adds	r3, #1
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff f9ce 	bl	8006d9c <WIZCHIP_READ>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f3      	bne.n	80079ee <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8007a06:	7d3a      	ldrb	r2, [r7, #20]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	7d7a      	ldrb	r2, [r7, #21]
 8007a12:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3302      	adds	r3, #2
 8007a18:	7dba      	ldrb	r2, [r7, #22]
 8007a1a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3303      	adds	r3, #3
 8007a20:	7dfa      	ldrb	r2, [r7, #23]
 8007a22:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8007a24:	7e3b      	ldrb	r3, [r7, #24]
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	7e7b      	ldrb	r3, [r7, #25]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	4413      	add	r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8007a40:	7eba      	ldrb	r2, [r7, #26]
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	b291      	uxth	r1, r2
 8007a46:	4a48      	ldr	r2, [pc, #288]	; (8007b68 <recvfrom+0x278>)
 8007a48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	4a46      	ldr	r2, [pc, #280]	; (8007b68 <recvfrom+0x278>)
 8007a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	b299      	uxth	r1, r3
 8007a58:	7efb      	ldrb	r3, [r7, #27]
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	440a      	add	r2, r1
 8007a60:	b291      	uxth	r1, r2
 8007a62:	4a41      	ldr	r2, [pc, #260]	; (8007b68 <recvfrom+0x278>)
 8007a64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	4a41      	ldr	r2, [pc, #260]	; (8007b70 <recvfrom+0x280>)
 8007a6c:	2180      	movs	r1, #128	; 0x80
 8007a6e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	4a3d      	ldr	r2, [pc, #244]	; (8007b68 <recvfrom+0x278>)
 8007a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a78:	89ba      	ldrh	r2, [r7, #12]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d202      	bcs.n	8007a84 <recvfrom+0x194>
 8007a7e:	89bb      	ldrh	r3, [r7, #12]
 8007a80:	83fb      	strh	r3, [r7, #30]
 8007a82:	e004      	b.n	8007a8e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4a38      	ldr	r2, [pc, #224]	; (8007b68 <recvfrom+0x278>)
 8007a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8007a8e:	8bfb      	ldrh	r3, [r7, #30]
 8007a90:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8007a92:	8bfa      	ldrh	r2, [r7, #30]
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fbcb 	bl	8007234 <wiz_recv_data>
			break;
 8007a9e:	e0d6      	b.n	8007c4e <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4a31      	ldr	r2, [pc, #196]	; (8007b68 <recvfrom+0x278>)
 8007aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d146      	bne.n	8007b3a <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8007aac:	f107 0114 	add.w	r1, r7, #20
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff fbbd 	bl	8007234 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	3301      	adds	r3, #1
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007ac6:	2140      	movs	r1, #64	; 0x40
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff f9b3 	bl	8006e34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8007ace:	bf00      	nop
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff f95d 	bl	8006d9c <WIZCHIP_READ>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f3      	bne.n	8007ad0 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8007ae8:	7d3a      	ldrb	r2, [r7, #20]
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	b291      	uxth	r1, r2
 8007aee:	4a1e      	ldr	r2, [pc, #120]	; (8007b68 <recvfrom+0x278>)
 8007af0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <recvfrom+0x278>)
 8007af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	7d7b      	ldrb	r3, [r7, #21]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4413      	add	r3, r2
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	3a02      	subs	r2, #2
 8007b0c:	b291      	uxth	r1, r2
 8007b0e:	4a16      	ldr	r2, [pc, #88]	; (8007b68 <recvfrom+0x278>)
 8007b10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <recvfrom+0x278>)
 8007b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b1c:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d906      	bls.n	8007b32 <recvfrom+0x242>
   			{
   			   close(sn);
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fd3e 	bl	80075a8 <close>
   			   return SOCKFATAL_PACKLEN;
 8007b2c:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8007b30:	e0c4      	b.n	8007cbc <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	4a0e      	ldr	r2, [pc, #56]	; (8007b70 <recvfrom+0x280>)
 8007b36:	2180      	movs	r1, #128	; 0x80
 8007b38:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	4a0a      	ldr	r2, [pc, #40]	; (8007b68 <recvfrom+0x278>)
 8007b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b42:	89ba      	ldrh	r2, [r7, #12]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d202      	bcs.n	8007b4e <recvfrom+0x25e>
 8007b48:	89bb      	ldrh	r3, [r7, #12]
 8007b4a:	83fb      	strh	r3, [r7, #30]
 8007b4c:	e004      	b.n	8007b58 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	4a05      	ldr	r2, [pc, #20]	; (8007b68 <recvfrom+0x278>)
 8007b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b56:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8007b58:	8bfa      	ldrh	r2, [r7, #30]
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff fb68 	bl	8007234 <wiz_recv_data>
		   break;
 8007b64:	e073      	b.n	8007c4e <recvfrom+0x35e>
 8007b66:	bf00      	nop
 8007b68:	2000034c 	.word	0x2000034c
 8007b6c:	20000348 	.word	0x20000348
 8007b70:	2000035c 	.word	0x2000035c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	4a53      	ldr	r2, [pc, #332]	; (8007cc4 <recvfrom+0x3d4>)
 8007b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d144      	bne.n	8007c0a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8007b80:	f107 0114 	add.w	r1, r7, #20
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	2206      	movs	r2, #6
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fb53 	bl	8007234 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	3301      	adds	r3, #1
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b9a:	2140      	movs	r1, #64	; 0x40
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff f949 	bl	8006e34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8007ba2:	bf00      	nop
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	3301      	adds	r3, #1
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff f8f3 	bl	8006d9c <WIZCHIP_READ>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f3      	bne.n	8007ba4 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8007bbc:	7d3a      	ldrb	r2, [r7, #20]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	7d7a      	ldrb	r2, [r7, #21]
 8007bc8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3302      	adds	r3, #2
 8007bce:	7dba      	ldrb	r2, [r7, #22]
 8007bd0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3303      	adds	r3, #3
 8007bd6:	7dfa      	ldrb	r2, [r7, #23]
 8007bd8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8007bda:	7e3a      	ldrb	r2, [r7, #24]
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	b291      	uxth	r1, r2
 8007be0:	4a38      	ldr	r2, [pc, #224]	; (8007cc4 <recvfrom+0x3d4>)
 8007be2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	4a36      	ldr	r2, [pc, #216]	; (8007cc4 <recvfrom+0x3d4>)
 8007bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	b299      	uxth	r1, r3
 8007bf2:	7e7b      	ldrb	r3, [r7, #25]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	b291      	uxth	r1, r2
 8007bfc:	4a31      	ldr	r2, [pc, #196]	; (8007cc4 <recvfrom+0x3d4>)
 8007bfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	4a30      	ldr	r2, [pc, #192]	; (8007cc8 <recvfrom+0x3d8>)
 8007c06:	2180      	movs	r1, #128	; 0x80
 8007c08:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	4a2d      	ldr	r2, [pc, #180]	; (8007cc4 <recvfrom+0x3d4>)
 8007c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c12:	89ba      	ldrh	r2, [r7, #12]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d202      	bcs.n	8007c1e <recvfrom+0x32e>
 8007c18:	89bb      	ldrh	r3, [r7, #12]
 8007c1a:	83fb      	strh	r3, [r7, #30]
 8007c1c:	e004      	b.n	8007c28 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	4a28      	ldr	r2, [pc, #160]	; (8007cc4 <recvfrom+0x3d4>)
 8007c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c26:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8007c28:	8bfa      	ldrh	r2, [r7, #30]
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fb00 	bl	8007234 <wiz_recv_data>
			break;
 8007c34:	e00b      	b.n	8007c4e <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8007c36:	8bfa      	ldrh	r2, [r7, #30]
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fb55 	bl	80072ec <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	491f      	ldr	r1, [pc, #124]	; (8007cc4 <recvfrom+0x3d4>)
 8007c46:	8bfa      	ldrh	r2, [r7, #30]
 8007c48:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8007c4c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	3301      	adds	r3, #1
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c5a:	2140      	movs	r1, #64	; 0x40
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff f8e9 	bl	8006e34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8007c62:	bf00      	nop
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	3301      	adds	r3, #1
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7ff f893 	bl	8006d9c <WIZCHIP_READ>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f3      	bne.n	8007c64 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	4a11      	ldr	r2, [pc, #68]	; (8007cc4 <recvfrom+0x3d4>)
 8007c80:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	8bfa      	ldrh	r2, [r7, #30]
 8007c88:	1a8a      	subs	r2, r1, r2
 8007c8a:	b291      	uxth	r1, r2
 8007c8c:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <recvfrom+0x3d4>)
 8007c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	4a0b      	ldr	r2, [pc, #44]	; (8007cc4 <recvfrom+0x3d4>)
 8007c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <recvfrom+0x3d8>)
 8007ca2:	5cd2      	ldrb	r2, [r2, r3]
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	b2d1      	uxtb	r1, r2
 8007cac:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <recvfrom+0x3d8>)
 8007cae:	54d1      	strb	r1, [r2, r3]
 8007cb0:	e003      	b.n	8007cba <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	4a04      	ldr	r2, [pc, #16]	; (8007cc8 <recvfrom+0x3d8>)
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8007cba:	8bfb      	ldrh	r3, [r7, #30]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	2000034c 	.word	0x2000034c
 8007cc8:	2000035c 	.word	0x2000035c

08007ccc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {__disable_irq();}
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007cd0:	b672      	cpsid	i
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          { __enable_irq();}
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8007ce0:	b662      	cpsie	i
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bc80      	pop	{r7}
 8007cea:	4770      	bx	lr

08007cec <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */

//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {LAN_CS_GPIO_Port->BSRR = LAN_CS_Pin << 16;}
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	4b03      	ldr	r3, [pc, #12]	; (8007d00 <wizchip_cs_select+0x14>)
 8007cf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cf6:	611a      	str	r2, [r3, #16]
 8007cf8:	bf00      	nop
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr
 8007d00:	40010800 	.word	0x40010800

08007d04 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {LAN_CS_GPIO_Port->BSRR = LAN_CS_Pin << 0;}
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <wizchip_cs_deselect+0x14>)
 8007d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d0e:	611a      	str	r2, [r3, #16]
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr
 8007d18:	40010800 	.word	0x40010800

08007d1c <wizchip_spi_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t buf[10];
	extern SPI_HandleTypeDef hspi1;
	ret = HAL_SPI_Receive(&hspi1, &buf[0], 1, 100);
 8007d22:	1d39      	adds	r1, r7, #4
 8007d24:	2364      	movs	r3, #100	; 0x64
 8007d26:	2201      	movs	r2, #1
 8007d28:	4804      	ldr	r0, [pc, #16]	; (8007d3c <wizchip_spi_readbyte+0x20>)
 8007d2a:	f7fd fd68 	bl	80057fe <HAL_SPI_Receive>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
	return buf[0];
 8007d32:	793b      	ldrb	r3, [r7, #4]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20003c24 	.word	0x20003c24

08007d40 <wizchip_spi_writebyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	uint8_t buf[10];
	extern SPI_HandleTypeDef hspi1;
	buf[0] = wb;
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	733b      	strb	r3, [r7, #12]
	ret = HAL_SPI_Transmit(&hspi1, &buf[0], 1, 100);
 8007d4e:	f107 010c 	add.w	r1, r7, #12
 8007d52:	2364      	movs	r3, #100	; 0x64
 8007d54:	2201      	movs	r2, #1
 8007d56:	4804      	ldr	r0, [pc, #16]	; (8007d68 <wizchip_spi_writebyte+0x28>)
 8007d58:	f7fd fc0e 	bl	8005578 <HAL_SPI_Transmit>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75fb      	strb	r3, [r7, #23]
}
 8007d60:	bf00      	nop
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20003c24 	.word	0x20003c24

08007d6c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	6039      	str	r1, [r7, #0]
 8007d76:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	2300      	movs	r3, #0
 8007d82:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	f200 80c7 	bhi.w	8007f1a <ctlwizchip+0x1ae>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <ctlwizchip+0x28>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007dd5 	.word	0x08007dd5
 8007d98:	08007ddb 	.word	0x08007ddb
 8007d9c:	08007e07 	.word	0x08007e07
 8007da0:	08007dfb 	.word	0x08007dfb
 8007da4:	08007e15 	.word	0x08007e15
 8007da8:	08007e21 	.word	0x08007e21
 8007dac:	08007e2f 	.word	0x08007e2f
 8007db0:	08007e55 	.word	0x08007e55
 8007db4:	08007e7b 	.word	0x08007e7b
 8007db8:	08007ebf 	.word	0x08007ebf
 8007dbc:	08007ec5 	.word	0x08007ec5
 8007dc0:	08007ecd 	.word	0x08007ecd
 8007dc4:	08007f21 	.word	0x08007f21
 8007dc8:	08007ed5 	.word	0x08007ed5
 8007dcc:	08007ee3 	.word	0x08007ee3
 8007dd0:	08007eff 	.word	0x08007eff
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8007dd4:	f000 f8ea 	bl	8007fac <wizchip_sw_reset>
         break;
 8007dd8:	e0a3      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3308      	adds	r3, #8
 8007de8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f927 	bl	8008044 <wizchip_init>
 8007df6:	4603      	mov	r3, r0
 8007df8:	e094      	b.n	8007f24 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 f9ac 	bl	800815c <wizchip_clrinterrupt>
         break;
 8007e04:	e08d      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8007e06:	f000 f9dd 	bl	80081c4 <wizchip_getinterrupt>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	801a      	strh	r2, [r3, #0]
         break;
 8007e12:	e086      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f9f8 	bl	800820e <wizchip_setinterruptmask>
         break;         
 8007e1e:	e080      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8007e20:	f000 fa10 	bl	8008244 <wizchip_getinterruptmask>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	801a      	strh	r2, [r3, #0]
         break;
 8007e2c:	e079      	b.n	8007f22 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	0a1b      	lsrs	r3, r3, #8
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8007e3e:	f7fe fff9 	bl	8006e34 <WIZCHIP_WRITE>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8007e4e:	f7fe fff1 	bl	8006e34 <WIZCHIP_WRITE>
         break;
 8007e52:	e066      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8007e54:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8007e58:	f7fe ffa0 	bl	8006d9c <WIZCHIP_READ>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	b29c      	uxth	r4, r3
 8007e64:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8007e68:	f7fe ff98 	bl	8006d9c <WIZCHIP_READ>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	4423      	add	r3, r4
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	801a      	strh	r2, [r3, #0]
         break;
 8007e78:	e053      	b.n	8007f22 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8007e7a:	4b2c      	ldr	r3, [pc, #176]	; (8007f2c <ctlwizchip+0x1c0>)
 8007e7c:	789a      	ldrb	r2, [r3, #2]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	3301      	adds	r3, #1
 8007e86:	4a29      	ldr	r2, [pc, #164]	; (8007f2c <ctlwizchip+0x1c0>)
 8007e88:	78d2      	ldrb	r2, [r2, #3]
 8007e8a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	3302      	adds	r3, #2
 8007e90:	4a26      	ldr	r2, [pc, #152]	; (8007f2c <ctlwizchip+0x1c0>)
 8007e92:	7912      	ldrb	r2, [r2, #4]
 8007e94:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	3303      	adds	r3, #3
 8007e9a:	4a24      	ldr	r2, [pc, #144]	; (8007f2c <ctlwizchip+0x1c0>)
 8007e9c:	7952      	ldrb	r2, [r2, #5]
 8007e9e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4a21      	ldr	r2, [pc, #132]	; (8007f2c <ctlwizchip+0x1c0>)
 8007ea6:	7992      	ldrb	r2, [r2, #6]
 8007ea8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	3305      	adds	r3, #5
 8007eae:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <ctlwizchip+0x1c0>)
 8007eb0:	79d2      	ldrb	r2, [r2, #7]
 8007eb2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	3306      	adds	r3, #6
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]
         break;
 8007ebc:	e031      	b.n	8007f22 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8007ebe:	f000 fa13 	bl	80082e8 <wizphy_reset>
         break;
 8007ec2:	e02e      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8007ec4:	6838      	ldr	r0, [r7, #0]
 8007ec6:	f000 fa36 	bl	8008336 <wizphy_setphyconf>
         break;
 8007eca:	e02a      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8007ecc:	6838      	ldr	r0, [r7, #0]
 8007ece:	f000 fa74 	bl	80083ba <wizphy_getphyconf>
         break;
 8007ed2:	e026      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fad7 	bl	800848c <wizphy_setphypmode>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	e020      	b.n	8007f24 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8007ee2:	f000 f9e8 	bl	80082b6 <wizphy_getphypmode>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	2bff      	cmp	r3, #255	; 0xff
 8007eee:	d102      	bne.n	8007ef6 <ctlwizchip+0x18a>
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	e016      	b.n	8007f24 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	7dfa      	ldrb	r2, [r7, #23]
 8007efa:	701a      	strb	r2, [r3, #0]
         break;
 8007efc:	e011      	b.n	8007f22 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8007efe:	f000 f9c4 	bl	800828a <wizphy_getphylink>
 8007f02:	4603      	mov	r3, r0
 8007f04:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2bff      	cmp	r3, #255	; 0xff
 8007f0a:	d102      	bne.n	8007f12 <ctlwizchip+0x1a6>
 8007f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f10:	e008      	b.n	8007f24 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	7dfa      	ldrb	r2, [r7, #23]
 8007f16:	701a      	strb	r2, [r3, #0]
         break;
 8007f18:	e003      	b.n	8007f22 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1e:	e001      	b.n	8007f24 <ctlwizchip+0x1b8>
         break;
 8007f20:	bf00      	nop
   }
   return 0;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	371c      	adds	r7, #28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd90      	pop	{r4, r7, pc}
 8007f2c:	200000a4 	.word	0x200000a4

08007f30 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	6039      	str	r1, [r7, #0]
 8007f3a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d82c      	bhi.n	8007f9c <ctlnetwork+0x6c>
 8007f42:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <ctlnetwork+0x18>)
 8007f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f48:	08007f61 	.word	0x08007f61
 8007f4c:	08007f69 	.word	0x08007f69
 8007f50:	08007f71 	.word	0x08007f71
 8007f54:	08007f7f 	.word	0x08007f7f
 8007f58:	08007f8d 	.word	0x08007f8d
 8007f5c:	08007f95 	.word	0x08007f95
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8007f60:	6838      	ldr	r0, [r7, #0]
 8007f62:	f000 fadd 	bl	8008520 <wizchip_setnetinfo>
         break;
 8007f66:	e01c      	b.n	8007fa2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8007f68:	6838      	ldr	r0, [r7, #0]
 8007f6a:	f000 fb19 	bl	80085a0 <wizchip_getnetinfo>
         break;
 8007f6e:	e018      	b.n	8007fa2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fb53 	bl	8008620 <wizchip_setnetmode>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	e012      	b.n	8007fa4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8007f7e:	f000 fb71 	bl	8008664 <wizchip_getnetmode>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	701a      	strb	r2, [r3, #0]
         break;
 8007f8a:	e00a      	b.n	8007fa2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8007f8c:	6838      	ldr	r0, [r7, #0]
 8007f8e:	f000 fb71 	bl	8008674 <wizchip_settimeout>
         break;
 8007f92:	e006      	b.n	8007fa2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8007f94:	6838      	ldr	r0, [r7, #0]
 8007f96:	f000 fb8e 	bl	80086b6 <wizchip_gettimeout>
         break;
 8007f9a:	e002      	b.n	8007fa2 <ctlnetwork+0x72>
      default:
         return -1;
 8007f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa0:	e000      	b.n	8007fa4 <ctlnetwork+0x74>
   }
   return 0;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8007fb2:	1d3b      	adds	r3, r7, #4
 8007fb4:	2206      	movs	r2, #6
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8007fbc:	f7fe ff88 	bl	8006ed0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007fcc:	f7fe ff80 	bl	8006ed0 <WIZCHIP_READ_BUF>
 8007fd0:	f107 0310 	add.w	r3, r7, #16
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8007fdc:	f7fe ff78 	bl	8006ed0 <WIZCHIP_READ_BUF>
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	2204      	movs	r2, #4
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007fec:	f7fe ff70 	bl	8006ed0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8007ff0:	2180      	movs	r1, #128	; 0x80
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f7fe ff1e 	bl	8006e34 <WIZCHIP_WRITE>
   getMR(); // for delay
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	f7fe fecf 	bl	8006d9c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8007ffe:	1d3b      	adds	r3, r7, #4
 8008000:	2206      	movs	r2, #6
 8008002:	4619      	mov	r1, r3
 8008004:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008008:	f7fe ffc2 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	2204      	movs	r2, #4
 8008012:	4619      	mov	r1, r3
 8008014:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008018:	f7fe ffba 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800801c:	f107 0310 	add.w	r3, r7, #16
 8008020:	2204      	movs	r2, #4
 8008022:	4619      	mov	r1, r3
 8008024:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008028:	f7fe ffb2 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800802c:	f107 030c 	add.w	r3, r7, #12
 8008030:	2204      	movs	r2, #4
 8008032:	4619      	mov	r1, r3
 8008034:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008038:	f7fe ffaa 	bl	8006f90 <WIZCHIP_WRITE_BUF>
}
 800803c:	bf00      	nop
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8008052:	f7ff ffab 	bl	8007fac <wizchip_sw_reset>
   if(txsize)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d03b      	beq.n	80080d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
 8008064:	e015      	b.n	8008092 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8008066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	781a      	ldrb	r2, [r3, #0]
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	4413      	add	r3, r2
 8008074:	b2db      	uxtb	r3, r3
 8008076:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8008078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800807c:	2b10      	cmp	r3, #16
 800807e:	dd02      	ble.n	8008086 <wizchip_init+0x42>
 8008080:	f04f 33ff 	mov.w	r3, #4294967295
 8008084:	e066      	b.n	8008154 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	3301      	adds	r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	73fb      	strb	r3, [r7, #15]
 8008092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008096:	2b07      	cmp	r3, #7
 8008098:	dde5      	ble.n	8008066 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
 800809e:	e015      	b.n	80080cc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80080a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	3301      	adds	r3, #1
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80080ae:	4618      	mov	r0, r3
 80080b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	f7fe feba 	bl	8006e34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80080c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	3301      	adds	r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	73fb      	strb	r3, [r7, #15]
 80080cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d0:	2b07      	cmp	r3, #7
 80080d2:	dde5      	ble.n	80080a0 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d03b      	beq.n	8008152 <wizchip_init+0x10e>
   {
      tmp = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]
 80080e2:	e015      	b.n	8008110 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80080e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	4413      	add	r3, r2
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	4413      	add	r3, r2
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80080f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080fa:	2b10      	cmp	r3, #16
 80080fc:	dd02      	ble.n	8008104 <wizchip_init+0xc0>
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008102:	e027      	b.n	8008154 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	3301      	adds	r3, #1
 800810c:	b2db      	uxtb	r3, r3
 800810e:	73fb      	strb	r3, [r7, #15]
 8008110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008114:	2b07      	cmp	r3, #7
 8008116:	dde5      	ble.n	80080e4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
 800811c:	e015      	b.n	800814a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800811e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	3301      	adds	r3, #1
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800812c:	4618      	mov	r0, r3
 800812e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	4413      	add	r3, r2
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	4619      	mov	r1, r3
 800813a:	f7fe fe7b 	bl	8006e34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800813e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	3301      	adds	r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	73fb      	strb	r3, [r7, #15]
 800814a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800814e:	2b07      	cmp	r3, #7
 8008150:	dde5      	ble.n	800811e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	b29b      	uxth	r3, r3
 8008170:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	f023 030f 	bic.w	r3, r3, #15
 8008178:	b2db      	uxtb	r3, r3
 800817a:	4619      	mov	r1, r3
 800817c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8008180:	f7fe fe58 	bl	8006e34 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e014      	b.n	80081b4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800818a:	7bba      	ldrb	r2, [r7, #14]
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	fa42 f303 	asr.w	r3, r2, r3
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <wizchip_clrinterrupt+0x52>
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	3301      	adds	r3, #1
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80081a6:	211f      	movs	r1, #31
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fe43 	bl	8006e34 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	3301      	adds	r3, #1
 80081b2:	73fb      	strb	r3, [r7, #15]
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2b07      	cmp	r3, #7
 80081b8:	d9e7      	bls.n	800818a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80081ba:	bf00      	nop
 80081bc:	bf00      	nop
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80081d6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80081da:	f7fe fddf 	bl	8006d9c <WIZCHIP_READ>
 80081de:	4603      	mov	r3, r0
 80081e0:	f023 030f 	bic.w	r3, r3, #15
 80081e4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80081e6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80081ea:	f7fe fdd7 	bl	8006d9c <WIZCHIP_READ>
 80081ee:	4603      	mov	r3, r0
 80081f0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80081f2:	79bb      	ldrb	r3, [r7, #6]
 80081f4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80081f6:	88bb      	ldrh	r3, [r7, #4]
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	4413      	add	r3, r2
 8008202:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8008204:	88bb      	ldrh	r3, [r7, #4]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	4603      	mov	r3, r0
 8008216:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	0a1b      	lsrs	r3, r3, #8
 8008220:	b29b      	uxth	r3, r3
 8008222:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	4619      	mov	r1, r3
 8008228:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800822c:	f7fe fe02 	bl	8006e34 <WIZCHIP_WRITE>
   setSIMR(simr);
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	4619      	mov	r1, r3
 8008234:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8008238:	f7fe fdfc 	bl	8006e34 <WIZCHIP_WRITE>
#endif   
}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8008256:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800825a:	f7fe fd9f 	bl	8006d9c <WIZCHIP_READ>
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8008262:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8008266:	f7fe fd99 	bl	8006d9c <WIZCHIP_READ>
 800826a:	4603      	mov	r3, r0
 800826c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800826e:	79bb      	ldrb	r3, [r7, #6]
 8008270:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8008272:	88bb      	ldrh	r3, [r7, #4]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	b29a      	uxth	r2, r3
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	b29b      	uxth	r3, r3
 800827c:	4413      	add	r3, r2
 800827e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8008280:	88bb      	ldrh	r3, [r7, #4]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8008290:	2300      	movs	r3, #0
 8008292:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8008294:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8008298:	f7fe fd80 	bl	8006d9c <WIZCHIP_READ>
 800829c:	4603      	mov	r3, r0
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80082a6:	2301      	movs	r3, #1
 80082a8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80082aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80082c0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80082c4:	f7fe fd6a 	bl	8006d9c <WIZCHIP_READ>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082ce:	2b30      	cmp	r3, #48	; 0x30
 80082d0:	d102      	bne.n	80082d8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80082d2:	2301      	movs	r3, #1
 80082d4:	71fb      	strb	r3, [r7, #7]
 80082d6:	e001      	b.n	80082dc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80082d8:	2300      	movs	r3, #0
 80082da:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80082dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80082ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80082f2:	f7fe fd53 	bl	8006d9c <WIZCHIP_READ>
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008300:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	4619      	mov	r1, r3
 8008306:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800830a:	f7fe fd93 	bl	8006e34 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800830e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8008312:	f7fe fd43 	bl	8006d9c <WIZCHIP_READ>
 8008316:	4603      	mov	r3, r0
 8008318:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008320:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	4619      	mov	r1, r3
 8008326:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800832a:	f7fe fd83 	bl	8006e34 <WIZCHIP_WRITE>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d104      	bne.n	8008354 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008350:	73fb      	strb	r3, [r7, #15]
 8008352:	e003      	b.n	800835c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800835a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d104      	bne.n	800836e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800836a:	73fb      	strb	r3, [r7, #15]
 800836c:	e019      	b.n	80083a2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	78db      	ldrb	r3, [r3, #3]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d10d      	bne.n	8008392 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	789b      	ldrb	r3, [r3, #2]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d104      	bne.n	8008388 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	f043 0318 	orr.w	r3, r3, #24
 8008384:	73fb      	strb	r3, [r7, #15]
 8008386:	e00c      	b.n	80083a2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	f043 0308 	orr.w	r3, r3, #8
 800838e:	73fb      	strb	r3, [r7, #15]
 8008390:	e007      	b.n	80083a2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	789b      	ldrb	r3, [r3, #2]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d103      	bne.n	80083a2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	f043 0310 	orr.w	r3, r3, #16
 80083a0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	4619      	mov	r1, r3
 80083a6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80083aa:	f7fe fd43 	bl	8006e34 <WIZCHIP_WRITE>
   wizphy_reset();
 80083ae:	f7ff ff9b 	bl	80082e8 <wizphy_reset>
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80083c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80083ca:	f7fe fce7 	bl	8006d9c <WIZCHIP_READ>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	119b      	asrs	r3, r3, #6
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d001      	beq.n	80083f0 <wizphy_getphyconf+0x36>
 80083ec:	2b38      	cmp	r3, #56	; 0x38
 80083ee:	d103      	bne.n	80083f8 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	705a      	strb	r2, [r3, #1]
         break;
 80083f6:	e003      	b.n	8008400 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	705a      	strb	r2, [r3, #1]
         break;
 80083fe:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008406:	3b10      	subs	r3, #16
 8008408:	2b10      	cmp	r3, #16
 800840a:	bf8c      	ite	hi
 800840c:	2201      	movhi	r2, #1
 800840e:	2200      	movls	r2, #0
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	2a00      	cmp	r2, #0
 8008414:	d111      	bne.n	800843a <wizphy_getphyconf+0x80>
 8008416:	2201      	movs	r2, #1
 8008418:	fa02 f303 	lsl.w	r3, r2, r3
 800841c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008420:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	bf14      	ite	ne
 8008428:	2301      	movne	r3, #1
 800842a:	2300      	moveq	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	709a      	strb	r2, [r3, #2]
         break;
 8008438:	e003      	b.n	8008442 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	709a      	strb	r2, [r3, #2]
         break;
 8008440:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008448:	3b08      	subs	r3, #8
 800844a:	2b18      	cmp	r3, #24
 800844c:	bf8c      	ite	hi
 800844e:	2201      	movhi	r2, #1
 8008450:	2200      	movls	r2, #0
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	2a00      	cmp	r2, #0
 8008456:	d111      	bne.n	800847c <wizphy_getphyconf+0xc2>
 8008458:	2201      	movs	r2, #1
 800845a:	fa02 f303 	lsl.w	r3, r2, r3
 800845e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	bf14      	ite	ne
 800846a:	2301      	movne	r3, #1
 800846c:	2300      	moveq	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	70da      	strb	r2, [r3, #3]
         break;
 800847a:	e003      	b.n	8008484 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	70da      	strb	r2, [r3, #3]
         break;
 8008482:	bf00      	nop
   }
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800849a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800849e:	f7fe fc7d 	bl	8006d9c <WIZCHIP_READ>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d102      	bne.n	80084b6 <wizphy_setphypmode+0x2a>
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295
 80084b4:	e030      	b.n	8008518 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80084bc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d104      	bne.n	80084ce <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80084ca:	73fb      	strb	r3, [r7, #15]
 80084cc:	e003      	b.n	80084d6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80084d4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	4619      	mov	r1, r3
 80084da:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80084de:	f7fe fca9 	bl	8006e34 <WIZCHIP_WRITE>
   wizphy_reset();
 80084e2:	f7ff ff01 	bl	80082e8 <wizphy_reset>
   tmp = getPHYCFGR();
 80084e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80084ea:	f7fe fc57 	bl	8006d9c <WIZCHIP_READ>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d106      	bne.n	8008506 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d008      	beq.n	8008514 <wizphy_setphypmode+0x88>
 8008502:	2300      	movs	r3, #0
 8008504:	e008      	b.n	8008518 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <wizphy_setphypmode+0x88>
 8008510:	2300      	movs	r3, #0
 8008512:	e001      	b.n	8008518 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2206      	movs	r2, #6
 800852c:	4619      	mov	r1, r3
 800852e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008532:	f7fe fd2d 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	330e      	adds	r3, #14
 800853a:	2204      	movs	r2, #4
 800853c:	4619      	mov	r1, r3
 800853e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008542:	f7fe fd25 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	330a      	adds	r3, #10
 800854a:	2204      	movs	r2, #4
 800854c:	4619      	mov	r1, r3
 800854e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008552:	f7fe fd1d 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3306      	adds	r3, #6
 800855a:	2204      	movs	r2, #4
 800855c:	4619      	mov	r1, r3
 800855e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008562:	f7fe fd15 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	7c9a      	ldrb	r2, [r3, #18]
 800856a:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <wizchip_setnetinfo+0x78>)
 800856c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	7cda      	ldrb	r2, [r3, #19]
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <wizchip_setnetinfo+0x78>)
 8008574:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7d1a      	ldrb	r2, [r3, #20]
 800857a:	4b07      	ldr	r3, [pc, #28]	; (8008598 <wizchip_setnetinfo+0x78>)
 800857c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	7d5a      	ldrb	r2, [r3, #21]
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <wizchip_setnetinfo+0x78>)
 8008584:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	7d9a      	ldrb	r2, [r3, #22]
 800858a:	4b04      	ldr	r3, [pc, #16]	; (800859c <wizchip_setnetinfo+0x7c>)
 800858c:	701a      	strb	r2, [r3, #0]
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20000364 	.word	0x20000364
 800859c:	20000368 	.word	0x20000368

080085a0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2206      	movs	r2, #6
 80085ac:	4619      	mov	r1, r3
 80085ae:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80085b2:	f7fe fc8d 	bl	8006ed0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	330e      	adds	r3, #14
 80085ba:	2204      	movs	r2, #4
 80085bc:	4619      	mov	r1, r3
 80085be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80085c2:	f7fe fc85 	bl	8006ed0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	330a      	adds	r3, #10
 80085ca:	2204      	movs	r2, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80085d2:	f7fe fc7d 	bl	8006ed0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3306      	adds	r3, #6
 80085da:	2204      	movs	r2, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80085e2:	f7fe fc75 	bl	8006ed0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <wizchip_getnetinfo+0x78>)
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <wizchip_getnetinfo+0x78>)
 80085f0:	785a      	ldrb	r2, [r3, #1]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80085f6:	4b08      	ldr	r3, [pc, #32]	; (8008618 <wizchip_getnetinfo+0x78>)
 80085f8:	789a      	ldrb	r2, [r3, #2]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80085fe:	4b06      	ldr	r3, [pc, #24]	; (8008618 <wizchip_getnetinfo+0x78>)
 8008600:	78da      	ldrb	r2, [r3, #3]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <wizchip_getnetinfo+0x7c>)
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	759a      	strb	r2, [r3, #22]
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000364 	.word	0x20000364
 800861c:	20000368 	.word	0x20000368

08008620 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <wizchip_setnetmode+0x1e>
 8008638:	f04f 33ff 	mov.w	r3, #4294967295
 800863c:	e00e      	b.n	800865c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800863e:	2000      	movs	r0, #0
 8008640:	f7fe fbac 	bl	8006d9c <WIZCHIP_READ>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8008648:	7bfa      	ldrb	r2, [r7, #15]
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	4313      	orrs	r3, r2
 800864e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4619      	mov	r1, r3
 8008654:	2000      	movs	r0, #0
 8008656:	f7fe fbed 	bl	8006e34 <WIZCHIP_WRITE>
   return 0;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8008668:	2000      	movs	r0, #0
 800866a:	f7fe fb97 	bl	8006d9c <WIZCHIP_READ>
 800866e:	4603      	mov	r3, r0
}
 8008670:	4618      	mov	r0, r3
 8008672:	bd80      	pop	{r7, pc}

08008674 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	4619      	mov	r1, r3
 8008682:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8008686:	f7fe fbd5 	bl	8006e34 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	b2db      	uxtb	r3, r3
 8008694:	4619      	mov	r1, r3
 8008696:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800869a:	f7fe fbcb 	bl	8006e34 <WIZCHIP_WRITE>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	885b      	ldrh	r3, [r3, #2]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	4619      	mov	r1, r3
 80086a6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80086aa:	f7fe fbc3 	bl	8006e34 <WIZCHIP_WRITE>
}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80086b6:	b590      	push	{r4, r7, lr}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80086be:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80086c2:	f7fe fb6b 	bl	8006d9c <WIZCHIP_READ>
 80086c6:	4603      	mov	r3, r0
 80086c8:	461a      	mov	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80086ce:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80086d2:	f7fe fb63 	bl	8006d9c <WIZCHIP_READ>
 80086d6:	4603      	mov	r3, r0
 80086d8:	b29b      	uxth	r3, r3
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	b29c      	uxth	r4, r3
 80086de:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80086e2:	f7fe fb5b 	bl	8006d9c <WIZCHIP_READ>
 80086e6:	4603      	mov	r3, r0
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4423      	add	r3, r4
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	805a      	strh	r2, [r3, #2]
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}
	...

080086fc <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8008700:	2204      	movs	r2, #4
 8008702:	4909      	ldr	r1, [pc, #36]	; (8008728 <default_ip_assign+0x2c>)
 8008704:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008708:	f7fe fc42 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 800870c:	2204      	movs	r2, #4
 800870e:	4907      	ldr	r1, [pc, #28]	; (800872c <default_ip_assign+0x30>)
 8008710:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008714:	f7fe fc3c 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8008718:	2204      	movs	r2, #4
 800871a:	4905      	ldr	r1, [pc, #20]	; (8008730 <default_ip_assign+0x34>)
 800871c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008720:	f7fe fc36 	bl	8006f90 <WIZCHIP_WRITE_BUF>
}
 8008724:	bf00      	nop
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000370 	.word	0x20000370
 800872c:	20000378 	.word	0x20000378
 8008730:	20000374 	.word	0x20000374

08008734 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8008738:	2180      	movs	r1, #128	; 0x80
 800873a:	2000      	movs	r0, #0
 800873c:	f7fe fb7a 	bl	8006e34 <WIZCHIP_WRITE>
   getMR(); // for delay
 8008740:	2000      	movs	r0, #0
 8008742:	f7fe fb2b 	bl	8006d9c <WIZCHIP_READ>
   default_ip_assign();
 8008746:	f7ff ffd9 	bl	80086fc <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 800874a:	2206      	movs	r2, #6
 800874c:	4903      	ldr	r1, [pc, #12]	; (800875c <default_ip_update+0x28>)
 800874e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008752:	f7fe fc1d 	bl	8006f90 <WIZCHIP_WRITE_BUF>
}
 8008756:	bf00      	nop
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20003cc8 	.word	0x20003cc8

08008760 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8008764:	2180      	movs	r1, #128	; 0x80
 8008766:	2000      	movs	r0, #0
 8008768:	f7fe fb64 	bl	8006e34 <WIZCHIP_WRITE>
	getMR(); // for delay
 800876c:	2000      	movs	r0, #0
 800876e:	f7fe fb15 	bl	8006d9c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8008772:	2206      	movs	r2, #6
 8008774:	4903      	ldr	r1, [pc, #12]	; (8008784 <default_ip_conflict+0x24>)
 8008776:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800877a:	f7fe fc09 	bl	8006f90 <WIZCHIP_WRITE_BUF>
}
 800877e:	bf00      	nop
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20003cc8 	.word	0x20003cc8

08008788 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8008794:	4b0f      	ldr	r3, [pc, #60]	; (80087d4 <reg_dhcp_cbfunc+0x4c>)
 8008796:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <reg_dhcp_cbfunc+0x50>)
 8008798:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800879a:	4b10      	ldr	r3, [pc, #64]	; (80087dc <reg_dhcp_cbfunc+0x54>)
 800879c:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <reg_dhcp_cbfunc+0x58>)
 800879e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80087a0:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <reg_dhcp_cbfunc+0x5c>)
 80087a2:	4a11      	ldr	r2, [pc, #68]	; (80087e8 <reg_dhcp_cbfunc+0x60>)
 80087a4:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <reg_dhcp_cbfunc+0x2a>
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <reg_dhcp_cbfunc+0x4c>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <reg_dhcp_cbfunc+0x36>
 80087b8:	4a08      	ldr	r2, [pc, #32]	; (80087dc <reg_dhcp_cbfunc+0x54>)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <reg_dhcp_cbfunc+0x42>
 80087c4:	4a07      	ldr	r2, [pc, #28]	; (80087e4 <reg_dhcp_cbfunc+0x5c>)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6013      	str	r3, [r2, #0]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr
 80087d4:	200000e0 	.word	0x200000e0
 80087d8:	080086fd 	.word	0x080086fd
 80087dc:	200000e4 	.word	0x200000e4
 80087e0:	08008735 	.word	0x08008735
 80087e4:	200000e8 	.word	0x200000e8
 80087e8:	08008761 	.word	0x08008761

080087ec <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80087f2:	463b      	mov	r3, r7
 80087f4:	2206      	movs	r2, #6
 80087f6:	4619      	mov	r1, r3
 80087f8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80087fc:	f7fe fb68 	bl	8006ed0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8008800:	4b72      	ldr	r3, [pc, #456]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2201      	movs	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8008808:	4b70      	ldr	r3, [pc, #448]	; (80089cc <makeDHCPMSG+0x1e0>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2201      	movs	r2, #1
 800880e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8008810:	4b6e      	ldr	r3, [pc, #440]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2206      	movs	r2, #6
 8008816:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8008818:	4b6c      	ldr	r3, [pc, #432]	; (80089cc <makeDHCPMSG+0x1e0>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2200      	movs	r2, #0
 800881e:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8008820:	4b6a      	ldr	r3, [pc, #424]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3304      	adds	r3, #4
 8008826:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8008828:	4b69      	ldr	r3, [pc, #420]	; (80089d0 <makeDHCPMSG+0x1e4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	b2da      	uxtb	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8008834:	4b66      	ldr	r3, [pc, #408]	; (80089d0 <makeDHCPMSG+0x1e4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	0c1a      	lsrs	r2, r3, #16
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	3301      	adds	r3, #1
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8008842:	4b63      	ldr	r3, [pc, #396]	; (80089d0 <makeDHCPMSG+0x1e4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	0a1a      	lsrs	r2, r3, #8
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	3302      	adds	r3, #2
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8008850:	4b5f      	ldr	r3, [pc, #380]	; (80089d0 <makeDHCPMSG+0x1e4>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	3303      	adds	r3, #3
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 800885c:	4b5b      	ldr	r3, [pc, #364]	; (80089cc <makeDHCPMSG+0x1e0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2200      	movs	r2, #0
 8008862:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8008864:	4b59      	ldr	r3, [pc, #356]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330a      	adds	r3, #10
 800886a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2280      	movs	r2, #128	; 0x80
 8008870:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	3301      	adds	r3, #1
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 800887a:	4b54      	ldr	r3, [pc, #336]	; (80089cc <makeDHCPMSG+0x1e0>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8008882:	4b52      	ldr	r3, [pc, #328]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800888a:	4b50      	ldr	r3, [pc, #320]	; (80089cc <makeDHCPMSG+0x1e0>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2200      	movs	r2, #0
 8008890:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8008892:	4b4e      	ldr	r3, [pc, #312]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800889a:	4b4c      	ldr	r3, [pc, #304]	; (80089cc <makeDHCPMSG+0x1e0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80088a2:	4b4a      	ldr	r3, [pc, #296]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80088aa:	4b48      	ldr	r3, [pc, #288]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80088b2:	4b46      	ldr	r3, [pc, #280]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2200      	movs	r2, #0
 80088b8:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80088ba:	4b44      	ldr	r3, [pc, #272]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80088c2:	4b42      	ldr	r3, [pc, #264]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2200      	movs	r2, #0
 80088c8:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80088ca:	4b40      	ldr	r3, [pc, #256]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2200      	movs	r2, #0
 80088d0:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80088d2:	4b3e      	ldr	r3, [pc, #248]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2200      	movs	r2, #0
 80088d8:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80088da:	4b3c      	ldr	r3, [pc, #240]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2200      	movs	r2, #0
 80088e0:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80088e2:	4b3a      	ldr	r3, [pc, #232]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2200      	movs	r2, #0
 80088e8:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80088ea:	4b38      	ldr	r3, [pc, #224]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2200      	movs	r2, #0
 80088f0:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80088f2:	4b36      	ldr	r3, [pc, #216]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80088fa:	4b34      	ldr	r3, [pc, #208]	; (80089cc <makeDHCPMSG+0x1e0>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a35      	ldr	r2, [pc, #212]	; (80089d4 <makeDHCPMSG+0x1e8>)
 8008900:	7812      	ldrb	r2, [r2, #0]
 8008902:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8008904:	4b31      	ldr	r3, [pc, #196]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a32      	ldr	r2, [pc, #200]	; (80089d4 <makeDHCPMSG+0x1e8>)
 800890a:	7852      	ldrb	r2, [r2, #1]
 800890c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800890e:	4b2f      	ldr	r3, [pc, #188]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a30      	ldr	r2, [pc, #192]	; (80089d4 <makeDHCPMSG+0x1e8>)
 8008914:	7892      	ldrb	r2, [r2, #2]
 8008916:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8008918:	4b2c      	ldr	r3, [pc, #176]	; (80089cc <makeDHCPMSG+0x1e0>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a2d      	ldr	r2, [pc, #180]	; (80089d4 <makeDHCPMSG+0x1e8>)
 800891e:	78d2      	ldrb	r2, [r2, #3]
 8008920:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8008922:	4b2a      	ldr	r3, [pc, #168]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a2b      	ldr	r2, [pc, #172]	; (80089d4 <makeDHCPMSG+0x1e8>)
 8008928:	7912      	ldrb	r2, [r2, #4]
 800892a:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800892e:	4b27      	ldr	r3, [pc, #156]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a28      	ldr	r2, [pc, #160]	; (80089d4 <makeDHCPMSG+0x1e8>)
 8008934:	7952      	ldrb	r2, [r2, #5]
 8008936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 800893a:	2306      	movs	r3, #6
 800893c:	73fb      	strb	r3, [r7, #15]
 800893e:	e008      	b.n	8008952 <makeDHCPMSG+0x166>
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	4413      	add	r3, r2
 8008948:	2200      	movs	r2, #0
 800894a:	771a      	strb	r2, [r3, #28]
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	3301      	adds	r3, #1
 8008950:	73fb      	strb	r3, [r7, #15]
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	2b0f      	cmp	r3, #15
 8008956:	d9f3      	bls.n	8008940 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
 800895c:	e009      	b.n	8008972 <makeDHCPMSG+0x186>
 800895e:	4b1b      	ldr	r3, [pc, #108]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	4413      	add	r3, r2
 8008966:	2200      	movs	r2, #0
 8008968:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	3301      	adds	r3, #1
 8008970:	73fb      	strb	r3, [r7, #15]
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b3f      	cmp	r3, #63	; 0x3f
 8008976:	d9f2      	bls.n	800895e <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
 800897c:	e009      	b.n	8008992 <makeDHCPMSG+0x1a6>
 800897e:	4b13      	ldr	r3, [pc, #76]	; (80089cc <makeDHCPMSG+0x1e0>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	4413      	add	r3, r2
 8008986:	2200      	movs	r2, #0
 8008988:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	3301      	adds	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
 8008992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008996:	2b00      	cmp	r3, #0
 8008998:	daf1      	bge.n	800897e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800899a:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <makeDHCPMSG+0x1e0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2263      	movs	r2, #99	; 0x63
 80089a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80089a4:	4b09      	ldr	r3, [pc, #36]	; (80089cc <makeDHCPMSG+0x1e0>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2282      	movs	r2, #130	; 0x82
 80089aa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80089ae:	4b07      	ldr	r3, [pc, #28]	; (80089cc <makeDHCPMSG+0x1e0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2253      	movs	r2, #83	; 0x53
 80089b4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80089b8:	4b04      	ldr	r3, [pc, #16]	; (80089cc <makeDHCPMSG+0x1e0>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2263      	movs	r2, #99	; 0x63
 80089be:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20003cdc 	.word	0x20003cdc
 80089d0:	20003cd0 	.word	0x20003cd0
 80089d4:	20003cc8 	.word	0x20003cc8

080089d8 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80089d8:	b5b0      	push	{r4, r5, r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80089e2:	f7ff ff03 	bl	80087ec <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80089e6:	4b56      	ldr	r3, [pc, #344]	; (8008b40 <send_DHCP_DISCOVER+0x168>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80089ec:	4b54      	ldr	r3, [pc, #336]	; (8008b40 <send_DHCP_DISCOVER+0x168>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80089f2:	4b53      	ldr	r3, [pc, #332]	; (8008b40 <send_DHCP_DISCOVER+0x168>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80089f8:	4b51      	ldr	r3, [pc, #324]	; (8008b40 <send_DHCP_DISCOVER+0x168>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80089fe:	4b51      	ldr	r3, [pc, #324]	; (8008b44 <send_DHCP_DISCOVER+0x16c>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8008a04:	4b4f      	ldr	r3, [pc, #316]	; (8008b44 <send_DHCP_DISCOVER+0x16c>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8008a0a:	4b4e      	ldr	r3, [pc, #312]	; (8008b44 <send_DHCP_DISCOVER+0x16c>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8008a10:	4b4c      	ldr	r3, [pc, #304]	; (8008b44 <send_DHCP_DISCOVER+0x16c>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8008a16:	2304      	movs	r3, #4
 8008a18:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8008a1a:	4b4b      	ldr	r3, [pc, #300]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	88bb      	ldrh	r3, [r7, #4]
 8008a20:	1c59      	adds	r1, r3, #1
 8008a22:	80b9      	strh	r1, [r7, #4]
 8008a24:	4413      	add	r3, r2
 8008a26:	2235      	movs	r2, #53	; 0x35
 8008a28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8008a2c:	4b46      	ldr	r3, [pc, #280]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	88bb      	ldrh	r3, [r7, #4]
 8008a32:	1c59      	adds	r1, r3, #1
 8008a34:	80b9      	strh	r1, [r7, #4]
 8008a36:	4413      	add	r3, r2
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8008a3e:	4b42      	ldr	r3, [pc, #264]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	88bb      	ldrh	r3, [r7, #4]
 8008a44:	1c59      	adds	r1, r3, #1
 8008a46:	80b9      	strh	r1, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8008a50:	4b3d      	ldr	r3, [pc, #244]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	88bb      	ldrh	r3, [r7, #4]
 8008a56:	1c59      	adds	r1, r3, #1
 8008a58:	80b9      	strh	r1, [r7, #4]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	223d      	movs	r2, #61	; 0x3d
 8008a5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8008a62:	4b39      	ldr	r3, [pc, #228]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	88bb      	ldrh	r3, [r7, #4]
 8008a68:	1c59      	adds	r1, r3, #1
 8008a6a:	80b9      	strh	r1, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	2207      	movs	r2, #7
 8008a70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8008a74:	4b34      	ldr	r3, [pc, #208]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	88bb      	ldrh	r3, [r7, #4]
 8008a7a:	1c59      	adds	r1, r3, #1
 8008a7c:	80b9      	strh	r1, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8008a86:	4b30      	ldr	r3, [pc, #192]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	88bb      	ldrh	r3, [r7, #4]
 8008a8c:	1c59      	adds	r1, r3, #1
 8008a8e:	80b9      	strh	r1, [r7, #4]
 8008a90:	4618      	mov	r0, r3
 8008a92:	4b2e      	ldr	r3, [pc, #184]	; (8008b4c <send_DHCP_DISCOVER+0x174>)
 8008a94:	7819      	ldrb	r1, [r3, #0]
 8008a96:	1813      	adds	r3, r2, r0
 8008a98:	460a      	mov	r2, r1
 8008a9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8008a9e:	4b2a      	ldr	r3, [pc, #168]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	88bb      	ldrh	r3, [r7, #4]
 8008aa4:	1c59      	adds	r1, r3, #1
 8008aa6:	80b9      	strh	r1, [r7, #4]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	4b28      	ldr	r3, [pc, #160]	; (8008b4c <send_DHCP_DISCOVER+0x174>)
 8008aac:	7859      	ldrb	r1, [r3, #1]
 8008aae:	1813      	adds	r3, r2, r0
 8008ab0:	460a      	mov	r2, r1
 8008ab2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8008ab6:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	88bb      	ldrh	r3, [r7, #4]
 8008abc:	1c59      	adds	r1, r3, #1
 8008abe:	80b9      	strh	r1, [r7, #4]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <send_DHCP_DISCOVER+0x174>)
 8008ac4:	7899      	ldrb	r1, [r3, #2]
 8008ac6:	1813      	adds	r3, r2, r0
 8008ac8:	460a      	mov	r2, r1
 8008aca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8008ace:	4b1e      	ldr	r3, [pc, #120]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	88bb      	ldrh	r3, [r7, #4]
 8008ad4:	1c59      	adds	r1, r3, #1
 8008ad6:	80b9      	strh	r1, [r7, #4]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <send_DHCP_DISCOVER+0x174>)
 8008adc:	78d9      	ldrb	r1, [r3, #3]
 8008ade:	1813      	adds	r3, r2, r0
 8008ae0:	460a      	mov	r2, r1
 8008ae2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8008ae6:	4b18      	ldr	r3, [pc, #96]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	88bb      	ldrh	r3, [r7, #4]
 8008aec:	1c59      	adds	r1, r3, #1
 8008aee:	80b9      	strh	r1, [r7, #4]
 8008af0:	4618      	mov	r0, r3
 8008af2:	4b16      	ldr	r3, [pc, #88]	; (8008b4c <send_DHCP_DISCOVER+0x174>)
 8008af4:	7919      	ldrb	r1, [r3, #4]
 8008af6:	1813      	adds	r3, r2, r0
 8008af8:	460a      	mov	r2, r1
 8008afa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8008afe:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	88bb      	ldrh	r3, [r7, #4]
 8008b04:	1c59      	adds	r1, r3, #1
 8008b06:	80b9      	strh	r1, [r7, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <send_DHCP_DISCOVER+0x174>)
 8008b0c:	7959      	ldrb	r1, [r3, #5]
 8008b0e:	1813      	adds	r3, r2, r0
 8008b10:	460a      	mov	r2, r1
 8008b12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	88bb      	ldrh	r3, [r7, #4]
 8008b1c:	1c59      	adds	r1, r3, #1
 8008b1e:	80b9      	strh	r1, [r7, #4]
 8008b20:	4413      	add	r3, r2
 8008b22:	220c      	movs	r2, #12
 8008b24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8008b28:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <send_DHCP_DISCOVER+0x170>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	88bb      	ldrh	r3, [r7, #4]
 8008b2e:	1c59      	adds	r1, r3, #1
 8008b30:	80b9      	strh	r1, [r7, #4]
 8008b32:	4413      	add	r3, r2
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	80fb      	strh	r3, [r7, #6]
 8008b3e:	e017      	b.n	8008b70 <send_DHCP_DISCOVER+0x198>
 8008b40:	20003cd8 	.word	0x20003cd8
 8008b44:	20003cd4 	.word	0x20003cd4
 8008b48:	20003cdc 	.word	0x20003cdc
 8008b4c:	20003cc8 	.word	0x20003cc8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8008b50:	88f9      	ldrh	r1, [r7, #6]
 8008b52:	4b80      	ldr	r3, [pc, #512]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	88bb      	ldrh	r3, [r7, #4]
 8008b58:	1c58      	adds	r0, r3, #1
 8008b5a:	80b8      	strh	r0, [r7, #4]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	4b7e      	ldr	r3, [pc, #504]	; (8008d58 <send_DHCP_DISCOVER+0x380>)
 8008b60:	5c59      	ldrb	r1, [r3, r1]
 8008b62:	1813      	adds	r3, r2, r0
 8008b64:	460a      	mov	r2, r1
 8008b66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8008b6a:	88fb      	ldrh	r3, [r7, #6]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	80fb      	strh	r3, [r7, #6]
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	4a79      	ldr	r2, [pc, #484]	; (8008d58 <send_DHCP_DISCOVER+0x380>)
 8008b74:	5cd3      	ldrb	r3, [r2, r3]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1ea      	bne.n	8008b50 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8008b7a:	4b78      	ldr	r3, [pc, #480]	; (8008d5c <send_DHCP_DISCOVER+0x384>)
 8008b7c:	78db      	ldrb	r3, [r3, #3]
 8008b7e:	091b      	lsrs	r3, r3, #4
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	4b74      	ldr	r3, [pc, #464]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008b84:	681c      	ldr	r4, [r3, #0]
 8008b86:	88bb      	ldrh	r3, [r7, #4]
 8008b88:	1c59      	adds	r1, r3, #1
 8008b8a:	80b9      	strh	r1, [r7, #4]
 8008b8c:	461d      	mov	r5, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f001 f9c6 	bl	8009f20 <NibbleToHex>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	1963      	adds	r3, r4, r5
 8008b9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8008b9e:	4b6f      	ldr	r3, [pc, #444]	; (8008d5c <send_DHCP_DISCOVER+0x384>)
 8008ba0:	78da      	ldrb	r2, [r3, #3]
 8008ba2:	4b6c      	ldr	r3, [pc, #432]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008ba4:	681c      	ldr	r4, [r3, #0]
 8008ba6:	88bb      	ldrh	r3, [r7, #4]
 8008ba8:	1c59      	adds	r1, r3, #1
 8008baa:	80b9      	strh	r1, [r7, #4]
 8008bac:	461d      	mov	r5, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f001 f9b6 	bl	8009f20 <NibbleToHex>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	1963      	adds	r3, r4, r5
 8008bba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8008bbe:	4b67      	ldr	r3, [pc, #412]	; (8008d5c <send_DHCP_DISCOVER+0x384>)
 8008bc0:	791b      	ldrb	r3, [r3, #4]
 8008bc2:	091b      	lsrs	r3, r3, #4
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	4b63      	ldr	r3, [pc, #396]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008bc8:	681c      	ldr	r4, [r3, #0]
 8008bca:	88bb      	ldrh	r3, [r7, #4]
 8008bcc:	1c59      	adds	r1, r3, #1
 8008bce:	80b9      	strh	r1, [r7, #4]
 8008bd0:	461d      	mov	r5, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f001 f9a4 	bl	8009f20 <NibbleToHex>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	1963      	adds	r3, r4, r5
 8008bde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8008be2:	4b5e      	ldr	r3, [pc, #376]	; (8008d5c <send_DHCP_DISCOVER+0x384>)
 8008be4:	791a      	ldrb	r2, [r3, #4]
 8008be6:	4b5b      	ldr	r3, [pc, #364]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008be8:	681c      	ldr	r4, [r3, #0]
 8008bea:	88bb      	ldrh	r3, [r7, #4]
 8008bec:	1c59      	adds	r1, r3, #1
 8008bee:	80b9      	strh	r1, [r7, #4]
 8008bf0:	461d      	mov	r5, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f001 f994 	bl	8009f20 <NibbleToHex>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	1963      	adds	r3, r4, r5
 8008bfe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8008c02:	4b56      	ldr	r3, [pc, #344]	; (8008d5c <send_DHCP_DISCOVER+0x384>)
 8008c04:	795b      	ldrb	r3, [r3, #5]
 8008c06:	091b      	lsrs	r3, r3, #4
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	4b52      	ldr	r3, [pc, #328]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008c0c:	681c      	ldr	r4, [r3, #0]
 8008c0e:	88bb      	ldrh	r3, [r7, #4]
 8008c10:	1c59      	adds	r1, r3, #1
 8008c12:	80b9      	strh	r1, [r7, #4]
 8008c14:	461d      	mov	r5, r3
 8008c16:	4610      	mov	r0, r2
 8008c18:	f001 f982 	bl	8009f20 <NibbleToHex>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	1963      	adds	r3, r4, r5
 8008c22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8008c26:	4b4d      	ldr	r3, [pc, #308]	; (8008d5c <send_DHCP_DISCOVER+0x384>)
 8008c28:	795a      	ldrb	r2, [r3, #5]
 8008c2a:	4b4a      	ldr	r3, [pc, #296]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008c2c:	681c      	ldr	r4, [r3, #0]
 8008c2e:	88bb      	ldrh	r3, [r7, #4]
 8008c30:	1c59      	adds	r1, r3, #1
 8008c32:	80b9      	strh	r1, [r7, #4]
 8008c34:	461d      	mov	r5, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f001 f972 	bl	8009f20 <NibbleToHex>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	1963      	adds	r3, r4, r5
 8008c42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	b2d9      	uxtb	r1, r3
 8008c4a:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	88b8      	ldrh	r0, [r7, #4]
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	3307      	adds	r3, #7
 8008c54:	1ac3      	subs	r3, r0, r3
 8008c56:	3106      	adds	r1, #6
 8008c58:	b2c9      	uxtb	r1, r1
 8008c5a:	4413      	add	r3, r2
 8008c5c:	460a      	mov	r2, r1
 8008c5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8008c62:	4b3c      	ldr	r3, [pc, #240]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	88bb      	ldrh	r3, [r7, #4]
 8008c68:	1c59      	adds	r1, r3, #1
 8008c6a:	80b9      	strh	r1, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	2237      	movs	r2, #55	; 0x37
 8008c70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8008c74:	4b37      	ldr	r3, [pc, #220]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	88bb      	ldrh	r3, [r7, #4]
 8008c7a:	1c59      	adds	r1, r3, #1
 8008c7c:	80b9      	strh	r1, [r7, #4]
 8008c7e:	4413      	add	r3, r2
 8008c80:	2206      	movs	r2, #6
 8008c82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8008c86:	4b33      	ldr	r3, [pc, #204]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	88bb      	ldrh	r3, [r7, #4]
 8008c8c:	1c59      	adds	r1, r3, #1
 8008c8e:	80b9      	strh	r1, [r7, #4]
 8008c90:	4413      	add	r3, r2
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8008c98:	4b2e      	ldr	r3, [pc, #184]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	88bb      	ldrh	r3, [r7, #4]
 8008c9e:	1c59      	adds	r1, r3, #1
 8008ca0:	80b9      	strh	r1, [r7, #4]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8008caa:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	88bb      	ldrh	r3, [r7, #4]
 8008cb0:	1c59      	adds	r1, r3, #1
 8008cb2:	80b9      	strh	r1, [r7, #4]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	2206      	movs	r2, #6
 8008cb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8008cbc:	4b25      	ldr	r3, [pc, #148]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	88bb      	ldrh	r3, [r7, #4]
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	80b9      	strh	r1, [r7, #4]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	220f      	movs	r2, #15
 8008cca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8008cce:	4b21      	ldr	r3, [pc, #132]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	88bb      	ldrh	r3, [r7, #4]
 8008cd4:	1c59      	adds	r1, r3, #1
 8008cd6:	80b9      	strh	r1, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	223a      	movs	r2, #58	; 0x3a
 8008cdc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8008ce0:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	88bb      	ldrh	r3, [r7, #4]
 8008ce6:	1c59      	adds	r1, r3, #1
 8008ce8:	80b9      	strh	r1, [r7, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	223b      	movs	r2, #59	; 0x3b
 8008cee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	88bb      	ldrh	r3, [r7, #4]
 8008cf8:	1c59      	adds	r1, r3, #1
 8008cfa:	80b9      	strh	r1, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	22ff      	movs	r2, #255	; 0xff
 8008d00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8008d04:	88bb      	ldrh	r3, [r7, #4]
 8008d06:	80fb      	strh	r3, [r7, #6]
 8008d08:	e009      	b.n	8008d1e <send_DHCP_DISCOVER+0x346>
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	4413      	add	r3, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	80fb      	strh	r3, [r7, #6]
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8008d24:	d3f1      	bcc.n	8008d0a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8008d26:	23ff      	movs	r3, #255	; 0xff
 8008d28:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8008d2a:	23ff      	movs	r3, #255	; 0xff
 8008d2c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8008d2e:	23ff      	movs	r3, #255	; 0xff
 8008d30:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8008d32:	23ff      	movs	r3, #255	; 0xff
 8008d34:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8008d36:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <send_DHCP_DISCOVER+0x388>)
 8008d38:	7818      	ldrb	r0, [r3, #0]
 8008d3a:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <send_DHCP_DISCOVER+0x37c>)
 8008d3c:	6819      	ldr	r1, [r3, #0]
 8008d3e:	463b      	mov	r3, r7
 8008d40:	2243      	movs	r2, #67	; 0x43
 8008d42:	9200      	str	r2, [sp, #0]
 8008d44:	f44f 7209 	mov.w	r2, #548	; 0x224
 8008d48:	f7fe fc9c 	bl	8007684 <sendto>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bdb0      	pop	{r4, r5, r7, pc}
 8008d54:	20003cdc 	.word	0x20003cdc
 8008d58:	200000d8 	.word	0x200000d8
 8008d5c:	20003cc8 	.word	0x20003cc8
 8008d60:	20003ce0 	.word	0x20003ce0

08008d64 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8008d64:	b5b0      	push	{r4, r5, r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8008d6e:	f7ff fd3d 	bl	80087ec <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8008d72:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <send_DHCP_REQUEST+0x7c>)
 8008d74:	f993 3000 	ldrsb.w	r3, [r3]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d004      	beq.n	8008d86 <send_DHCP_REQUEST+0x22>
 8008d7c:	4b18      	ldr	r3, [pc, #96]	; (8008de0 <send_DHCP_REQUEST+0x7c>)
 8008d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d134      	bne.n	8008df0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8008d86:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <send_DHCP_REQUEST+0x80>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	330a      	adds	r3, #10
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8008d90:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <send_DHCP_REQUEST+0x80>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	330a      	adds	r3, #10
 8008d96:	3301      	adds	r3, #1
 8008d98:	2200      	movs	r2, #0
 8008d9a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8008d9c:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <send_DHCP_REQUEST+0x80>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a11      	ldr	r2, [pc, #68]	; (8008de8 <send_DHCP_REQUEST+0x84>)
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <send_DHCP_REQUEST+0x80>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a0f      	ldr	r2, [pc, #60]	; (8008de8 <send_DHCP_REQUEST+0x84>)
 8008dac:	7852      	ldrb	r2, [r2, #1]
 8008dae:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8008db0:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <send_DHCP_REQUEST+0x80>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a0c      	ldr	r2, [pc, #48]	; (8008de8 <send_DHCP_REQUEST+0x84>)
 8008db6:	7892      	ldrb	r2, [r2, #2]
 8008db8:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8008dba:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <send_DHCP_REQUEST+0x80>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a0a      	ldr	r2, [pc, #40]	; (8008de8 <send_DHCP_REQUEST+0x84>)
 8008dc0:	78d2      	ldrb	r2, [r2, #3]
 8008dc2:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8008dc4:	4b09      	ldr	r3, [pc, #36]	; (8008dec <send_DHCP_REQUEST+0x88>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8008dca:	4b08      	ldr	r3, [pc, #32]	; (8008dec <send_DHCP_REQUEST+0x88>)
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8008dd0:	4b06      	ldr	r3, [pc, #24]	; (8008dec <send_DHCP_REQUEST+0x88>)
 8008dd2:	789b      	ldrb	r3, [r3, #2]
 8008dd4:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8008dd6:	4b05      	ldr	r3, [pc, #20]	; (8008dec <send_DHCP_REQUEST+0x88>)
 8008dd8:	78db      	ldrb	r3, [r3, #3]
 8008dda:	71fb      	strb	r3, [r7, #7]
 8008ddc:	e010      	b.n	8008e00 <send_DHCP_REQUEST+0x9c>
 8008dde:	bf00      	nop
 8008de0:	20000380 	.word	0x20000380
 8008de4:	20003cdc 	.word	0x20003cdc
 8008de8:	20000370 	.word	0x20000370
 8008dec:	20003cd8 	.word	0x20003cd8
   }
   else
   {
   	ip[0] = 255;
 8008df0:	23ff      	movs	r3, #255	; 0xff
 8008df2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8008df4:	23ff      	movs	r3, #255	; 0xff
 8008df6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8008df8:	23ff      	movs	r3, #255	; 0xff
 8008dfa:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8008dfc:	23ff      	movs	r3, #255	; 0xff
 8008dfe:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8008e00:	2304      	movs	r3, #4
 8008e02:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8008e04:	4b8d      	ldr	r3, [pc, #564]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	897b      	ldrh	r3, [r7, #10]
 8008e0a:	1c59      	adds	r1, r3, #1
 8008e0c:	8179      	strh	r1, [r7, #10]
 8008e0e:	4413      	add	r3, r2
 8008e10:	2235      	movs	r2, #53	; 0x35
 8008e12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8008e16:	4b89      	ldr	r3, [pc, #548]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	897b      	ldrh	r3, [r7, #10]
 8008e1c:	1c59      	adds	r1, r3, #1
 8008e1e:	8179      	strh	r1, [r7, #10]
 8008e20:	4413      	add	r3, r2
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8008e28:	4b84      	ldr	r3, [pc, #528]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	897b      	ldrh	r3, [r7, #10]
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	8179      	strh	r1, [r7, #10]
 8008e32:	4413      	add	r3, r2
 8008e34:	2203      	movs	r2, #3
 8008e36:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8008e3a:	4b80      	ldr	r3, [pc, #512]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	897b      	ldrh	r3, [r7, #10]
 8008e40:	1c59      	adds	r1, r3, #1
 8008e42:	8179      	strh	r1, [r7, #10]
 8008e44:	4413      	add	r3, r2
 8008e46:	223d      	movs	r2, #61	; 0x3d
 8008e48:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8008e4c:	4b7b      	ldr	r3, [pc, #492]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	897b      	ldrh	r3, [r7, #10]
 8008e52:	1c59      	adds	r1, r3, #1
 8008e54:	8179      	strh	r1, [r7, #10]
 8008e56:	4413      	add	r3, r2
 8008e58:	2207      	movs	r2, #7
 8008e5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8008e5e:	4b77      	ldr	r3, [pc, #476]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	897b      	ldrh	r3, [r7, #10]
 8008e64:	1c59      	adds	r1, r3, #1
 8008e66:	8179      	strh	r1, [r7, #10]
 8008e68:	4413      	add	r3, r2
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8008e70:	4b72      	ldr	r3, [pc, #456]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	897b      	ldrh	r3, [r7, #10]
 8008e76:	1c59      	adds	r1, r3, #1
 8008e78:	8179      	strh	r1, [r7, #10]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	4b70      	ldr	r3, [pc, #448]	; (8009040 <send_DHCP_REQUEST+0x2dc>)
 8008e7e:	7819      	ldrb	r1, [r3, #0]
 8008e80:	1813      	adds	r3, r2, r0
 8008e82:	460a      	mov	r2, r1
 8008e84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8008e88:	4b6c      	ldr	r3, [pc, #432]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	897b      	ldrh	r3, [r7, #10]
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	8179      	strh	r1, [r7, #10]
 8008e92:	4618      	mov	r0, r3
 8008e94:	4b6a      	ldr	r3, [pc, #424]	; (8009040 <send_DHCP_REQUEST+0x2dc>)
 8008e96:	7859      	ldrb	r1, [r3, #1]
 8008e98:	1813      	adds	r3, r2, r0
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8008ea0:	4b66      	ldr	r3, [pc, #408]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	897b      	ldrh	r3, [r7, #10]
 8008ea6:	1c59      	adds	r1, r3, #1
 8008ea8:	8179      	strh	r1, [r7, #10]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	4b64      	ldr	r3, [pc, #400]	; (8009040 <send_DHCP_REQUEST+0x2dc>)
 8008eae:	7899      	ldrb	r1, [r3, #2]
 8008eb0:	1813      	adds	r3, r2, r0
 8008eb2:	460a      	mov	r2, r1
 8008eb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8008eb8:	4b60      	ldr	r3, [pc, #384]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	897b      	ldrh	r3, [r7, #10]
 8008ebe:	1c59      	adds	r1, r3, #1
 8008ec0:	8179      	strh	r1, [r7, #10]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	4b5e      	ldr	r3, [pc, #376]	; (8009040 <send_DHCP_REQUEST+0x2dc>)
 8008ec6:	78d9      	ldrb	r1, [r3, #3]
 8008ec8:	1813      	adds	r3, r2, r0
 8008eca:	460a      	mov	r2, r1
 8008ecc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8008ed0:	4b5a      	ldr	r3, [pc, #360]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	897b      	ldrh	r3, [r7, #10]
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	8179      	strh	r1, [r7, #10]
 8008eda:	4618      	mov	r0, r3
 8008edc:	4b58      	ldr	r3, [pc, #352]	; (8009040 <send_DHCP_REQUEST+0x2dc>)
 8008ede:	7919      	ldrb	r1, [r3, #4]
 8008ee0:	1813      	adds	r3, r2, r0
 8008ee2:	460a      	mov	r2, r1
 8008ee4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8008ee8:	4b54      	ldr	r3, [pc, #336]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	897b      	ldrh	r3, [r7, #10]
 8008eee:	1c59      	adds	r1, r3, #1
 8008ef0:	8179      	strh	r1, [r7, #10]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	4b52      	ldr	r3, [pc, #328]	; (8009040 <send_DHCP_REQUEST+0x2dc>)
 8008ef6:	7959      	ldrb	r1, [r3, #5]
 8008ef8:	1813      	adds	r3, r2, r0
 8008efa:	460a      	mov	r2, r1
 8008efc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2bff      	cmp	r3, #255	; 0xff
 8008f04:	f040 8084 	bne.w	8009010 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8008f08:	4b4c      	ldr	r3, [pc, #304]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	897b      	ldrh	r3, [r7, #10]
 8008f0e:	1c59      	adds	r1, r3, #1
 8008f10:	8179      	strh	r1, [r7, #10]
 8008f12:	4413      	add	r3, r2
 8008f14:	2232      	movs	r2, #50	; 0x32
 8008f16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8008f1a:	4b48      	ldr	r3, [pc, #288]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	897b      	ldrh	r3, [r7, #10]
 8008f20:	1c59      	adds	r1, r3, #1
 8008f22:	8179      	strh	r1, [r7, #10]
 8008f24:	4413      	add	r3, r2
 8008f26:	2204      	movs	r2, #4
 8008f28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8008f2c:	4b43      	ldr	r3, [pc, #268]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	897b      	ldrh	r3, [r7, #10]
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	8179      	strh	r1, [r7, #10]
 8008f36:	4618      	mov	r0, r3
 8008f38:	4b42      	ldr	r3, [pc, #264]	; (8009044 <send_DHCP_REQUEST+0x2e0>)
 8008f3a:	7819      	ldrb	r1, [r3, #0]
 8008f3c:	1813      	adds	r3, r2, r0
 8008f3e:	460a      	mov	r2, r1
 8008f40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8008f44:	4b3d      	ldr	r3, [pc, #244]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	897b      	ldrh	r3, [r7, #10]
 8008f4a:	1c59      	adds	r1, r3, #1
 8008f4c:	8179      	strh	r1, [r7, #10]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	4b3c      	ldr	r3, [pc, #240]	; (8009044 <send_DHCP_REQUEST+0x2e0>)
 8008f52:	7859      	ldrb	r1, [r3, #1]
 8008f54:	1813      	adds	r3, r2, r0
 8008f56:	460a      	mov	r2, r1
 8008f58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8008f5c:	4b37      	ldr	r3, [pc, #220]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	897b      	ldrh	r3, [r7, #10]
 8008f62:	1c59      	adds	r1, r3, #1
 8008f64:	8179      	strh	r1, [r7, #10]
 8008f66:	4618      	mov	r0, r3
 8008f68:	4b36      	ldr	r3, [pc, #216]	; (8009044 <send_DHCP_REQUEST+0x2e0>)
 8008f6a:	7899      	ldrb	r1, [r3, #2]
 8008f6c:	1813      	adds	r3, r2, r0
 8008f6e:	460a      	mov	r2, r1
 8008f70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8008f74:	4b31      	ldr	r3, [pc, #196]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	897b      	ldrh	r3, [r7, #10]
 8008f7a:	1c59      	adds	r1, r3, #1
 8008f7c:	8179      	strh	r1, [r7, #10]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	4b30      	ldr	r3, [pc, #192]	; (8009044 <send_DHCP_REQUEST+0x2e0>)
 8008f82:	78d9      	ldrb	r1, [r3, #3]
 8008f84:	1813      	adds	r3, r2, r0
 8008f86:	460a      	mov	r2, r1
 8008f88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8008f8c:	4b2b      	ldr	r3, [pc, #172]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	897b      	ldrh	r3, [r7, #10]
 8008f92:	1c59      	adds	r1, r3, #1
 8008f94:	8179      	strh	r1, [r7, #10]
 8008f96:	4413      	add	r3, r2
 8008f98:	2236      	movs	r2, #54	; 0x36
 8008f9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8008f9e:	4b27      	ldr	r3, [pc, #156]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	897b      	ldrh	r3, [r7, #10]
 8008fa4:	1c59      	adds	r1, r3, #1
 8008fa6:	8179      	strh	r1, [r7, #10]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2204      	movs	r2, #4
 8008fac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8008fb0:	4b22      	ldr	r3, [pc, #136]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	897b      	ldrh	r3, [r7, #10]
 8008fb6:	1c59      	adds	r1, r3, #1
 8008fb8:	8179      	strh	r1, [r7, #10]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	4b22      	ldr	r3, [pc, #136]	; (8009048 <send_DHCP_REQUEST+0x2e4>)
 8008fbe:	7819      	ldrb	r1, [r3, #0]
 8008fc0:	1813      	adds	r3, r2, r0
 8008fc2:	460a      	mov	r2, r1
 8008fc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8008fc8:	4b1c      	ldr	r3, [pc, #112]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	897b      	ldrh	r3, [r7, #10]
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	8179      	strh	r1, [r7, #10]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	4b1c      	ldr	r3, [pc, #112]	; (8009048 <send_DHCP_REQUEST+0x2e4>)
 8008fd6:	7859      	ldrb	r1, [r3, #1]
 8008fd8:	1813      	adds	r3, r2, r0
 8008fda:	460a      	mov	r2, r1
 8008fdc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8008fe0:	4b16      	ldr	r3, [pc, #88]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	897b      	ldrh	r3, [r7, #10]
 8008fe6:	1c59      	adds	r1, r3, #1
 8008fe8:	8179      	strh	r1, [r7, #10]
 8008fea:	4618      	mov	r0, r3
 8008fec:	4b16      	ldr	r3, [pc, #88]	; (8009048 <send_DHCP_REQUEST+0x2e4>)
 8008fee:	7899      	ldrb	r1, [r3, #2]
 8008ff0:	1813      	adds	r3, r2, r0
 8008ff2:	460a      	mov	r2, r1
 8008ff4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8008ff8:	4b10      	ldr	r3, [pc, #64]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	897b      	ldrh	r3, [r7, #10]
 8008ffe:	1c59      	adds	r1, r3, #1
 8009000:	8179      	strh	r1, [r7, #10]
 8009002:	4618      	mov	r0, r3
 8009004:	4b10      	ldr	r3, [pc, #64]	; (8009048 <send_DHCP_REQUEST+0x2e4>)
 8009006:	78d9      	ldrb	r1, [r3, #3]
 8009008:	1813      	adds	r3, r2, r0
 800900a:	460a      	mov	r2, r1
 800900c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8009010:	4b0a      	ldr	r3, [pc, #40]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	897b      	ldrh	r3, [r7, #10]
 8009016:	1c59      	adds	r1, r3, #1
 8009018:	8179      	strh	r1, [r7, #10]
 800901a:	4413      	add	r3, r2
 800901c:	220c      	movs	r2, #12
 800901e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8009022:	4b06      	ldr	r3, [pc, #24]	; (800903c <send_DHCP_REQUEST+0x2d8>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	897b      	ldrh	r3, [r7, #10]
 8009028:	1c59      	adds	r1, r3, #1
 800902a:	8179      	strh	r1, [r7, #10]
 800902c:	4413      	add	r3, r2
 800902e:	2200      	movs	r2, #0
 8009030:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	e019      	b.n	800906e <send_DHCP_REQUEST+0x30a>
 800903a:	bf00      	nop
 800903c:	20003cdc 	.word	0x20003cdc
 8009040:	20003cc8 	.word	0x20003cc8
 8009044:	20000370 	.word	0x20000370
 8009048:	20003cd8 	.word	0x20003cd8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800904c:	4b86      	ldr	r3, [pc, #536]	; (8009268 <send_DHCP_REQUEST+0x504>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	897b      	ldrh	r3, [r7, #10]
 8009052:	1c59      	adds	r1, r3, #1
 8009054:	8179      	strh	r1, [r7, #10]
 8009056:	4618      	mov	r0, r3
 8009058:	4984      	ldr	r1, [pc, #528]	; (800926c <send_DHCP_REQUEST+0x508>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	440b      	add	r3, r1
 800905e:	7819      	ldrb	r1, [r3, #0]
 8009060:	1813      	adds	r3, r2, r0
 8009062:	460a      	mov	r2, r1
 8009064:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3301      	adds	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	4a7f      	ldr	r2, [pc, #508]	; (800926c <send_DHCP_REQUEST+0x508>)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e8      	bne.n	800904c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800907a:	4b7d      	ldr	r3, [pc, #500]	; (8009270 <send_DHCP_REQUEST+0x50c>)
 800907c:	78db      	ldrb	r3, [r3, #3]
 800907e:	091b      	lsrs	r3, r3, #4
 8009080:	b2da      	uxtb	r2, r3
 8009082:	4b79      	ldr	r3, [pc, #484]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009084:	681c      	ldr	r4, [r3, #0]
 8009086:	897b      	ldrh	r3, [r7, #10]
 8009088:	1c59      	adds	r1, r3, #1
 800908a:	8179      	strh	r1, [r7, #10]
 800908c:	461d      	mov	r5, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f000 ff46 	bl	8009f20 <NibbleToHex>
 8009094:	4603      	mov	r3, r0
 8009096:	461a      	mov	r2, r3
 8009098:	1963      	adds	r3, r4, r5
 800909a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800909e:	4b74      	ldr	r3, [pc, #464]	; (8009270 <send_DHCP_REQUEST+0x50c>)
 80090a0:	78da      	ldrb	r2, [r3, #3]
 80090a2:	4b71      	ldr	r3, [pc, #452]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80090a4:	681c      	ldr	r4, [r3, #0]
 80090a6:	897b      	ldrh	r3, [r7, #10]
 80090a8:	1c59      	adds	r1, r3, #1
 80090aa:	8179      	strh	r1, [r7, #10]
 80090ac:	461d      	mov	r5, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f000 ff36 	bl	8009f20 <NibbleToHex>
 80090b4:	4603      	mov	r3, r0
 80090b6:	461a      	mov	r2, r3
 80090b8:	1963      	adds	r3, r4, r5
 80090ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80090be:	4b6c      	ldr	r3, [pc, #432]	; (8009270 <send_DHCP_REQUEST+0x50c>)
 80090c0:	791b      	ldrb	r3, [r3, #4]
 80090c2:	091b      	lsrs	r3, r3, #4
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	4b68      	ldr	r3, [pc, #416]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80090c8:	681c      	ldr	r4, [r3, #0]
 80090ca:	897b      	ldrh	r3, [r7, #10]
 80090cc:	1c59      	adds	r1, r3, #1
 80090ce:	8179      	strh	r1, [r7, #10]
 80090d0:	461d      	mov	r5, r3
 80090d2:	4610      	mov	r0, r2
 80090d4:	f000 ff24 	bl	8009f20 <NibbleToHex>
 80090d8:	4603      	mov	r3, r0
 80090da:	461a      	mov	r2, r3
 80090dc:	1963      	adds	r3, r4, r5
 80090de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80090e2:	4b63      	ldr	r3, [pc, #396]	; (8009270 <send_DHCP_REQUEST+0x50c>)
 80090e4:	791a      	ldrb	r2, [r3, #4]
 80090e6:	4b60      	ldr	r3, [pc, #384]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80090e8:	681c      	ldr	r4, [r3, #0]
 80090ea:	897b      	ldrh	r3, [r7, #10]
 80090ec:	1c59      	adds	r1, r3, #1
 80090ee:	8179      	strh	r1, [r7, #10]
 80090f0:	461d      	mov	r5, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f000 ff14 	bl	8009f20 <NibbleToHex>
 80090f8:	4603      	mov	r3, r0
 80090fa:	461a      	mov	r2, r3
 80090fc:	1963      	adds	r3, r4, r5
 80090fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8009102:	4b5b      	ldr	r3, [pc, #364]	; (8009270 <send_DHCP_REQUEST+0x50c>)
 8009104:	795b      	ldrb	r3, [r3, #5]
 8009106:	091b      	lsrs	r3, r3, #4
 8009108:	b2da      	uxtb	r2, r3
 800910a:	4b57      	ldr	r3, [pc, #348]	; (8009268 <send_DHCP_REQUEST+0x504>)
 800910c:	681c      	ldr	r4, [r3, #0]
 800910e:	897b      	ldrh	r3, [r7, #10]
 8009110:	1c59      	adds	r1, r3, #1
 8009112:	8179      	strh	r1, [r7, #10]
 8009114:	461d      	mov	r5, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f000 ff02 	bl	8009f20 <NibbleToHex>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	1963      	adds	r3, r4, r5
 8009122:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8009126:	4b52      	ldr	r3, [pc, #328]	; (8009270 <send_DHCP_REQUEST+0x50c>)
 8009128:	795a      	ldrb	r2, [r3, #5]
 800912a:	4b4f      	ldr	r3, [pc, #316]	; (8009268 <send_DHCP_REQUEST+0x504>)
 800912c:	681c      	ldr	r4, [r3, #0]
 800912e:	897b      	ldrh	r3, [r7, #10]
 8009130:	1c59      	adds	r1, r3, #1
 8009132:	8179      	strh	r1, [r7, #10]
 8009134:	461d      	mov	r5, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f000 fef2 	bl	8009f20 <NibbleToHex>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	1963      	adds	r3, r4, r5
 8009142:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	b2d9      	uxtb	r1, r3
 800914a:	4b47      	ldr	r3, [pc, #284]	; (8009268 <send_DHCP_REQUEST+0x504>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	8978      	ldrh	r0, [r7, #10]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3307      	adds	r3, #7
 8009154:	1ac3      	subs	r3, r0, r3
 8009156:	3106      	adds	r1, #6
 8009158:	b2c9      	uxtb	r1, r1
 800915a:	4413      	add	r3, r2
 800915c:	460a      	mov	r2, r1
 800915e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8009162:	4b41      	ldr	r3, [pc, #260]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	897b      	ldrh	r3, [r7, #10]
 8009168:	1c59      	adds	r1, r3, #1
 800916a:	8179      	strh	r1, [r7, #10]
 800916c:	4413      	add	r3, r2
 800916e:	2237      	movs	r2, #55	; 0x37
 8009170:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8009174:	4b3c      	ldr	r3, [pc, #240]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	897b      	ldrh	r3, [r7, #10]
 800917a:	1c59      	adds	r1, r3, #1
 800917c:	8179      	strh	r1, [r7, #10]
 800917e:	4413      	add	r3, r2
 8009180:	2208      	movs	r2, #8
 8009182:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8009186:	4b38      	ldr	r3, [pc, #224]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	897b      	ldrh	r3, [r7, #10]
 800918c:	1c59      	adds	r1, r3, #1
 800918e:	8179      	strh	r1, [r7, #10]
 8009190:	4413      	add	r3, r2
 8009192:	2201      	movs	r2, #1
 8009194:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8009198:	4b33      	ldr	r3, [pc, #204]	; (8009268 <send_DHCP_REQUEST+0x504>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	897b      	ldrh	r3, [r7, #10]
 800919e:	1c59      	adds	r1, r3, #1
 80091a0:	8179      	strh	r1, [r7, #10]
 80091a2:	4413      	add	r3, r2
 80091a4:	2203      	movs	r2, #3
 80091a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80091aa:	4b2f      	ldr	r3, [pc, #188]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	897b      	ldrh	r3, [r7, #10]
 80091b0:	1c59      	adds	r1, r3, #1
 80091b2:	8179      	strh	r1, [r7, #10]
 80091b4:	4413      	add	r3, r2
 80091b6:	2206      	movs	r2, #6
 80091b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80091bc:	4b2a      	ldr	r3, [pc, #168]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	897b      	ldrh	r3, [r7, #10]
 80091c2:	1c59      	adds	r1, r3, #1
 80091c4:	8179      	strh	r1, [r7, #10]
 80091c6:	4413      	add	r3, r2
 80091c8:	220f      	movs	r2, #15
 80091ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80091ce:	4b26      	ldr	r3, [pc, #152]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	897b      	ldrh	r3, [r7, #10]
 80091d4:	1c59      	adds	r1, r3, #1
 80091d6:	8179      	strh	r1, [r7, #10]
 80091d8:	4413      	add	r3, r2
 80091da:	223a      	movs	r2, #58	; 0x3a
 80091dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80091e0:	4b21      	ldr	r3, [pc, #132]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	897b      	ldrh	r3, [r7, #10]
 80091e6:	1c59      	adds	r1, r3, #1
 80091e8:	8179      	strh	r1, [r7, #10]
 80091ea:	4413      	add	r3, r2
 80091ec:	223b      	movs	r2, #59	; 0x3b
 80091ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80091f2:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <send_DHCP_REQUEST+0x504>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	897b      	ldrh	r3, [r7, #10]
 80091f8:	1c59      	adds	r1, r3, #1
 80091fa:	8179      	strh	r1, [r7, #10]
 80091fc:	4413      	add	r3, r2
 80091fe:	221f      	movs	r2, #31
 8009200:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8009204:	4b18      	ldr	r3, [pc, #96]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	897b      	ldrh	r3, [r7, #10]
 800920a:	1c59      	adds	r1, r3, #1
 800920c:	8179      	strh	r1, [r7, #10]
 800920e:	4413      	add	r3, r2
 8009210:	2221      	movs	r2, #33	; 0x21
 8009212:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	897b      	ldrh	r3, [r7, #10]
 800921c:	1c59      	adds	r1, r3, #1
 800921e:	8179      	strh	r1, [r7, #10]
 8009220:	4413      	add	r3, r2
 8009222:	22ff      	movs	r2, #255	; 0xff
 8009224:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8009228:	897b      	ldrh	r3, [r7, #10]
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e009      	b.n	8009242 <send_DHCP_REQUEST+0x4de>
 800922e:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	33ec      	adds	r3, #236	; 0xec
 8009238:	2200      	movs	r2, #0
 800923a:	701a      	strb	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8009248:	dbf1      	blt.n	800922e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800924a:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <send_DHCP_REQUEST+0x510>)
 800924c:	7818      	ldrb	r0, [r3, #0]
 800924e:	4b06      	ldr	r3, [pc, #24]	; (8009268 <send_DHCP_REQUEST+0x504>)
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	1d3b      	adds	r3, r7, #4
 8009254:	2243      	movs	r2, #67	; 0x43
 8009256:	9200      	str	r2, [sp, #0]
 8009258:	f44f 7209 	mov.w	r2, #548	; 0x224
 800925c:	f7fe fa12 	bl	8007684 <sendto>

}
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bdb0      	pop	{r4, r5, r7, pc}
 8009268:	20003cdc 	.word	0x20003cdc
 800926c:	200000d8 	.word	0x200000d8
 8009270:	20003cc8 	.word	0x20003cc8
 8009274:	20003ce0 	.word	0x20003ce0

08009278 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8009282:	f7ff fab3 	bl	80087ec <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8009286:	2304      	movs	r3, #4
 8009288:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800928a:	4b9f      	ldr	r3, [pc, #636]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	330a      	adds	r3, #10
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8009294:	4b9c      	ldr	r3, [pc, #624]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	330a      	adds	r3, #10
 800929a:	3301      	adds	r3, #1
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80092a0:	4b99      	ldr	r3, [pc, #612]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	897b      	ldrh	r3, [r7, #10]
 80092a6:	1c59      	adds	r1, r3, #1
 80092a8:	8179      	strh	r1, [r7, #10]
 80092aa:	4413      	add	r3, r2
 80092ac:	2235      	movs	r2, #53	; 0x35
 80092ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80092b2:	4b95      	ldr	r3, [pc, #596]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	897b      	ldrh	r3, [r7, #10]
 80092b8:	1c59      	adds	r1, r3, #1
 80092ba:	8179      	strh	r1, [r7, #10]
 80092bc:	4413      	add	r3, r2
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80092c4:	4b90      	ldr	r3, [pc, #576]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	897b      	ldrh	r3, [r7, #10]
 80092ca:	1c59      	adds	r1, r3, #1
 80092cc:	8179      	strh	r1, [r7, #10]
 80092ce:	4413      	add	r3, r2
 80092d0:	2204      	movs	r2, #4
 80092d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80092d6:	4b8c      	ldr	r3, [pc, #560]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	897b      	ldrh	r3, [r7, #10]
 80092dc:	1c59      	adds	r1, r3, #1
 80092de:	8179      	strh	r1, [r7, #10]
 80092e0:	4413      	add	r3, r2
 80092e2:	223d      	movs	r2, #61	; 0x3d
 80092e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80092e8:	4b87      	ldr	r3, [pc, #540]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	897b      	ldrh	r3, [r7, #10]
 80092ee:	1c59      	adds	r1, r3, #1
 80092f0:	8179      	strh	r1, [r7, #10]
 80092f2:	4413      	add	r3, r2
 80092f4:	2207      	movs	r2, #7
 80092f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80092fa:	4b83      	ldr	r3, [pc, #524]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	897b      	ldrh	r3, [r7, #10]
 8009300:	1c59      	adds	r1, r3, #1
 8009302:	8179      	strh	r1, [r7, #10]
 8009304:	4413      	add	r3, r2
 8009306:	2201      	movs	r2, #1
 8009308:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800930c:	4b7e      	ldr	r3, [pc, #504]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	897b      	ldrh	r3, [r7, #10]
 8009312:	1c59      	adds	r1, r3, #1
 8009314:	8179      	strh	r1, [r7, #10]
 8009316:	4618      	mov	r0, r3
 8009318:	4b7c      	ldr	r3, [pc, #496]	; (800950c <send_DHCP_DECLINE+0x294>)
 800931a:	7819      	ldrb	r1, [r3, #0]
 800931c:	1813      	adds	r3, r2, r0
 800931e:	460a      	mov	r2, r1
 8009320:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8009324:	4b78      	ldr	r3, [pc, #480]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	897b      	ldrh	r3, [r7, #10]
 800932a:	1c59      	adds	r1, r3, #1
 800932c:	8179      	strh	r1, [r7, #10]
 800932e:	4618      	mov	r0, r3
 8009330:	4b76      	ldr	r3, [pc, #472]	; (800950c <send_DHCP_DECLINE+0x294>)
 8009332:	7859      	ldrb	r1, [r3, #1]
 8009334:	1813      	adds	r3, r2, r0
 8009336:	460a      	mov	r2, r1
 8009338:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800933c:	4b72      	ldr	r3, [pc, #456]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	897b      	ldrh	r3, [r7, #10]
 8009342:	1c59      	adds	r1, r3, #1
 8009344:	8179      	strh	r1, [r7, #10]
 8009346:	4618      	mov	r0, r3
 8009348:	4b70      	ldr	r3, [pc, #448]	; (800950c <send_DHCP_DECLINE+0x294>)
 800934a:	7899      	ldrb	r1, [r3, #2]
 800934c:	1813      	adds	r3, r2, r0
 800934e:	460a      	mov	r2, r1
 8009350:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8009354:	4b6c      	ldr	r3, [pc, #432]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	897b      	ldrh	r3, [r7, #10]
 800935a:	1c59      	adds	r1, r3, #1
 800935c:	8179      	strh	r1, [r7, #10]
 800935e:	4618      	mov	r0, r3
 8009360:	4b6a      	ldr	r3, [pc, #424]	; (800950c <send_DHCP_DECLINE+0x294>)
 8009362:	78d9      	ldrb	r1, [r3, #3]
 8009364:	1813      	adds	r3, r2, r0
 8009366:	460a      	mov	r2, r1
 8009368:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800936c:	4b66      	ldr	r3, [pc, #408]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	897b      	ldrh	r3, [r7, #10]
 8009372:	1c59      	adds	r1, r3, #1
 8009374:	8179      	strh	r1, [r7, #10]
 8009376:	4618      	mov	r0, r3
 8009378:	4b64      	ldr	r3, [pc, #400]	; (800950c <send_DHCP_DECLINE+0x294>)
 800937a:	7919      	ldrb	r1, [r3, #4]
 800937c:	1813      	adds	r3, r2, r0
 800937e:	460a      	mov	r2, r1
 8009380:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8009384:	4b60      	ldr	r3, [pc, #384]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	897b      	ldrh	r3, [r7, #10]
 800938a:	1c59      	adds	r1, r3, #1
 800938c:	8179      	strh	r1, [r7, #10]
 800938e:	4618      	mov	r0, r3
 8009390:	4b5e      	ldr	r3, [pc, #376]	; (800950c <send_DHCP_DECLINE+0x294>)
 8009392:	7959      	ldrb	r1, [r3, #5]
 8009394:	1813      	adds	r3, r2, r0
 8009396:	460a      	mov	r2, r1
 8009398:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800939c:	4b5a      	ldr	r3, [pc, #360]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	897b      	ldrh	r3, [r7, #10]
 80093a2:	1c59      	adds	r1, r3, #1
 80093a4:	8179      	strh	r1, [r7, #10]
 80093a6:	4413      	add	r3, r2
 80093a8:	2232      	movs	r2, #50	; 0x32
 80093aa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80093ae:	4b56      	ldr	r3, [pc, #344]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	897b      	ldrh	r3, [r7, #10]
 80093b4:	1c59      	adds	r1, r3, #1
 80093b6:	8179      	strh	r1, [r7, #10]
 80093b8:	4413      	add	r3, r2
 80093ba:	2204      	movs	r2, #4
 80093bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80093c0:	4b51      	ldr	r3, [pc, #324]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	897b      	ldrh	r3, [r7, #10]
 80093c6:	1c59      	adds	r1, r3, #1
 80093c8:	8179      	strh	r1, [r7, #10]
 80093ca:	4618      	mov	r0, r3
 80093cc:	4b50      	ldr	r3, [pc, #320]	; (8009510 <send_DHCP_DECLINE+0x298>)
 80093ce:	7819      	ldrb	r1, [r3, #0]
 80093d0:	1813      	adds	r3, r2, r0
 80093d2:	460a      	mov	r2, r1
 80093d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80093d8:	4b4b      	ldr	r3, [pc, #300]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	897b      	ldrh	r3, [r7, #10]
 80093de:	1c59      	adds	r1, r3, #1
 80093e0:	8179      	strh	r1, [r7, #10]
 80093e2:	4618      	mov	r0, r3
 80093e4:	4b4a      	ldr	r3, [pc, #296]	; (8009510 <send_DHCP_DECLINE+0x298>)
 80093e6:	7859      	ldrb	r1, [r3, #1]
 80093e8:	1813      	adds	r3, r2, r0
 80093ea:	460a      	mov	r2, r1
 80093ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80093f0:	4b45      	ldr	r3, [pc, #276]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	897b      	ldrh	r3, [r7, #10]
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	8179      	strh	r1, [r7, #10]
 80093fa:	4618      	mov	r0, r3
 80093fc:	4b44      	ldr	r3, [pc, #272]	; (8009510 <send_DHCP_DECLINE+0x298>)
 80093fe:	7899      	ldrb	r1, [r3, #2]
 8009400:	1813      	adds	r3, r2, r0
 8009402:	460a      	mov	r2, r1
 8009404:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8009408:	4b3f      	ldr	r3, [pc, #252]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	897b      	ldrh	r3, [r7, #10]
 800940e:	1c59      	adds	r1, r3, #1
 8009410:	8179      	strh	r1, [r7, #10]
 8009412:	4618      	mov	r0, r3
 8009414:	4b3e      	ldr	r3, [pc, #248]	; (8009510 <send_DHCP_DECLINE+0x298>)
 8009416:	78d9      	ldrb	r1, [r3, #3]
 8009418:	1813      	adds	r3, r2, r0
 800941a:	460a      	mov	r2, r1
 800941c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8009420:	4b39      	ldr	r3, [pc, #228]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	897b      	ldrh	r3, [r7, #10]
 8009426:	1c59      	adds	r1, r3, #1
 8009428:	8179      	strh	r1, [r7, #10]
 800942a:	4413      	add	r3, r2
 800942c:	2236      	movs	r2, #54	; 0x36
 800942e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8009432:	4b35      	ldr	r3, [pc, #212]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	897b      	ldrh	r3, [r7, #10]
 8009438:	1c59      	adds	r1, r3, #1
 800943a:	8179      	strh	r1, [r7, #10]
 800943c:	4413      	add	r3, r2
 800943e:	2204      	movs	r2, #4
 8009440:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8009444:	4b30      	ldr	r3, [pc, #192]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	897b      	ldrh	r3, [r7, #10]
 800944a:	1c59      	adds	r1, r3, #1
 800944c:	8179      	strh	r1, [r7, #10]
 800944e:	4618      	mov	r0, r3
 8009450:	4b30      	ldr	r3, [pc, #192]	; (8009514 <send_DHCP_DECLINE+0x29c>)
 8009452:	7819      	ldrb	r1, [r3, #0]
 8009454:	1813      	adds	r3, r2, r0
 8009456:	460a      	mov	r2, r1
 8009458:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800945c:	4b2a      	ldr	r3, [pc, #168]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	897b      	ldrh	r3, [r7, #10]
 8009462:	1c59      	adds	r1, r3, #1
 8009464:	8179      	strh	r1, [r7, #10]
 8009466:	4618      	mov	r0, r3
 8009468:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <send_DHCP_DECLINE+0x29c>)
 800946a:	7859      	ldrb	r1, [r3, #1]
 800946c:	1813      	adds	r3, r2, r0
 800946e:	460a      	mov	r2, r1
 8009470:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8009474:	4b24      	ldr	r3, [pc, #144]	; (8009508 <send_DHCP_DECLINE+0x290>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	897b      	ldrh	r3, [r7, #10]
 800947a:	1c59      	adds	r1, r3, #1
 800947c:	8179      	strh	r1, [r7, #10]
 800947e:	4618      	mov	r0, r3
 8009480:	4b24      	ldr	r3, [pc, #144]	; (8009514 <send_DHCP_DECLINE+0x29c>)
 8009482:	7899      	ldrb	r1, [r3, #2]
 8009484:	1813      	adds	r3, r2, r0
 8009486:	460a      	mov	r2, r1
 8009488:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800948c:	4b1e      	ldr	r3, [pc, #120]	; (8009508 <send_DHCP_DECLINE+0x290>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	897b      	ldrh	r3, [r7, #10]
 8009492:	1c59      	adds	r1, r3, #1
 8009494:	8179      	strh	r1, [r7, #10]
 8009496:	4618      	mov	r0, r3
 8009498:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <send_DHCP_DECLINE+0x29c>)
 800949a:	78d9      	ldrb	r1, [r3, #3]
 800949c:	1813      	adds	r3, r2, r0
 800949e:	460a      	mov	r2, r1
 80094a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80094a4:	4b18      	ldr	r3, [pc, #96]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	897b      	ldrh	r3, [r7, #10]
 80094aa:	1c59      	adds	r1, r3, #1
 80094ac:	8179      	strh	r1, [r7, #10]
 80094ae:	4413      	add	r3, r2
 80094b0:	22ff      	movs	r2, #255	; 0xff
 80094b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80094b6:	897b      	ldrh	r3, [r7, #10]
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e009      	b.n	80094d0 <send_DHCP_DECLINE+0x258>
 80094bc:	4b12      	ldr	r3, [pc, #72]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	33ec      	adds	r3, #236	; 0xec
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3301      	adds	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80094d6:	dbf1      	blt.n	80094bc <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80094d8:	23ff      	movs	r3, #255	; 0xff
 80094da:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80094dc:	23ff      	movs	r3, #255	; 0xff
 80094de:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80094e0:	23ff      	movs	r3, #255	; 0xff
 80094e2:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80094e4:	23ff      	movs	r3, #255	; 0xff
 80094e6:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80094e8:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <send_DHCP_DECLINE+0x2a0>)
 80094ea:	7818      	ldrb	r0, [r3, #0]
 80094ec:	4b06      	ldr	r3, [pc, #24]	; (8009508 <send_DHCP_DECLINE+0x290>)
 80094ee:	6819      	ldr	r1, [r3, #0]
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	2243      	movs	r2, #67	; 0x43
 80094f4:	9200      	str	r2, [sp, #0]
 80094f6:	f44f 7209 	mov.w	r2, #548	; 0x224
 80094fa:	f7fe f8c3 	bl	8007684 <sendto>
}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20003cdc 	.word	0x20003cdc
 800950c:	20003cc8 	.word	0x20003cc8
 8009510:	20000370 	.word	0x20000370
 8009514:	20003cd8 	.word	0x20003cd8
 8009518:	20003ce0 	.word	0x20003ce0

0800951c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800951c:	b590      	push	{r4, r7, lr}
 800951e:	b089      	sub	sp, #36	; 0x24
 8009520:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8009526:	4ba1      	ldr	r3, [pc, #644]	; (80097ac <parseDHCPMSG+0x290>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f7fd fddb 	bl	80070e6 <getSn_RX_RSR>
 8009530:	4603      	mov	r3, r0
 8009532:	823b      	strh	r3, [r7, #16]
 8009534:	8a3b      	ldrh	r3, [r7, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d011      	beq.n	800955e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800953a:	4b9c      	ldr	r3, [pc, #624]	; (80097ac <parseDHCPMSG+0x290>)
 800953c:	7818      	ldrb	r0, [r3, #0]
 800953e:	4b9c      	ldr	r3, [pc, #624]	; (80097b0 <parseDHCPMSG+0x294>)
 8009540:	6819      	ldr	r1, [r3, #0]
 8009542:	1d3c      	adds	r4, r7, #4
 8009544:	8a3a      	ldrh	r2, [r7, #16]
 8009546:	1cbb      	adds	r3, r7, #2
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4623      	mov	r3, r4
 800954c:	f7fe f9d0 	bl	80078f0 <recvfrom>
 8009550:	4603      	mov	r3, r0
 8009552:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8009554:	887b      	ldrh	r3, [r7, #2]
 8009556:	2b43      	cmp	r3, #67	; 0x43
 8009558:	f040 81ed 	bne.w	8009936 <parseDHCPMSG+0x41a>
 800955c:	e001      	b.n	8009562 <parseDHCPMSG+0x46>
   else return 0;
 800955e:	2300      	movs	r3, #0
 8009560:	e1eb      	b.n	800993a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8009562:	4b93      	ldr	r3, [pc, #588]	; (80097b0 <parseDHCPMSG+0x294>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	7f1a      	ldrb	r2, [r3, #28]
 8009568:	4b92      	ldr	r3, [pc, #584]	; (80097b4 <parseDHCPMSG+0x298>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d124      	bne.n	80095ba <parseDHCPMSG+0x9e>
 8009570:	4b8f      	ldr	r3, [pc, #572]	; (80097b0 <parseDHCPMSG+0x294>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	7f5a      	ldrb	r2, [r3, #29]
 8009576:	4b8f      	ldr	r3, [pc, #572]	; (80097b4 <parseDHCPMSG+0x298>)
 8009578:	785b      	ldrb	r3, [r3, #1]
 800957a:	429a      	cmp	r2, r3
 800957c:	d11d      	bne.n	80095ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800957e:	4b8c      	ldr	r3, [pc, #560]	; (80097b0 <parseDHCPMSG+0x294>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	7f9a      	ldrb	r2, [r3, #30]
 8009584:	4b8b      	ldr	r3, [pc, #556]	; (80097b4 <parseDHCPMSG+0x298>)
 8009586:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8009588:	429a      	cmp	r2, r3
 800958a:	d116      	bne.n	80095ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800958c:	4b88      	ldr	r3, [pc, #544]	; (80097b0 <parseDHCPMSG+0x294>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	7fda      	ldrb	r2, [r3, #31]
 8009592:	4b88      	ldr	r3, [pc, #544]	; (80097b4 <parseDHCPMSG+0x298>)
 8009594:	78db      	ldrb	r3, [r3, #3]
 8009596:	429a      	cmp	r2, r3
 8009598:	d10f      	bne.n	80095ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800959a:	4b85      	ldr	r3, [pc, #532]	; (80097b0 <parseDHCPMSG+0x294>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f893 2020 	ldrb.w	r2, [r3, #32]
 80095a2:	4b84      	ldr	r3, [pc, #528]	; (80097b4 <parseDHCPMSG+0x298>)
 80095a4:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d107      	bne.n	80095ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80095aa:	4b81      	ldr	r3, [pc, #516]	; (80097b0 <parseDHCPMSG+0x294>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80095b2:	4b80      	ldr	r3, [pc, #512]	; (80097b4 <parseDHCPMSG+0x298>)
 80095b4:	795b      	ldrb	r3, [r3, #5]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d001      	beq.n	80095be <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e1bd      	b.n	800993a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80095be:	4b7e      	ldr	r3, [pc, #504]	; (80097b8 <parseDHCPMSG+0x29c>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <parseDHCPMSG+0xc2>
 80095c6:	4b7c      	ldr	r3, [pc, #496]	; (80097b8 <parseDHCPMSG+0x29c>)
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d107      	bne.n	80095de <parseDHCPMSG+0xc2>
 80095ce:	4b7a      	ldr	r3, [pc, #488]	; (80097b8 <parseDHCPMSG+0x29c>)
 80095d0:	789b      	ldrb	r3, [r3, #2]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d103      	bne.n	80095de <parseDHCPMSG+0xc2>
 80095d6:	4b78      	ldr	r3, [pc, #480]	; (80097b8 <parseDHCPMSG+0x29c>)
 80095d8:	78db      	ldrb	r3, [r3, #3]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d029      	beq.n	8009632 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80095de:	793a      	ldrb	r2, [r7, #4]
 80095e0:	4b75      	ldr	r3, [pc, #468]	; (80097b8 <parseDHCPMSG+0x29c>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d10e      	bne.n	8009606 <parseDHCPMSG+0xea>
 80095e8:	797a      	ldrb	r2, [r7, #5]
 80095ea:	4b73      	ldr	r3, [pc, #460]	; (80097b8 <parseDHCPMSG+0x29c>)
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d109      	bne.n	8009606 <parseDHCPMSG+0xea>
 80095f2:	79ba      	ldrb	r2, [r7, #6]
 80095f4:	4b70      	ldr	r3, [pc, #448]	; (80097b8 <parseDHCPMSG+0x29c>)
 80095f6:	789b      	ldrb	r3, [r3, #2]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d104      	bne.n	8009606 <parseDHCPMSG+0xea>
 80095fc:	79fa      	ldrb	r2, [r7, #7]
 80095fe:	4b6e      	ldr	r3, [pc, #440]	; (80097b8 <parseDHCPMSG+0x29c>)
 8009600:	78db      	ldrb	r3, [r3, #3]
 8009602:	429a      	cmp	r2, r3
 8009604:	d015      	beq.n	8009632 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8009606:	793a      	ldrb	r2, [r7, #4]
 8009608:	4b6c      	ldr	r3, [pc, #432]	; (80097bc <parseDHCPMSG+0x2a0>)
 800960a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800960c:	429a      	cmp	r2, r3
 800960e:	d10e      	bne.n	800962e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8009610:	797a      	ldrb	r2, [r7, #5]
 8009612:	4b6a      	ldr	r3, [pc, #424]	; (80097bc <parseDHCPMSG+0x2a0>)
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	429a      	cmp	r2, r3
 8009618:	d109      	bne.n	800962e <parseDHCPMSG+0x112>
 800961a:	79ba      	ldrb	r2, [r7, #6]
 800961c:	4b67      	ldr	r3, [pc, #412]	; (80097bc <parseDHCPMSG+0x2a0>)
 800961e:	789b      	ldrb	r3, [r3, #2]
 8009620:	429a      	cmp	r2, r3
 8009622:	d104      	bne.n	800962e <parseDHCPMSG+0x112>
 8009624:	79fa      	ldrb	r2, [r7, #7]
 8009626:	4b65      	ldr	r3, [pc, #404]	; (80097bc <parseDHCPMSG+0x2a0>)
 8009628:	78db      	ldrb	r3, [r3, #3]
 800962a:	429a      	cmp	r2, r3
 800962c:	d001      	beq.n	8009632 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800962e:	2300      	movs	r3, #0
 8009630:	e183      	b.n	800993a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8009632:	4b5f      	ldr	r3, [pc, #380]	; (80097b0 <parseDHCPMSG+0x294>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	33f0      	adds	r3, #240	; 0xf0
 800963c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800963e:	8a3b      	ldrh	r3, [r7, #16]
 8009640:	3bf0      	subs	r3, #240	; 0xf0
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4413      	add	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8009648:	e170      	b.n	800992c <parseDHCPMSG+0x410>

			switch ( *p ) {
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	2b36      	cmp	r3, #54	; 0x36
 8009650:	dc76      	bgt.n	8009740 <parseDHCPMSG+0x224>
 8009652:	2b00      	cmp	r3, #0
 8009654:	f2c0 815d 	blt.w	8009912 <parseDHCPMSG+0x3f6>
 8009658:	2b36      	cmp	r3, #54	; 0x36
 800965a:	f200 815a 	bhi.w	8009912 <parseDHCPMSG+0x3f6>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <parseDHCPMSG+0x148>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	0800974d 	.word	0x0800974d
 8009668:	0800976d 	.word	0x0800976d
 800966c:	08009913 	.word	0x08009913
 8009670:	080097c5 	.word	0x080097c5
 8009674:	08009913 	.word	0x08009913
 8009678:	08009913 	.word	0x08009913
 800967c:	08009811 	.word	0x08009811
 8009680:	08009913 	.word	0x08009913
 8009684:	08009913 	.word	0x08009913
 8009688:	08009913 	.word	0x08009913
 800968c:	08009913 	.word	0x08009913
 8009690:	08009913 	.word	0x08009913
 8009694:	08009913 	.word	0x08009913
 8009698:	08009913 	.word	0x08009913
 800969c:	08009913 	.word	0x08009913
 80096a0:	08009913 	.word	0x08009913
 80096a4:	08009913 	.word	0x08009913
 80096a8:	08009913 	.word	0x08009913
 80096ac:	08009913 	.word	0x08009913
 80096b0:	08009913 	.word	0x08009913
 80096b4:	08009913 	.word	0x08009913
 80096b8:	08009913 	.word	0x08009913
 80096bc:	08009913 	.word	0x08009913
 80096c0:	08009913 	.word	0x08009913
 80096c4:	08009913 	.word	0x08009913
 80096c8:	08009913 	.word	0x08009913
 80096cc:	08009913 	.word	0x08009913
 80096d0:	08009913 	.word	0x08009913
 80096d4:	08009913 	.word	0x08009913
 80096d8:	08009913 	.word	0x08009913
 80096dc:	08009913 	.word	0x08009913
 80096e0:	08009913 	.word	0x08009913
 80096e4:	08009913 	.word	0x08009913
 80096e8:	08009913 	.word	0x08009913
 80096ec:	08009913 	.word	0x08009913
 80096f0:	08009913 	.word	0x08009913
 80096f4:	08009913 	.word	0x08009913
 80096f8:	08009913 	.word	0x08009913
 80096fc:	08009913 	.word	0x08009913
 8009700:	08009913 	.word	0x08009913
 8009704:	08009913 	.word	0x08009913
 8009708:	08009913 	.word	0x08009913
 800970c:	08009913 	.word	0x08009913
 8009710:	08009913 	.word	0x08009913
 8009714:	08009913 	.word	0x08009913
 8009718:	08009913 	.word	0x08009913
 800971c:	08009913 	.word	0x08009913
 8009720:	08009913 	.word	0x08009913
 8009724:	08009913 	.word	0x08009913
 8009728:	08009913 	.word	0x08009913
 800972c:	08009913 	.word	0x08009913
 8009730:	0800985d 	.word	0x0800985d
 8009734:	08009913 	.word	0x08009913
 8009738:	08009755 	.word	0x08009755
 800973c:	080098b9 	.word	0x080098b9
 8009740:	2bff      	cmp	r3, #255	; 0xff
 8009742:	f040 80e6 	bne.w	8009912 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	617b      	str	r3, [r7, #20]
   				break;
 800974a:	e0ef      	b.n	800992c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	3301      	adds	r3, #1
 8009750:	617b      	str	r3, [r7, #20]
   				break;
 8009752:	e0eb      	b.n	800992c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	3301      	adds	r3, #1
 8009758:	617b      	str	r3, [r7, #20]
   				p++;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	3301      	adds	r3, #1
 800975e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	617a      	str	r2, [r7, #20]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	74fb      	strb	r3, [r7, #19]
   				break;
 800976a:	e0df      	b.n	800992c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	3301      	adds	r3, #1
 8009770:	617b      	str	r3, [r7, #20]
   				p++;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	3301      	adds	r3, #1
 8009776:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	617a      	str	r2, [r7, #20]
 800977e:	781a      	ldrb	r2, [r3, #0]
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <parseDHCPMSG+0x2a4>)
 8009782:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	617a      	str	r2, [r7, #20]
 800978a:	781a      	ldrb	r2, [r3, #0]
 800978c:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <parseDHCPMSG+0x2a4>)
 800978e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	617a      	str	r2, [r7, #20]
 8009796:	781a      	ldrb	r2, [r3, #0]
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <parseDHCPMSG+0x2a4>)
 800979a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	617a      	str	r2, [r7, #20]
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <parseDHCPMSG+0x2a4>)
 80097a6:	70da      	strb	r2, [r3, #3]
   				break;
 80097a8:	e0c0      	b.n	800992c <parseDHCPMSG+0x410>
 80097aa:	bf00      	nop
 80097ac:	20003ce0 	.word	0x20003ce0
 80097b0:	20003cdc 	.word	0x20003cdc
 80097b4:	20003cc8 	.word	0x20003cc8
 80097b8:	20003cd8 	.word	0x20003cd8
 80097bc:	20003cd4 	.word	0x20003cd4
 80097c0:	20000378 	.word	0x20000378
   			case routersOnSubnet :
   				p++;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	3301      	adds	r3, #1
 80097c8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	617a      	str	r2, [r7, #20]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	617a      	str	r2, [r7, #20]
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	4b59      	ldr	r3, [pc, #356]	; (8009944 <parseDHCPMSG+0x428>)
 80097de:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	617a      	str	r2, [r7, #20]
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	4b56      	ldr	r3, [pc, #344]	; (8009944 <parseDHCPMSG+0x428>)
 80097ea:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	617a      	str	r2, [r7, #20]
 80097f2:	781a      	ldrb	r2, [r3, #0]
 80097f4:	4b53      	ldr	r3, [pc, #332]	; (8009944 <parseDHCPMSG+0x428>)
 80097f6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	617a      	str	r2, [r7, #20]
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	4b50      	ldr	r3, [pc, #320]	; (8009944 <parseDHCPMSG+0x428>)
 8009802:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	3b04      	subs	r3, #4
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4413      	add	r3, r2
 800980c:	617b      	str	r3, [r7, #20]
   				break;
 800980e:	e08d      	b.n	800992c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	3301      	adds	r3, #1
 8009814:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	617a      	str	r2, [r7, #20]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	617a      	str	r2, [r7, #20]
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	4b47      	ldr	r3, [pc, #284]	; (8009948 <parseDHCPMSG+0x42c>)
 800982a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	617a      	str	r2, [r7, #20]
 8009832:	781a      	ldrb	r2, [r3, #0]
 8009834:	4b44      	ldr	r3, [pc, #272]	; (8009948 <parseDHCPMSG+0x42c>)
 8009836:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	617a      	str	r2, [r7, #20]
 800983e:	781a      	ldrb	r2, [r3, #0]
 8009840:	4b41      	ldr	r3, [pc, #260]	; (8009948 <parseDHCPMSG+0x42c>)
 8009842:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	617a      	str	r2, [r7, #20]
 800984a:	781a      	ldrb	r2, [r3, #0]
 800984c:	4b3e      	ldr	r3, [pc, #248]	; (8009948 <parseDHCPMSG+0x42c>)
 800984e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8009850:	7afb      	ldrb	r3, [r7, #11]
 8009852:	3b04      	subs	r3, #4
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	4413      	add	r3, r2
 8009858:	617b      	str	r3, [r7, #20]
   				break;
 800985a:	e067      	b.n	800992c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	3301      	adds	r3, #1
 8009860:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	617a      	str	r2, [r7, #20]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	617a      	str	r2, [r7, #20]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	4b35      	ldr	r3, [pc, #212]	; (800994c <parseDHCPMSG+0x430>)
 8009878:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800987a:	4b34      	ldr	r3, [pc, #208]	; (800994c <parseDHCPMSG+0x430>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	021a      	lsls	r2, r3, #8
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	1c59      	adds	r1, r3, #1
 8009884:	6179      	str	r1, [r7, #20]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	4413      	add	r3, r2
 800988a:	4a30      	ldr	r2, [pc, #192]	; (800994c <parseDHCPMSG+0x430>)
 800988c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800988e:	4b2f      	ldr	r3, [pc, #188]	; (800994c <parseDHCPMSG+0x430>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	021a      	lsls	r2, r3, #8
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	1c59      	adds	r1, r3, #1
 8009898:	6179      	str	r1, [r7, #20]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	4413      	add	r3, r2
 800989e:	4a2b      	ldr	r2, [pc, #172]	; (800994c <parseDHCPMSG+0x430>)
 80098a0:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80098a2:	4b2a      	ldr	r3, [pc, #168]	; (800994c <parseDHCPMSG+0x430>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	021a      	lsls	r2, r3, #8
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	1c59      	adds	r1, r3, #1
 80098ac:	6179      	str	r1, [r7, #20]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	4413      	add	r3, r2
 80098b2:	4a26      	ldr	r2, [pc, #152]	; (800994c <parseDHCPMSG+0x430>)
 80098b4:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 80098b6:	e039      	b.n	800992c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	3301      	adds	r3, #1
 80098bc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	617a      	str	r2, [r7, #20]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	617a      	str	r2, [r7, #20]
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	4b1f      	ldr	r3, [pc, #124]	; (8009950 <parseDHCPMSG+0x434>)
 80098d2:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	617a      	str	r2, [r7, #20]
 80098da:	781a      	ldrb	r2, [r3, #0]
 80098dc:	4b1c      	ldr	r3, [pc, #112]	; (8009950 <parseDHCPMSG+0x434>)
 80098de:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	617a      	str	r2, [r7, #20]
 80098e6:	781a      	ldrb	r2, [r3, #0]
 80098e8:	4b19      	ldr	r3, [pc, #100]	; (8009950 <parseDHCPMSG+0x434>)
 80098ea:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	617a      	str	r2, [r7, #20]
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	4b16      	ldr	r3, [pc, #88]	; (8009950 <parseDHCPMSG+0x434>)
 80098f6:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80098f8:	793a      	ldrb	r2, [r7, #4]
 80098fa:	4b16      	ldr	r3, [pc, #88]	; (8009954 <parseDHCPMSG+0x438>)
 80098fc:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80098fe:	797a      	ldrb	r2, [r7, #5]
 8009900:	4b14      	ldr	r3, [pc, #80]	; (8009954 <parseDHCPMSG+0x438>)
 8009902:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8009904:	79ba      	ldrb	r2, [r7, #6]
 8009906:	4b13      	ldr	r3, [pc, #76]	; (8009954 <parseDHCPMSG+0x438>)
 8009908:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800990a:	79fa      	ldrb	r2, [r7, #7]
 800990c:	4b11      	ldr	r3, [pc, #68]	; (8009954 <parseDHCPMSG+0x438>)
 800990e:	70da      	strb	r2, [r3, #3]
   				break;
 8009910:	e00c      	b.n	800992c <parseDHCPMSG+0x410>
   			default :
   				p++;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	3301      	adds	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	617a      	str	r2, [r7, #20]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8009922:	7afb      	ldrb	r3, [r7, #11]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	4413      	add	r3, r2
 8009928:	617b      	str	r3, [r7, #20]
   				break;
 800992a:	bf00      	nop
		while ( p < e ) {
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	429a      	cmp	r2, r3
 8009932:	f4ff ae8a 	bcc.w	800964a <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8009936:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800993a:	4618      	mov	r0, r3
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	bd90      	pop	{r4, r7, pc}
 8009942:	bf00      	nop
 8009944:	20000374 	.word	0x20000374
 8009948:	2000037c 	.word	0x2000037c
 800994c:	200000d0 	.word	0x200000d0
 8009950:	20003cd8 	.word	0x20003cd8
 8009954:	20003cd4 	.word	0x20003cd4

08009958 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800995e:	4b7f      	ldr	r3, [pc, #508]	; (8009b5c <DHCP_run+0x204>)
 8009960:	f993 3000 	ldrsb.w	r3, [r3]
 8009964:	2b06      	cmp	r3, #6
 8009966:	d101      	bne.n	800996c <DHCP_run+0x14>
 8009968:	2305      	movs	r3, #5
 800996a:	e0f3      	b.n	8009b54 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800996c:	4b7c      	ldr	r3, [pc, #496]	; (8009b60 <DHCP_run+0x208>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	3301      	adds	r3, #1
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800997a:	4618      	mov	r0, r3
 800997c:	f7fd fa0e 	bl	8006d9c <WIZCHIP_READ>
 8009980:	4603      	mov	r3, r0
 8009982:	2b22      	cmp	r3, #34	; 0x22
 8009984:	d006      	beq.n	8009994 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8009986:	4b76      	ldr	r3, [pc, #472]	; (8009b60 <DHCP_run+0x208>)
 8009988:	7818      	ldrb	r0, [r3, #0]
 800998a:	2300      	movs	r3, #0
 800998c:	2244      	movs	r2, #68	; 0x44
 800998e:	2102      	movs	r1, #2
 8009990:	f7fd fcf4 	bl	800737c <socket>

	ret = DHCP_RUNNING;
 8009994:	2301      	movs	r3, #1
 8009996:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8009998:	f7ff fdc0 	bl	800951c <parseDHCPMSG>
 800999c:	4603      	mov	r3, r0
 800999e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80099a0:	4b6e      	ldr	r3, [pc, #440]	; (8009b5c <DHCP_run+0x204>)
 80099a2:	f993 3000 	ldrsb.w	r3, [r3]
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	f200 80d0 	bhi.w	8009b4c <DHCP_run+0x1f4>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <DHCP_run+0x5c>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099c9 	.word	0x080099c9
 80099b8:	080099ed 	.word	0x080099ed
 80099bc:	08009a31 	.word	0x08009a31
 80099c0:	08009a81 	.word	0x08009a81
 80099c4:	08009adb 	.word	0x08009adb
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80099c8:	4b66      	ldr	r3, [pc, #408]	; (8009b64 <DHCP_run+0x20c>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80099ce:	4b65      	ldr	r3, [pc, #404]	; (8009b64 <DHCP_run+0x20c>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80099d4:	4b63      	ldr	r3, [pc, #396]	; (8009b64 <DHCP_run+0x20c>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80099da:	4b62      	ldr	r3, [pc, #392]	; (8009b64 <DHCP_run+0x20c>)
 80099dc:	2200      	movs	r2, #0
 80099de:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80099e0:	f7fe fffa 	bl	80089d8 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80099e4:	4b5d      	ldr	r3, [pc, #372]	; (8009b5c <DHCP_run+0x204>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	701a      	strb	r2, [r3, #0]
   		break;
 80099ea:	e0b2      	b.n	8009b52 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80099ec:	79bb      	ldrb	r3, [r7, #6]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d119      	bne.n	8009a26 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80099f2:	4b5d      	ldr	r3, [pc, #372]	; (8009b68 <DHCP_run+0x210>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	7c1a      	ldrb	r2, [r3, #16]
 80099f8:	4b5a      	ldr	r3, [pc, #360]	; (8009b64 <DHCP_run+0x20c>)
 80099fa:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80099fc:	4b5a      	ldr	r3, [pc, #360]	; (8009b68 <DHCP_run+0x210>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	7c5a      	ldrb	r2, [r3, #17]
 8009a02:	4b58      	ldr	r3, [pc, #352]	; (8009b64 <DHCP_run+0x20c>)
 8009a04:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8009a06:	4b58      	ldr	r3, [pc, #352]	; (8009b68 <DHCP_run+0x210>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	7c9a      	ldrb	r2, [r3, #18]
 8009a0c:	4b55      	ldr	r3, [pc, #340]	; (8009b64 <DHCP_run+0x20c>)
 8009a0e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8009a10:	4b55      	ldr	r3, [pc, #340]	; (8009b68 <DHCP_run+0x210>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	7cda      	ldrb	r2, [r3, #19]
 8009a16:	4b53      	ldr	r3, [pc, #332]	; (8009b64 <DHCP_run+0x20c>)
 8009a18:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8009a1a:	f7ff f9a3 	bl	8008d64 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8009a1e:	4b4f      	ldr	r3, [pc, #316]	; (8009b5c <DHCP_run+0x204>)
 8009a20:	2202      	movs	r2, #2
 8009a22:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8009a24:	e095      	b.n	8009b52 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8009a26:	f000 f8b1 	bl	8009b8c <check_DHCP_timeout>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	71fb      	strb	r3, [r7, #7]
         break;
 8009a2e:	e090      	b.n	8009b52 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8009a30:	79bb      	ldrb	r3, [r7, #6]
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d116      	bne.n	8009a64 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8009a36:	f000 f909 	bl	8009c4c <check_DHCP_leasedIP>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d008      	beq.n	8009a52 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8009a40:	4b4a      	ldr	r3, [pc, #296]	; (8009b6c <DHCP_run+0x214>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4798      	blx	r3
					reset_DHCP_timeout();
 8009a46:	f000 f9d3 	bl	8009df0 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8009a4a:	4b44      	ldr	r3, [pc, #272]	; (8009b5c <DHCP_run+0x204>)
 8009a4c:	2203      	movs	r2, #3
 8009a4e:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8009a50:	e07f      	b.n	8009b52 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8009a52:	f000 f9cd 	bl	8009df0 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8009a56:	4b46      	ldr	r3, [pc, #280]	; (8009b70 <DHCP_run+0x218>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8009a5c:	4b3f      	ldr	r3, [pc, #252]	; (8009b5c <DHCP_run+0x204>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
		break;
 8009a62:	e076      	b.n	8009b52 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8009a64:	79bb      	ldrb	r3, [r7, #6]
 8009a66:	2b06      	cmp	r3, #6
 8009a68:	d105      	bne.n	8009a76 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8009a6a:	f000 f9c1 	bl	8009df0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8009a6e:	4b3b      	ldr	r3, [pc, #236]	; (8009b5c <DHCP_run+0x204>)
 8009a70:	2201      	movs	r2, #1
 8009a72:	701a      	strb	r2, [r3, #0]
		break;
 8009a74:	e06d      	b.n	8009b52 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8009a76:	f000 f889 	bl	8009b8c <check_DHCP_timeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	71fb      	strb	r3, [r7, #7]
		break;
 8009a7e:	e068      	b.n	8009b52 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8009a80:	2304      	movs	r3, #4
 8009a82:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8009a84:	4b3b      	ldr	r3, [pc, #236]	; (8009b74 <DHCP_run+0x21c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8c:	d060      	beq.n	8009b50 <DHCP_run+0x1f8>
 8009a8e:	4b39      	ldr	r3, [pc, #228]	; (8009b74 <DHCP_run+0x21c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	085a      	lsrs	r2, r3, #1
 8009a94:	4b38      	ldr	r3, [pc, #224]	; (8009b78 <DHCP_run+0x220>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d259      	bcs.n	8009b50 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8009aa0:	4b30      	ldr	r3, [pc, #192]	; (8009b64 <DHCP_run+0x20c>)
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	4b35      	ldr	r3, [pc, #212]	; (8009b7c <DHCP_run+0x224>)
 8009aa6:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8009aa8:	4b2e      	ldr	r3, [pc, #184]	; (8009b64 <DHCP_run+0x20c>)
 8009aaa:	785a      	ldrb	r2, [r3, #1]
 8009aac:	4b33      	ldr	r3, [pc, #204]	; (8009b7c <DHCP_run+0x224>)
 8009aae:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8009ab0:	4b2c      	ldr	r3, [pc, #176]	; (8009b64 <DHCP_run+0x20c>)
 8009ab2:	789a      	ldrb	r2, [r3, #2]
 8009ab4:	4b31      	ldr	r3, [pc, #196]	; (8009b7c <DHCP_run+0x224>)
 8009ab6:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8009ab8:	4b2a      	ldr	r3, [pc, #168]	; (8009b64 <DHCP_run+0x20c>)
 8009aba:	78da      	ldrb	r2, [r3, #3]
 8009abc:	4b2f      	ldr	r3, [pc, #188]	; (8009b7c <DHCP_run+0x224>)
 8009abe:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8009ac0:	4b2f      	ldr	r3, [pc, #188]	; (8009b80 <DHCP_run+0x228>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	4a2e      	ldr	r2, [pc, #184]	; (8009b80 <DHCP_run+0x228>)
 8009ac8:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8009aca:	f7ff f94b 	bl	8008d64 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8009ace:	f000 f98f 	bl	8009df0 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8009ad2:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <DHCP_run+0x204>)
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	701a      	strb	r2, [r3, #0]
			}
		break;
 8009ad8:	e03a      	b.n	8009b50 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8009ada:	2304      	movs	r3, #4
 8009adc:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8009ade:	79bb      	ldrb	r3, [r7, #6]
 8009ae0:	2b05      	cmp	r3, #5
 8009ae2:	d125      	bne.n	8009b30 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8009ae4:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <DHCP_run+0x22c>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8009aea:	4b24      	ldr	r3, [pc, #144]	; (8009b7c <DHCP_run+0x224>)
 8009aec:	781a      	ldrb	r2, [r3, #0]
 8009aee:	4b1d      	ldr	r3, [pc, #116]	; (8009b64 <DHCP_run+0x20c>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d111      	bne.n	8009b1a <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <DHCP_run+0x224>)
 8009af8:	785a      	ldrb	r2, [r3, #1]
 8009afa:	4b1a      	ldr	r3, [pc, #104]	; (8009b64 <DHCP_run+0x20c>)
 8009afc:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d10b      	bne.n	8009b1a <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8009b02:	4b1e      	ldr	r3, [pc, #120]	; (8009b7c <DHCP_run+0x224>)
 8009b04:	789a      	ldrb	r2, [r3, #2]
 8009b06:	4b17      	ldr	r3, [pc, #92]	; (8009b64 <DHCP_run+0x20c>)
 8009b08:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d105      	bne.n	8009b1a <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8009b0e:	4b1b      	ldr	r3, [pc, #108]	; (8009b7c <DHCP_run+0x224>)
 8009b10:	78da      	ldrb	r2, [r3, #3]
 8009b12:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <DHCP_run+0x20c>)
 8009b14:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d004      	beq.n	8009b24 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <DHCP_run+0x230>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8009b24:	f000 f964 	bl	8009df0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8009b28:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <DHCP_run+0x204>)
 8009b2a:	2203      	movs	r2, #3
 8009b2c:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8009b2e:	e010      	b.n	8009b52 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8009b30:	79bb      	ldrb	r3, [r7, #6]
 8009b32:	2b06      	cmp	r3, #6
 8009b34:	d105      	bne.n	8009b42 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8009b36:	f000 f95b 	bl	8009df0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8009b3a:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <DHCP_run+0x204>)
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	701a      	strb	r2, [r3, #0]
	   	break;
 8009b40:	e007      	b.n	8009b52 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8009b42:	f000 f823 	bl	8009b8c <check_DHCP_timeout>
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
	   	break;
 8009b4a:	e002      	b.n	8009b52 <DHCP_run+0x1fa>
		default :
   		break;
 8009b4c:	bf00      	nop
 8009b4e:	e000      	b.n	8009b52 <DHCP_run+0x1fa>
		break;
 8009b50:	bf00      	nop
	}

	return ret;
 8009b52:	79fb      	ldrb	r3, [r7, #7]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20000380 	.word	0x20000380
 8009b60:	20003ce0 	.word	0x20003ce0
 8009b64:	20000370 	.word	0x20000370
 8009b68:	20003cdc 	.word	0x20003cdc
 8009b6c:	200000e0 	.word	0x200000e0
 8009b70:	200000e8 	.word	0x200000e8
 8009b74:	200000d0 	.word	0x200000d0
 8009b78:	20000384 	.word	0x20000384
 8009b7c:	2000036c 	.word	0x2000036c
 8009b80:	20003cd0 	.word	0x20003cd0
 8009b84:	20000381 	.word	0x20000381
 8009b88:	200000e4 	.word	0x200000e4

08009b8c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8009b92:	2301      	movs	r3, #1
 8009b94:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8009b96:	4b29      	ldr	r3, [pc, #164]	; (8009c3c <check_DHCP_timeout+0xb0>)
 8009b98:	f993 3000 	ldrsb.w	r3, [r3]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	dc2d      	bgt.n	8009bfc <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8009ba0:	4b27      	ldr	r3, [pc, #156]	; (8009c40 <check_DHCP_timeout+0xb4>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <check_DHCP_timeout+0xb8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d242      	bcs.n	8009c32 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8009bac:	4b26      	ldr	r3, [pc, #152]	; (8009c48 <check_DHCP_timeout+0xbc>)
 8009bae:	f993 3000 	ldrsb.w	r3, [r3]
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d00c      	beq.n	8009bd0 <check_DHCP_timeout+0x44>
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	dc0d      	bgt.n	8009bd6 <check_DHCP_timeout+0x4a>
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d002      	beq.n	8009bc4 <check_DHCP_timeout+0x38>
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d003      	beq.n	8009bca <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8009bc2:	e008      	b.n	8009bd6 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8009bc4:	f7fe ff08 	bl	80089d8 <send_DHCP_DISCOVER>
				break;
 8009bc8:	e006      	b.n	8009bd8 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8009bca:	f7ff f8cb 	bl	8008d64 <send_DHCP_REQUEST>
				break;
 8009bce:	e003      	b.n	8009bd8 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8009bd0:	f7ff f8c8 	bl	8008d64 <send_DHCP_REQUEST>
				break;
 8009bd4:	e000      	b.n	8009bd8 <check_DHCP_timeout+0x4c>
				break;
 8009bd6:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8009bd8:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <check_DHCP_timeout+0xb8>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8009bde:	4b19      	ldr	r3, [pc, #100]	; (8009c44 <check_DHCP_timeout+0xb8>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	330a      	adds	r3, #10
 8009be4:	4a16      	ldr	r2, [pc, #88]	; (8009c40 <check_DHCP_timeout+0xb4>)
 8009be6:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8009be8:	4b14      	ldr	r3, [pc, #80]	; (8009c3c <check_DHCP_timeout+0xb0>)
 8009bea:	f993 3000 	ldrsb.w	r3, [r3]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	b25a      	sxtb	r2, r3
 8009bf6:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <check_DHCP_timeout+0xb0>)
 8009bf8:	701a      	strb	r2, [r3, #0]
 8009bfa:	e01a      	b.n	8009c32 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8009bfc:	4b12      	ldr	r3, [pc, #72]	; (8009c48 <check_DHCP_timeout+0xbc>)
 8009bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d00c      	beq.n	8009c20 <check_DHCP_timeout+0x94>
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	dc10      	bgt.n	8009c2c <check_DHCP_timeout+0xa0>
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d002      	beq.n	8009c14 <check_DHCP_timeout+0x88>
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d006      	beq.n	8009c20 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8009c12:	e00b      	b.n	8009c2c <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8009c14:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <check_DHCP_timeout+0xbc>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	71fb      	strb	r3, [r7, #7]
				break;
 8009c1e:	e006      	b.n	8009c2e <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8009c20:	f7fe feda 	bl	80089d8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8009c24:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <check_DHCP_timeout+0xbc>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	701a      	strb	r2, [r3, #0]
				break;
 8009c2a:	e000      	b.n	8009c2e <check_DHCP_timeout+0xa2>
				break;
 8009c2c:	bf00      	nop
		}
		reset_DHCP_timeout();
 8009c2e:	f000 f8df 	bl	8009df0 <reset_DHCP_timeout>
	}
	return ret;
 8009c32:	79fb      	ldrb	r3, [r7, #7]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000381 	.word	0x20000381
 8009c40:	200000d4 	.word	0x200000d4
 8009c44:	20000384 	.word	0x20000384
 8009c48:	20000380 	.word	0x20000380

08009c4c <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8009c52:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8009c56:	f7fd f8a1 	bl	8006d9c <WIZCHIP_READ>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8009c5e:	2103      	movs	r1, #3
 8009c60:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8009c64:	f7fd f8e6 	bl	8006e34 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8009c68:	4b13      	ldr	r3, [pc, #76]	; (8009cb8 <check_DHCP_leasedIP+0x6c>)
 8009c6a:	7818      	ldrb	r0, [r3, #0]
 8009c6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	4b12      	ldr	r3, [pc, #72]	; (8009cbc <check_DHCP_leasedIP+0x70>)
 8009c74:	2211      	movs	r2, #17
 8009c76:	4912      	ldr	r1, [pc, #72]	; (8009cc0 <check_DHCP_leasedIP+0x74>)
 8009c78:	f7fd fd04 	bl	8007684 <sendto>
 8009c7c:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	4619      	mov	r1, r3
 8009c82:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8009c86:	f7fd f8d5 	bl	8006e34 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	f113 0f0d 	cmn.w	r3, #13
 8009c90:	d101      	bne.n	8009c96 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e00c      	b.n	8009cb0 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8009c96:	f7ff faef 	bl	8009278 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8009c9a:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <check_DHCP_leasedIP+0x78>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8009ca0:	bf00      	nop
 8009ca2:	4b08      	ldr	r3, [pc, #32]	; (8009cc4 <check_DHCP_leasedIP+0x78>)
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d9f9      	bls.n	8009ca2 <check_DHCP_leasedIP+0x56>

		return 0;
 8009cae:	2300      	movs	r3, #0
	}
}	
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20003ce0 	.word	0x20003ce0
 8009cbc:	20000370 	.word	0x20000370
 8009cc0:	0800cb40 	.word	0x0800cb40
 8009cc4:	20000384 	.word	0x20000384

08009cc8 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8009cd8:	2206      	movs	r2, #6
 8009cda:	493f      	ldr	r1, [pc, #252]	; (8009dd8 <DHCP_init+0x110>)
 8009cdc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009ce0:	f7fd f8f6 	bl	8006ed0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8009ce4:	4b3c      	ldr	r3, [pc, #240]	; (8009dd8 <DHCP_init+0x110>)
 8009ce6:	781a      	ldrb	r2, [r3, #0]
 8009ce8:	4b3b      	ldr	r3, [pc, #236]	; (8009dd8 <DHCP_init+0x110>)
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	4b39      	ldr	r3, [pc, #228]	; (8009dd8 <DHCP_init+0x110>)
 8009cf2:	789b      	ldrb	r3, [r3, #2]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	4b37      	ldr	r3, [pc, #220]	; (8009dd8 <DHCP_init+0x110>)
 8009cfa:	78db      	ldrb	r3, [r3, #3]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	4b35      	ldr	r3, [pc, #212]	; (8009dd8 <DHCP_init+0x110>)
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	4b33      	ldr	r3, [pc, #204]	; (8009dd8 <DHCP_init+0x110>)
 8009d0a:	795b      	ldrb	r3, [r3, #5]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d117      	bne.n	8009d44 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8009d14:	4b30      	ldr	r3, [pc, #192]	; (8009dd8 <DHCP_init+0x110>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8009d1a:	4b2f      	ldr	r3, [pc, #188]	; (8009dd8 <DHCP_init+0x110>)
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8009d20:	4b2d      	ldr	r3, [pc, #180]	; (8009dd8 <DHCP_init+0x110>)
 8009d22:	22dc      	movs	r2, #220	; 0xdc
 8009d24:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8009d26:	4b2c      	ldr	r3, [pc, #176]	; (8009dd8 <DHCP_init+0x110>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8009d2c:	4b2a      	ldr	r3, [pc, #168]	; (8009dd8 <DHCP_init+0x110>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8009d32:	4b29      	ldr	r3, [pc, #164]	; (8009dd8 <DHCP_init+0x110>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8009d38:	2206      	movs	r2, #6
 8009d3a:	4927      	ldr	r1, [pc, #156]	; (8009dd8 <DHCP_init+0x110>)
 8009d3c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009d40:	f7fd f926 	bl	8006f90 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8009d44:	4a25      	ldr	r2, [pc, #148]	; (8009ddc <DHCP_init+0x114>)
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8009d4a:	4a25      	ldr	r2, [pc, #148]	; (8009de0 <DHCP_init+0x118>)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8009d50:	4b24      	ldr	r3, [pc, #144]	; (8009de4 <DHCP_init+0x11c>)
 8009d52:	4a25      	ldr	r2, [pc, #148]	; (8009de8 <DHCP_init+0x120>)
 8009d54:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8009d56:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <DHCP_init+0x110>)
 8009d58:	78db      	ldrb	r3, [r3, #3]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	4b21      	ldr	r3, [pc, #132]	; (8009de4 <DHCP_init+0x11c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4413      	add	r3, r2
 8009d62:	4a20      	ldr	r2, [pc, #128]	; (8009de4 <DHCP_init+0x11c>)
 8009d64:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8009d66:	4b1c      	ldr	r3, [pc, #112]	; (8009dd8 <DHCP_init+0x110>)
 8009d68:	791b      	ldrb	r3, [r3, #4]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4b1d      	ldr	r3, [pc, #116]	; (8009de4 <DHCP_init+0x11c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4413      	add	r3, r2
 8009d72:	4a1c      	ldr	r2, [pc, #112]	; (8009de4 <DHCP_init+0x11c>)
 8009d74:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8009d76:	4b18      	ldr	r3, [pc, #96]	; (8009dd8 <DHCP_init+0x110>)
 8009d78:	795b      	ldrb	r3, [r3, #5]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4b19      	ldr	r3, [pc, #100]	; (8009de4 <DHCP_init+0x11c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4413      	add	r3, r2
 8009d82:	4a18      	ldr	r2, [pc, #96]	; (8009de4 <DHCP_init+0x11c>)
 8009d84:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8009d86:	4b14      	ldr	r3, [pc, #80]	; (8009dd8 <DHCP_init+0x110>)
 8009d88:	78da      	ldrb	r2, [r3, #3]
 8009d8a:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <DHCP_init+0x110>)
 8009d8c:	791b      	ldrb	r3, [r3, #4]
 8009d8e:	4053      	eors	r3, r2
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <DHCP_init+0x110>)
 8009d94:	795b      	ldrb	r3, [r3, #5]
 8009d96:	4053      	eors	r3, r2
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <DHCP_init+0x11c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4413      	add	r3, r2
 8009da2:	4a10      	ldr	r2, [pc, #64]	; (8009de4 <DHCP_init+0x11c>)
 8009da4:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	2204      	movs	r2, #4
 8009dac:	4619      	mov	r1, r3
 8009dae:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009db2:	f7fd f8ed 	bl	8006f90 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8009db6:	f107 030c 	add.w	r3, r7, #12
 8009dba:	2204      	movs	r2, #4
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009dc2:	f7fd f8e5 	bl	8006f90 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8009dc6:	f000 f813 	bl	8009df0 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8009dca:	4b08      	ldr	r3, [pc, #32]	; (8009dec <DHCP_init+0x124>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	701a      	strb	r2, [r3, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20003cc8 	.word	0x20003cc8
 8009ddc:	20003ce0 	.word	0x20003ce0
 8009de0:	20003cdc 	.word	0x20003cdc
 8009de4:	20003cd0 	.word	0x20003cd0
 8009de8:	12345678 	.word	0x12345678
 8009dec:	20000380 	.word	0x20000380

08009df0 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8009df0:	b480      	push	{r7}
 8009df2:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8009df4:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <reset_DHCP_timeout+0x20>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8009dfa:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <reset_DHCP_timeout+0x24>)
 8009dfc:	220a      	movs	r2, #10
 8009dfe:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8009e00:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <reset_DHCP_timeout+0x28>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
}
 8009e06:	bf00      	nop
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bc80      	pop	{r7}
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20000384 	.word	0x20000384
 8009e14:	200000d4 	.word	0x200000d4
 8009e18:	20000381 	.word	0x20000381

08009e1c <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8009e24:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <getIPfromDHCP+0x38>)
 8009e26:	781a      	ldrb	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	4a08      	ldr	r2, [pc, #32]	; (8009e54 <getIPfromDHCP+0x38>)
 8009e32:	7852      	ldrb	r2, [r2, #1]
 8009e34:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3302      	adds	r3, #2
 8009e3a:	4a06      	ldr	r2, [pc, #24]	; (8009e54 <getIPfromDHCP+0x38>)
 8009e3c:	7892      	ldrb	r2, [r2, #2]
 8009e3e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3303      	adds	r3, #3
 8009e44:	4a03      	ldr	r2, [pc, #12]	; (8009e54 <getIPfromDHCP+0x38>)
 8009e46:	78d2      	ldrb	r2, [r2, #3]
 8009e48:	701a      	strb	r2, [r3, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bc80      	pop	{r7}
 8009e52:	4770      	bx	lr
 8009e54:	20000370 	.word	0x20000370

08009e58 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8009e60:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <getGWfromDHCP+0x38>)
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	4a08      	ldr	r2, [pc, #32]	; (8009e90 <getGWfromDHCP+0x38>)
 8009e6e:	7852      	ldrb	r2, [r2, #1]
 8009e70:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3302      	adds	r3, #2
 8009e76:	4a06      	ldr	r2, [pc, #24]	; (8009e90 <getGWfromDHCP+0x38>)
 8009e78:	7892      	ldrb	r2, [r2, #2]
 8009e7a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3303      	adds	r3, #3
 8009e80:	4a03      	ldr	r2, [pc, #12]	; (8009e90 <getGWfromDHCP+0x38>)
 8009e82:	78d2      	ldrb	r2, [r2, #3]
 8009e84:	701a      	strb	r2, [r3, #0]
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bc80      	pop	{r7}
 8009e8e:	4770      	bx	lr
 8009e90:	20000374 	.word	0x20000374

08009e94 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <getSNfromDHCP+0x38>)
 8009e9e:	781a      	ldrb	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	4a08      	ldr	r2, [pc, #32]	; (8009ecc <getSNfromDHCP+0x38>)
 8009eaa:	7852      	ldrb	r2, [r2, #1]
 8009eac:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	4a06      	ldr	r2, [pc, #24]	; (8009ecc <getSNfromDHCP+0x38>)
 8009eb4:	7892      	ldrb	r2, [r2, #2]
 8009eb6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3303      	adds	r3, #3
 8009ebc:	4a03      	ldr	r2, [pc, #12]	; (8009ecc <getSNfromDHCP+0x38>)
 8009ebe:	78d2      	ldrb	r2, [r2, #3]
 8009ec0:	701a      	strb	r2, [r3, #0]
}
 8009ec2:	bf00      	nop
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bc80      	pop	{r7}
 8009eca:	4770      	bx	lr
 8009ecc:	20000378 	.word	0x20000378

08009ed0 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	; (8009f08 <getDNSfromDHCP+0x38>)
 8009eda:	781a      	ldrb	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a08      	ldr	r2, [pc, #32]	; (8009f08 <getDNSfromDHCP+0x38>)
 8009ee6:	7852      	ldrb	r2, [r2, #1]
 8009ee8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3302      	adds	r3, #2
 8009eee:	4a06      	ldr	r2, [pc, #24]	; (8009f08 <getDNSfromDHCP+0x38>)
 8009ef0:	7892      	ldrb	r2, [r2, #2]
 8009ef2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3303      	adds	r3, #3
 8009ef8:	4a03      	ldr	r2, [pc, #12]	; (8009f08 <getDNSfromDHCP+0x38>)
 8009efa:	78d2      	ldrb	r2, [r2, #3]
 8009efc:	701a      	strb	r2, [r3, #0]
}
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bc80      	pop	{r7}
 8009f06:	4770      	bx	lr
 8009f08:	2000037c 	.word	0x2000037c

08009f0c <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <getDHCPLeasetime+0x10>)
 8009f12:	681b      	ldr	r3, [r3, #0]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr
 8009f1c:	200000d0 	.word	0x200000d0

08009f20 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	f003 030f 	and.w	r3, r3, #15
 8009f30:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b09      	cmp	r3, #9
 8009f36:	d803      	bhi.n	8009f40 <NibbleToHex+0x20>
    return nibble + '0';
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	3330      	adds	r3, #48	; 0x30
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	e002      	b.n	8009f46 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	3337      	adds	r3, #55	; 0x37
 8009f44:	b2db      	uxtb	r3, r3
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bc80      	pop	{r7}
 8009f4e:	4770      	bx	lr

08009f50 <atoi>:
 8009f50:	220a      	movs	r2, #10
 8009f52:	2100      	movs	r1, #0
 8009f54:	f000 bcc2 	b.w	800a8dc <strtol>

08009f58 <__errno>:
 8009f58:	4b01      	ldr	r3, [pc, #4]	; (8009f60 <__errno+0x8>)
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	200000ec 	.word	0x200000ec

08009f64 <__sflush_r>:
 8009f64:	898a      	ldrh	r2, [r1, #12]
 8009f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	0710      	lsls	r0, r2, #28
 8009f6e:	460c      	mov	r4, r1
 8009f70:	d458      	bmi.n	800a024 <__sflush_r+0xc0>
 8009f72:	684b      	ldr	r3, [r1, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dc05      	bgt.n	8009f84 <__sflush_r+0x20>
 8009f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dc02      	bgt.n	8009f84 <__sflush_r+0x20>
 8009f7e:	2000      	movs	r0, #0
 8009f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f86:	2e00      	cmp	r6, #0
 8009f88:	d0f9      	beq.n	8009f7e <__sflush_r+0x1a>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f90:	682f      	ldr	r7, [r5, #0]
 8009f92:	602b      	str	r3, [r5, #0]
 8009f94:	d032      	beq.n	8009ffc <__sflush_r+0x98>
 8009f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	075a      	lsls	r2, r3, #29
 8009f9c:	d505      	bpl.n	8009faa <__sflush_r+0x46>
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	1ac0      	subs	r0, r0, r3
 8009fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fa4:	b10b      	cbz	r3, 8009faa <__sflush_r+0x46>
 8009fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fa8:	1ac0      	subs	r0, r0, r3
 8009faa:	2300      	movs	r3, #0
 8009fac:	4602      	mov	r2, r0
 8009fae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	6a21      	ldr	r1, [r4, #32]
 8009fb4:	47b0      	blx	r6
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	d106      	bne.n	8009fca <__sflush_r+0x66>
 8009fbc:	6829      	ldr	r1, [r5, #0]
 8009fbe:	291d      	cmp	r1, #29
 8009fc0:	d82c      	bhi.n	800a01c <__sflush_r+0xb8>
 8009fc2:	4a2a      	ldr	r2, [pc, #168]	; (800a06c <__sflush_r+0x108>)
 8009fc4:	40ca      	lsrs	r2, r1
 8009fc6:	07d6      	lsls	r6, r2, #31
 8009fc8:	d528      	bpl.n	800a01c <__sflush_r+0xb8>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	6062      	str	r2, [r4, #4]
 8009fce:	6922      	ldr	r2, [r4, #16]
 8009fd0:	04d9      	lsls	r1, r3, #19
 8009fd2:	6022      	str	r2, [r4, #0]
 8009fd4:	d504      	bpl.n	8009fe0 <__sflush_r+0x7c>
 8009fd6:	1c42      	adds	r2, r0, #1
 8009fd8:	d101      	bne.n	8009fde <__sflush_r+0x7a>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b903      	cbnz	r3, 8009fe0 <__sflush_r+0x7c>
 8009fde:	6560      	str	r0, [r4, #84]	; 0x54
 8009fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fe2:	602f      	str	r7, [r5, #0]
 8009fe4:	2900      	cmp	r1, #0
 8009fe6:	d0ca      	beq.n	8009f7e <__sflush_r+0x1a>
 8009fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fec:	4299      	cmp	r1, r3
 8009fee:	d002      	beq.n	8009ff6 <__sflush_r+0x92>
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f9bf 	bl	800a374 <_free_r>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8009ffa:	e7c1      	b.n	8009f80 <__sflush_r+0x1c>
 8009ffc:	6a21      	ldr	r1, [r4, #32]
 8009ffe:	2301      	movs	r3, #1
 800a000:	4628      	mov	r0, r5
 800a002:	47b0      	blx	r6
 800a004:	1c41      	adds	r1, r0, #1
 800a006:	d1c7      	bne.n	8009f98 <__sflush_r+0x34>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0c4      	beq.n	8009f98 <__sflush_r+0x34>
 800a00e:	2b1d      	cmp	r3, #29
 800a010:	d001      	beq.n	800a016 <__sflush_r+0xb2>
 800a012:	2b16      	cmp	r3, #22
 800a014:	d101      	bne.n	800a01a <__sflush_r+0xb6>
 800a016:	602f      	str	r7, [r5, #0]
 800a018:	e7b1      	b.n	8009f7e <__sflush_r+0x1a>
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	e7ad      	b.n	8009f80 <__sflush_r+0x1c>
 800a024:	690f      	ldr	r7, [r1, #16]
 800a026:	2f00      	cmp	r7, #0
 800a028:	d0a9      	beq.n	8009f7e <__sflush_r+0x1a>
 800a02a:	0793      	lsls	r3, r2, #30
 800a02c:	bf18      	it	ne
 800a02e:	2300      	movne	r3, #0
 800a030:	680e      	ldr	r6, [r1, #0]
 800a032:	bf08      	it	eq
 800a034:	694b      	ldreq	r3, [r1, #20]
 800a036:	eba6 0807 	sub.w	r8, r6, r7
 800a03a:	600f      	str	r7, [r1, #0]
 800a03c:	608b      	str	r3, [r1, #8]
 800a03e:	f1b8 0f00 	cmp.w	r8, #0
 800a042:	dd9c      	ble.n	8009f7e <__sflush_r+0x1a>
 800a044:	4643      	mov	r3, r8
 800a046:	463a      	mov	r2, r7
 800a048:	4628      	mov	r0, r5
 800a04a:	6a21      	ldr	r1, [r4, #32]
 800a04c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a04e:	47b0      	blx	r6
 800a050:	2800      	cmp	r0, #0
 800a052:	dc06      	bgt.n	800a062 <__sflush_r+0xfe>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f04f 30ff 	mov.w	r0, #4294967295
 800a05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	e78e      	b.n	8009f80 <__sflush_r+0x1c>
 800a062:	4407      	add	r7, r0
 800a064:	eba8 0800 	sub.w	r8, r8, r0
 800a068:	e7e9      	b.n	800a03e <__sflush_r+0xda>
 800a06a:	bf00      	nop
 800a06c:	20400001 	.word	0x20400001

0800a070 <_fflush_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	690b      	ldr	r3, [r1, #16]
 800a074:	4605      	mov	r5, r0
 800a076:	460c      	mov	r4, r1
 800a078:	b913      	cbnz	r3, 800a080 <_fflush_r+0x10>
 800a07a:	2500      	movs	r5, #0
 800a07c:	4628      	mov	r0, r5
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	b118      	cbz	r0, 800a08a <_fflush_r+0x1a>
 800a082:	6983      	ldr	r3, [r0, #24]
 800a084:	b90b      	cbnz	r3, 800a08a <_fflush_r+0x1a>
 800a086:	f000 f899 	bl	800a1bc <__sinit>
 800a08a:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <_fflush_r+0x6c>)
 800a08c:	429c      	cmp	r4, r3
 800a08e:	d11b      	bne.n	800a0c8 <_fflush_r+0x58>
 800a090:	686c      	ldr	r4, [r5, #4]
 800a092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0ef      	beq.n	800a07a <_fflush_r+0xa>
 800a09a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a09c:	07d0      	lsls	r0, r2, #31
 800a09e:	d404      	bmi.n	800a0aa <_fflush_r+0x3a>
 800a0a0:	0599      	lsls	r1, r3, #22
 800a0a2:	d402      	bmi.n	800a0aa <_fflush_r+0x3a>
 800a0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0a6:	f000 f94c 	bl	800a342 <__retarget_lock_acquire_recursive>
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	f7ff ff59 	bl	8009f64 <__sflush_r>
 800a0b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	07da      	lsls	r2, r3, #31
 800a0b8:	d4e0      	bmi.n	800a07c <_fflush_r+0xc>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	059b      	lsls	r3, r3, #22
 800a0be:	d4dd      	bmi.n	800a07c <_fflush_r+0xc>
 800a0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0c2:	f000 f93f 	bl	800a344 <__retarget_lock_release_recursive>
 800a0c6:	e7d9      	b.n	800a07c <_fflush_r+0xc>
 800a0c8:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <_fflush_r+0x70>)
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	d101      	bne.n	800a0d2 <_fflush_r+0x62>
 800a0ce:	68ac      	ldr	r4, [r5, #8]
 800a0d0:	e7df      	b.n	800a092 <_fflush_r+0x22>
 800a0d2:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <_fflush_r+0x74>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	bf08      	it	eq
 800a0d8:	68ec      	ldreq	r4, [r5, #12]
 800a0da:	e7da      	b.n	800a092 <_fflush_r+0x22>
 800a0dc:	0800cd00 	.word	0x0800cd00
 800a0e0:	0800cd20 	.word	0x0800cd20
 800a0e4:	0800cce0 	.word	0x0800cce0

0800a0e8 <fflush>:
 800a0e8:	4601      	mov	r1, r0
 800a0ea:	b920      	cbnz	r0, 800a0f6 <fflush+0xe>
 800a0ec:	4b04      	ldr	r3, [pc, #16]	; (800a100 <fflush+0x18>)
 800a0ee:	4905      	ldr	r1, [pc, #20]	; (800a104 <fflush+0x1c>)
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	f000 b8e1 	b.w	800a2b8 <_fwalk_reent>
 800a0f6:	4b04      	ldr	r3, [pc, #16]	; (800a108 <fflush+0x20>)
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	f7ff bfb9 	b.w	800a070 <_fflush_r>
 800a0fe:	bf00      	nop
 800a100:	0800cd40 	.word	0x0800cd40
 800a104:	0800a071 	.word	0x0800a071
 800a108:	200000ec 	.word	0x200000ec

0800a10c <std>:
 800a10c:	2300      	movs	r3, #0
 800a10e:	b510      	push	{r4, lr}
 800a110:	4604      	mov	r4, r0
 800a112:	e9c0 3300 	strd	r3, r3, [r0]
 800a116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a11a:	6083      	str	r3, [r0, #8]
 800a11c:	8181      	strh	r1, [r0, #12]
 800a11e:	6643      	str	r3, [r0, #100]	; 0x64
 800a120:	81c2      	strh	r2, [r0, #14]
 800a122:	6183      	str	r3, [r0, #24]
 800a124:	4619      	mov	r1, r3
 800a126:	2208      	movs	r2, #8
 800a128:	305c      	adds	r0, #92	; 0x5c
 800a12a:	f000 f91a 	bl	800a362 <memset>
 800a12e:	4b05      	ldr	r3, [pc, #20]	; (800a144 <std+0x38>)
 800a130:	6224      	str	r4, [r4, #32]
 800a132:	6263      	str	r3, [r4, #36]	; 0x24
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <std+0x3c>)
 800a136:	62a3      	str	r3, [r4, #40]	; 0x28
 800a138:	4b04      	ldr	r3, [pc, #16]	; (800a14c <std+0x40>)
 800a13a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <std+0x44>)
 800a13e:	6323      	str	r3, [r4, #48]	; 0x30
 800a140:	bd10      	pop	{r4, pc}
 800a142:	bf00      	nop
 800a144:	0800a6b9 	.word	0x0800a6b9
 800a148:	0800a6df 	.word	0x0800a6df
 800a14c:	0800a717 	.word	0x0800a717
 800a150:	0800a73b 	.word	0x0800a73b

0800a154 <_cleanup_r>:
 800a154:	4901      	ldr	r1, [pc, #4]	; (800a15c <_cleanup_r+0x8>)
 800a156:	f000 b8af 	b.w	800a2b8 <_fwalk_reent>
 800a15a:	bf00      	nop
 800a15c:	0800a071 	.word	0x0800a071

0800a160 <__sfmoreglue>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	2568      	movs	r5, #104	; 0x68
 800a164:	1e4a      	subs	r2, r1, #1
 800a166:	4355      	muls	r5, r2
 800a168:	460e      	mov	r6, r1
 800a16a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a16e:	f000 f94d 	bl	800a40c <_malloc_r>
 800a172:	4604      	mov	r4, r0
 800a174:	b140      	cbz	r0, 800a188 <__sfmoreglue+0x28>
 800a176:	2100      	movs	r1, #0
 800a178:	e9c0 1600 	strd	r1, r6, [r0]
 800a17c:	300c      	adds	r0, #12
 800a17e:	60a0      	str	r0, [r4, #8]
 800a180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a184:	f000 f8ed 	bl	800a362 <memset>
 800a188:	4620      	mov	r0, r4
 800a18a:	bd70      	pop	{r4, r5, r6, pc}

0800a18c <__sfp_lock_acquire>:
 800a18c:	4801      	ldr	r0, [pc, #4]	; (800a194 <__sfp_lock_acquire+0x8>)
 800a18e:	f000 b8d8 	b.w	800a342 <__retarget_lock_acquire_recursive>
 800a192:	bf00      	nop
 800a194:	20003ce9 	.word	0x20003ce9

0800a198 <__sfp_lock_release>:
 800a198:	4801      	ldr	r0, [pc, #4]	; (800a1a0 <__sfp_lock_release+0x8>)
 800a19a:	f000 b8d3 	b.w	800a344 <__retarget_lock_release_recursive>
 800a19e:	bf00      	nop
 800a1a0:	20003ce9 	.word	0x20003ce9

0800a1a4 <__sinit_lock_acquire>:
 800a1a4:	4801      	ldr	r0, [pc, #4]	; (800a1ac <__sinit_lock_acquire+0x8>)
 800a1a6:	f000 b8cc 	b.w	800a342 <__retarget_lock_acquire_recursive>
 800a1aa:	bf00      	nop
 800a1ac:	20003ce4 	.word	0x20003ce4

0800a1b0 <__sinit_lock_release>:
 800a1b0:	4801      	ldr	r0, [pc, #4]	; (800a1b8 <__sinit_lock_release+0x8>)
 800a1b2:	f000 b8c7 	b.w	800a344 <__retarget_lock_release_recursive>
 800a1b6:	bf00      	nop
 800a1b8:	20003ce4 	.word	0x20003ce4

0800a1bc <__sinit>:
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	4604      	mov	r4, r0
 800a1c0:	f7ff fff0 	bl	800a1a4 <__sinit_lock_acquire>
 800a1c4:	69a3      	ldr	r3, [r4, #24]
 800a1c6:	b11b      	cbz	r3, 800a1d0 <__sinit+0x14>
 800a1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1cc:	f7ff bff0 	b.w	800a1b0 <__sinit_lock_release>
 800a1d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a1d6:	4b13      	ldr	r3, [pc, #76]	; (800a224 <__sinit+0x68>)
 800a1d8:	4a13      	ldr	r2, [pc, #76]	; (800a228 <__sinit+0x6c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	bf08      	it	eq
 800a1e2:	2301      	moveq	r3, #1
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bf08      	it	eq
 800a1e8:	61a3      	streq	r3, [r4, #24]
 800a1ea:	f000 f81f 	bl	800a22c <__sfp>
 800a1ee:	6060      	str	r0, [r4, #4]
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 f81b 	bl	800a22c <__sfp>
 800a1f6:	60a0      	str	r0, [r4, #8]
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 f817 	bl	800a22c <__sfp>
 800a1fe:	2200      	movs	r2, #0
 800a200:	2104      	movs	r1, #4
 800a202:	60e0      	str	r0, [r4, #12]
 800a204:	6860      	ldr	r0, [r4, #4]
 800a206:	f7ff ff81 	bl	800a10c <std>
 800a20a:	2201      	movs	r2, #1
 800a20c:	2109      	movs	r1, #9
 800a20e:	68a0      	ldr	r0, [r4, #8]
 800a210:	f7ff ff7c 	bl	800a10c <std>
 800a214:	2202      	movs	r2, #2
 800a216:	2112      	movs	r1, #18
 800a218:	68e0      	ldr	r0, [r4, #12]
 800a21a:	f7ff ff77 	bl	800a10c <std>
 800a21e:	2301      	movs	r3, #1
 800a220:	61a3      	str	r3, [r4, #24]
 800a222:	e7d1      	b.n	800a1c8 <__sinit+0xc>
 800a224:	0800cd40 	.word	0x0800cd40
 800a228:	0800a155 	.word	0x0800a155

0800a22c <__sfp>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	4607      	mov	r7, r0
 800a230:	f7ff ffac 	bl	800a18c <__sfp_lock_acquire>
 800a234:	4b1e      	ldr	r3, [pc, #120]	; (800a2b0 <__sfp+0x84>)
 800a236:	681e      	ldr	r6, [r3, #0]
 800a238:	69b3      	ldr	r3, [r6, #24]
 800a23a:	b913      	cbnz	r3, 800a242 <__sfp+0x16>
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff ffbd 	bl	800a1bc <__sinit>
 800a242:	3648      	adds	r6, #72	; 0x48
 800a244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a248:	3b01      	subs	r3, #1
 800a24a:	d503      	bpl.n	800a254 <__sfp+0x28>
 800a24c:	6833      	ldr	r3, [r6, #0]
 800a24e:	b30b      	cbz	r3, 800a294 <__sfp+0x68>
 800a250:	6836      	ldr	r6, [r6, #0]
 800a252:	e7f7      	b.n	800a244 <__sfp+0x18>
 800a254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a258:	b9d5      	cbnz	r5, 800a290 <__sfp+0x64>
 800a25a:	4b16      	ldr	r3, [pc, #88]	; (800a2b4 <__sfp+0x88>)
 800a25c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a260:	60e3      	str	r3, [r4, #12]
 800a262:	6665      	str	r5, [r4, #100]	; 0x64
 800a264:	f000 f86c 	bl	800a340 <__retarget_lock_init_recursive>
 800a268:	f7ff ff96 	bl	800a198 <__sfp_lock_release>
 800a26c:	2208      	movs	r2, #8
 800a26e:	4629      	mov	r1, r5
 800a270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a278:	6025      	str	r5, [r4, #0]
 800a27a:	61a5      	str	r5, [r4, #24]
 800a27c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a280:	f000 f86f 	bl	800a362 <memset>
 800a284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a28c:	4620      	mov	r0, r4
 800a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a290:	3468      	adds	r4, #104	; 0x68
 800a292:	e7d9      	b.n	800a248 <__sfp+0x1c>
 800a294:	2104      	movs	r1, #4
 800a296:	4638      	mov	r0, r7
 800a298:	f7ff ff62 	bl	800a160 <__sfmoreglue>
 800a29c:	4604      	mov	r4, r0
 800a29e:	6030      	str	r0, [r6, #0]
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d1d5      	bne.n	800a250 <__sfp+0x24>
 800a2a4:	f7ff ff78 	bl	800a198 <__sfp_lock_release>
 800a2a8:	230c      	movs	r3, #12
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	e7ee      	b.n	800a28c <__sfp+0x60>
 800a2ae:	bf00      	nop
 800a2b0:	0800cd40 	.word	0x0800cd40
 800a2b4:	ffff0001 	.word	0xffff0001

0800a2b8 <_fwalk_reent>:
 800a2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2bc:	4606      	mov	r6, r0
 800a2be:	4688      	mov	r8, r1
 800a2c0:	2700      	movs	r7, #0
 800a2c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2ca:	f1b9 0901 	subs.w	r9, r9, #1
 800a2ce:	d505      	bpl.n	800a2dc <_fwalk_reent+0x24>
 800a2d0:	6824      	ldr	r4, [r4, #0]
 800a2d2:	2c00      	cmp	r4, #0
 800a2d4:	d1f7      	bne.n	800a2c6 <_fwalk_reent+0xe>
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2dc:	89ab      	ldrh	r3, [r5, #12]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d907      	bls.n	800a2f2 <_fwalk_reent+0x3a>
 800a2e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	d003      	beq.n	800a2f2 <_fwalk_reent+0x3a>
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	47c0      	blx	r8
 800a2f0:	4307      	orrs	r7, r0
 800a2f2:	3568      	adds	r5, #104	; 0x68
 800a2f4:	e7e9      	b.n	800a2ca <_fwalk_reent+0x12>
	...

0800a2f8 <__libc_init_array>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	2600      	movs	r6, #0
 800a2fc:	4d0c      	ldr	r5, [pc, #48]	; (800a330 <__libc_init_array+0x38>)
 800a2fe:	4c0d      	ldr	r4, [pc, #52]	; (800a334 <__libc_init_array+0x3c>)
 800a300:	1b64      	subs	r4, r4, r5
 800a302:	10a4      	asrs	r4, r4, #2
 800a304:	42a6      	cmp	r6, r4
 800a306:	d109      	bne.n	800a31c <__libc_init_array+0x24>
 800a308:	f001 fd80 	bl	800be0c <_init>
 800a30c:	2600      	movs	r6, #0
 800a30e:	4d0a      	ldr	r5, [pc, #40]	; (800a338 <__libc_init_array+0x40>)
 800a310:	4c0a      	ldr	r4, [pc, #40]	; (800a33c <__libc_init_array+0x44>)
 800a312:	1b64      	subs	r4, r4, r5
 800a314:	10a4      	asrs	r4, r4, #2
 800a316:	42a6      	cmp	r6, r4
 800a318:	d105      	bne.n	800a326 <__libc_init_array+0x2e>
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a320:	4798      	blx	r3
 800a322:	3601      	adds	r6, #1
 800a324:	e7ee      	b.n	800a304 <__libc_init_array+0xc>
 800a326:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32a:	4798      	blx	r3
 800a32c:	3601      	adds	r6, #1
 800a32e:	e7f2      	b.n	800a316 <__libc_init_array+0x1e>
 800a330:	0800cd94 	.word	0x0800cd94
 800a334:	0800cd94 	.word	0x0800cd94
 800a338:	0800cd94 	.word	0x0800cd94
 800a33c:	0800cd98 	.word	0x0800cd98

0800a340 <__retarget_lock_init_recursive>:
 800a340:	4770      	bx	lr

0800a342 <__retarget_lock_acquire_recursive>:
 800a342:	4770      	bx	lr

0800a344 <__retarget_lock_release_recursive>:
 800a344:	4770      	bx	lr

0800a346 <memcpy>:
 800a346:	440a      	add	r2, r1
 800a348:	4291      	cmp	r1, r2
 800a34a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a34e:	d100      	bne.n	800a352 <memcpy+0xc>
 800a350:	4770      	bx	lr
 800a352:	b510      	push	{r4, lr}
 800a354:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a358:	4291      	cmp	r1, r2
 800a35a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a35e:	d1f9      	bne.n	800a354 <memcpy+0xe>
 800a360:	bd10      	pop	{r4, pc}

0800a362 <memset>:
 800a362:	4603      	mov	r3, r0
 800a364:	4402      	add	r2, r0
 800a366:	4293      	cmp	r3, r2
 800a368:	d100      	bne.n	800a36c <memset+0xa>
 800a36a:	4770      	bx	lr
 800a36c:	f803 1b01 	strb.w	r1, [r3], #1
 800a370:	e7f9      	b.n	800a366 <memset+0x4>
	...

0800a374 <_free_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4605      	mov	r5, r0
 800a378:	2900      	cmp	r1, #0
 800a37a:	d043      	beq.n	800a404 <_free_r+0x90>
 800a37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a380:	1f0c      	subs	r4, r1, #4
 800a382:	2b00      	cmp	r3, #0
 800a384:	bfb8      	it	lt
 800a386:	18e4      	addlt	r4, r4, r3
 800a388:	f000 fc0a 	bl	800aba0 <__malloc_lock>
 800a38c:	4a1e      	ldr	r2, [pc, #120]	; (800a408 <_free_r+0x94>)
 800a38e:	6813      	ldr	r3, [r2, #0]
 800a390:	4610      	mov	r0, r2
 800a392:	b933      	cbnz	r3, 800a3a2 <_free_r+0x2e>
 800a394:	6063      	str	r3, [r4, #4]
 800a396:	6014      	str	r4, [r2, #0]
 800a398:	4628      	mov	r0, r5
 800a39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a39e:	f000 bc05 	b.w	800abac <__malloc_unlock>
 800a3a2:	42a3      	cmp	r3, r4
 800a3a4:	d90a      	bls.n	800a3bc <_free_r+0x48>
 800a3a6:	6821      	ldr	r1, [r4, #0]
 800a3a8:	1862      	adds	r2, r4, r1
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	bf01      	itttt	eq
 800a3ae:	681a      	ldreq	r2, [r3, #0]
 800a3b0:	685b      	ldreq	r3, [r3, #4]
 800a3b2:	1852      	addeq	r2, r2, r1
 800a3b4:	6022      	streq	r2, [r4, #0]
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	6004      	str	r4, [r0, #0]
 800a3ba:	e7ed      	b.n	800a398 <_free_r+0x24>
 800a3bc:	461a      	mov	r2, r3
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	b10b      	cbz	r3, 800a3c6 <_free_r+0x52>
 800a3c2:	42a3      	cmp	r3, r4
 800a3c4:	d9fa      	bls.n	800a3bc <_free_r+0x48>
 800a3c6:	6811      	ldr	r1, [r2, #0]
 800a3c8:	1850      	adds	r0, r2, r1
 800a3ca:	42a0      	cmp	r0, r4
 800a3cc:	d10b      	bne.n	800a3e6 <_free_r+0x72>
 800a3ce:	6820      	ldr	r0, [r4, #0]
 800a3d0:	4401      	add	r1, r0
 800a3d2:	1850      	adds	r0, r2, r1
 800a3d4:	4283      	cmp	r3, r0
 800a3d6:	6011      	str	r1, [r2, #0]
 800a3d8:	d1de      	bne.n	800a398 <_free_r+0x24>
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	4401      	add	r1, r0
 800a3e0:	6011      	str	r1, [r2, #0]
 800a3e2:	6053      	str	r3, [r2, #4]
 800a3e4:	e7d8      	b.n	800a398 <_free_r+0x24>
 800a3e6:	d902      	bls.n	800a3ee <_free_r+0x7a>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	602b      	str	r3, [r5, #0]
 800a3ec:	e7d4      	b.n	800a398 <_free_r+0x24>
 800a3ee:	6820      	ldr	r0, [r4, #0]
 800a3f0:	1821      	adds	r1, r4, r0
 800a3f2:	428b      	cmp	r3, r1
 800a3f4:	bf01      	itttt	eq
 800a3f6:	6819      	ldreq	r1, [r3, #0]
 800a3f8:	685b      	ldreq	r3, [r3, #4]
 800a3fa:	1809      	addeq	r1, r1, r0
 800a3fc:	6021      	streq	r1, [r4, #0]
 800a3fe:	6063      	str	r3, [r4, #4]
 800a400:	6054      	str	r4, [r2, #4]
 800a402:	e7c9      	b.n	800a398 <_free_r+0x24>
 800a404:	bd38      	pop	{r3, r4, r5, pc}
 800a406:	bf00      	nop
 800a408:	20000388 	.word	0x20000388

0800a40c <_malloc_r>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	1ccd      	adds	r5, r1, #3
 800a410:	f025 0503 	bic.w	r5, r5, #3
 800a414:	3508      	adds	r5, #8
 800a416:	2d0c      	cmp	r5, #12
 800a418:	bf38      	it	cc
 800a41a:	250c      	movcc	r5, #12
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	4606      	mov	r6, r0
 800a420:	db01      	blt.n	800a426 <_malloc_r+0x1a>
 800a422:	42a9      	cmp	r1, r5
 800a424:	d903      	bls.n	800a42e <_malloc_r+0x22>
 800a426:	230c      	movs	r3, #12
 800a428:	6033      	str	r3, [r6, #0]
 800a42a:	2000      	movs	r0, #0
 800a42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a42e:	f000 fbb7 	bl	800aba0 <__malloc_lock>
 800a432:	4921      	ldr	r1, [pc, #132]	; (800a4b8 <_malloc_r+0xac>)
 800a434:	680a      	ldr	r2, [r1, #0]
 800a436:	4614      	mov	r4, r2
 800a438:	b99c      	cbnz	r4, 800a462 <_malloc_r+0x56>
 800a43a:	4f20      	ldr	r7, [pc, #128]	; (800a4bc <_malloc_r+0xb0>)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	b923      	cbnz	r3, 800a44a <_malloc_r+0x3e>
 800a440:	4621      	mov	r1, r4
 800a442:	4630      	mov	r0, r6
 800a444:	f000 f8de 	bl	800a604 <_sbrk_r>
 800a448:	6038      	str	r0, [r7, #0]
 800a44a:	4629      	mov	r1, r5
 800a44c:	4630      	mov	r0, r6
 800a44e:	f000 f8d9 	bl	800a604 <_sbrk_r>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d123      	bne.n	800a49e <_malloc_r+0x92>
 800a456:	230c      	movs	r3, #12
 800a458:	4630      	mov	r0, r6
 800a45a:	6033      	str	r3, [r6, #0]
 800a45c:	f000 fba6 	bl	800abac <__malloc_unlock>
 800a460:	e7e3      	b.n	800a42a <_malloc_r+0x1e>
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	1b5b      	subs	r3, r3, r5
 800a466:	d417      	bmi.n	800a498 <_malloc_r+0x8c>
 800a468:	2b0b      	cmp	r3, #11
 800a46a:	d903      	bls.n	800a474 <_malloc_r+0x68>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	441c      	add	r4, r3
 800a470:	6025      	str	r5, [r4, #0]
 800a472:	e004      	b.n	800a47e <_malloc_r+0x72>
 800a474:	6863      	ldr	r3, [r4, #4]
 800a476:	42a2      	cmp	r2, r4
 800a478:	bf0c      	ite	eq
 800a47a:	600b      	streq	r3, [r1, #0]
 800a47c:	6053      	strne	r3, [r2, #4]
 800a47e:	4630      	mov	r0, r6
 800a480:	f000 fb94 	bl	800abac <__malloc_unlock>
 800a484:	f104 000b 	add.w	r0, r4, #11
 800a488:	1d23      	adds	r3, r4, #4
 800a48a:	f020 0007 	bic.w	r0, r0, #7
 800a48e:	1ac2      	subs	r2, r0, r3
 800a490:	d0cc      	beq.n	800a42c <_malloc_r+0x20>
 800a492:	1a1b      	subs	r3, r3, r0
 800a494:	50a3      	str	r3, [r4, r2]
 800a496:	e7c9      	b.n	800a42c <_malloc_r+0x20>
 800a498:	4622      	mov	r2, r4
 800a49a:	6864      	ldr	r4, [r4, #4]
 800a49c:	e7cc      	b.n	800a438 <_malloc_r+0x2c>
 800a49e:	1cc4      	adds	r4, r0, #3
 800a4a0:	f024 0403 	bic.w	r4, r4, #3
 800a4a4:	42a0      	cmp	r0, r4
 800a4a6:	d0e3      	beq.n	800a470 <_malloc_r+0x64>
 800a4a8:	1a21      	subs	r1, r4, r0
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f000 f8aa 	bl	800a604 <_sbrk_r>
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d1dd      	bne.n	800a470 <_malloc_r+0x64>
 800a4b4:	e7cf      	b.n	800a456 <_malloc_r+0x4a>
 800a4b6:	bf00      	nop
 800a4b8:	20000388 	.word	0x20000388
 800a4bc:	2000038c 	.word	0x2000038c

0800a4c0 <iprintf>:
 800a4c0:	b40f      	push	{r0, r1, r2, r3}
 800a4c2:	4b0a      	ldr	r3, [pc, #40]	; (800a4ec <iprintf+0x2c>)
 800a4c4:	b513      	push	{r0, r1, r4, lr}
 800a4c6:	681c      	ldr	r4, [r3, #0]
 800a4c8:	b124      	cbz	r4, 800a4d4 <iprintf+0x14>
 800a4ca:	69a3      	ldr	r3, [r4, #24]
 800a4cc:	b913      	cbnz	r3, 800a4d4 <iprintf+0x14>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f7ff fe74 	bl	800a1bc <__sinit>
 800a4d4:	ab05      	add	r3, sp, #20
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	9a04      	ldr	r2, [sp, #16]
 800a4da:	68a1      	ldr	r1, [r4, #8]
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	f000 fec3 	bl	800b268 <_vfiprintf_r>
 800a4e2:	b002      	add	sp, #8
 800a4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e8:	b004      	add	sp, #16
 800a4ea:	4770      	bx	lr
 800a4ec:	200000ec 	.word	0x200000ec

0800a4f0 <putchar>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <putchar+0x24>)
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	681c      	ldr	r4, [r3, #0]
 800a4f8:	b124      	cbz	r4, 800a504 <putchar+0x14>
 800a4fa:	69a3      	ldr	r3, [r4, #24]
 800a4fc:	b913      	cbnz	r3, 800a504 <putchar+0x14>
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7ff fe5c 	bl	800a1bc <__sinit>
 800a504:	4629      	mov	r1, r5
 800a506:	4620      	mov	r0, r4
 800a508:	68a2      	ldr	r2, [r4, #8]
 800a50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a50e:	f001 babb 	b.w	800ba88 <_putc_r>
 800a512:	bf00      	nop
 800a514:	200000ec 	.word	0x200000ec

0800a518 <_puts_r>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	460e      	mov	r6, r1
 800a51c:	4605      	mov	r5, r0
 800a51e:	b118      	cbz	r0, 800a528 <_puts_r+0x10>
 800a520:	6983      	ldr	r3, [r0, #24]
 800a522:	b90b      	cbnz	r3, 800a528 <_puts_r+0x10>
 800a524:	f7ff fe4a 	bl	800a1bc <__sinit>
 800a528:	69ab      	ldr	r3, [r5, #24]
 800a52a:	68ac      	ldr	r4, [r5, #8]
 800a52c:	b913      	cbnz	r3, 800a534 <_puts_r+0x1c>
 800a52e:	4628      	mov	r0, r5
 800a530:	f7ff fe44 	bl	800a1bc <__sinit>
 800a534:	4b2c      	ldr	r3, [pc, #176]	; (800a5e8 <_puts_r+0xd0>)
 800a536:	429c      	cmp	r4, r3
 800a538:	d120      	bne.n	800a57c <_puts_r+0x64>
 800a53a:	686c      	ldr	r4, [r5, #4]
 800a53c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a53e:	07db      	lsls	r3, r3, #31
 800a540:	d405      	bmi.n	800a54e <_puts_r+0x36>
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	0598      	lsls	r0, r3, #22
 800a546:	d402      	bmi.n	800a54e <_puts_r+0x36>
 800a548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a54a:	f7ff fefa 	bl	800a342 <__retarget_lock_acquire_recursive>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	0719      	lsls	r1, r3, #28
 800a552:	d51d      	bpl.n	800a590 <_puts_r+0x78>
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	b1db      	cbz	r3, 800a590 <_puts_r+0x78>
 800a558:	3e01      	subs	r6, #1
 800a55a:	68a3      	ldr	r3, [r4, #8]
 800a55c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a560:	3b01      	subs	r3, #1
 800a562:	60a3      	str	r3, [r4, #8]
 800a564:	bb39      	cbnz	r1, 800a5b6 <_puts_r+0x9e>
 800a566:	2b00      	cmp	r3, #0
 800a568:	da38      	bge.n	800a5dc <_puts_r+0xc4>
 800a56a:	4622      	mov	r2, r4
 800a56c:	210a      	movs	r1, #10
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 f9be 	bl	800a8f0 <__swbuf_r>
 800a574:	3001      	adds	r0, #1
 800a576:	d011      	beq.n	800a59c <_puts_r+0x84>
 800a578:	250a      	movs	r5, #10
 800a57a:	e011      	b.n	800a5a0 <_puts_r+0x88>
 800a57c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ec <_puts_r+0xd4>)
 800a57e:	429c      	cmp	r4, r3
 800a580:	d101      	bne.n	800a586 <_puts_r+0x6e>
 800a582:	68ac      	ldr	r4, [r5, #8]
 800a584:	e7da      	b.n	800a53c <_puts_r+0x24>
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <_puts_r+0xd8>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	bf08      	it	eq
 800a58c:	68ec      	ldreq	r4, [r5, #12]
 800a58e:	e7d5      	b.n	800a53c <_puts_r+0x24>
 800a590:	4621      	mov	r1, r4
 800a592:	4628      	mov	r0, r5
 800a594:	f000 fa10 	bl	800a9b8 <__swsetup_r>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d0dd      	beq.n	800a558 <_puts_r+0x40>
 800a59c:	f04f 35ff 	mov.w	r5, #4294967295
 800a5a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5a2:	07da      	lsls	r2, r3, #31
 800a5a4:	d405      	bmi.n	800a5b2 <_puts_r+0x9a>
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	059b      	lsls	r3, r3, #22
 800a5aa:	d402      	bmi.n	800a5b2 <_puts_r+0x9a>
 800a5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ae:	f7ff fec9 	bl	800a344 <__retarget_lock_release_recursive>
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	bd70      	pop	{r4, r5, r6, pc}
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	da04      	bge.n	800a5c4 <_puts_r+0xac>
 800a5ba:	69a2      	ldr	r2, [r4, #24]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	dc06      	bgt.n	800a5ce <_puts_r+0xb6>
 800a5c0:	290a      	cmp	r1, #10
 800a5c2:	d004      	beq.n	800a5ce <_puts_r+0xb6>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	6022      	str	r2, [r4, #0]
 800a5ca:	7019      	strb	r1, [r3, #0]
 800a5cc:	e7c5      	b.n	800a55a <_puts_r+0x42>
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f000 f98d 	bl	800a8f0 <__swbuf_r>
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d1bf      	bne.n	800a55a <_puts_r+0x42>
 800a5da:	e7df      	b.n	800a59c <_puts_r+0x84>
 800a5dc:	250a      	movs	r5, #10
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	701d      	strb	r5, [r3, #0]
 800a5e6:	e7db      	b.n	800a5a0 <_puts_r+0x88>
 800a5e8:	0800cd00 	.word	0x0800cd00
 800a5ec:	0800cd20 	.word	0x0800cd20
 800a5f0:	0800cce0 	.word	0x0800cce0

0800a5f4 <puts>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <puts+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7ff bf8d 	b.w	800a518 <_puts_r>
 800a5fe:	bf00      	nop
 800a600:	200000ec 	.word	0x200000ec

0800a604 <_sbrk_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	2300      	movs	r3, #0
 800a608:	4d05      	ldr	r5, [pc, #20]	; (800a620 <_sbrk_r+0x1c>)
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	f7f8 ff18 	bl	8003444 <_sbrk>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_sbrk_r+0x1a>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_sbrk_r+0x1a>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20003cec 	.word	0x20003cec

0800a624 <siprintf>:
 800a624:	b40e      	push	{r1, r2, r3}
 800a626:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a62a:	b500      	push	{lr}
 800a62c:	b09c      	sub	sp, #112	; 0x70
 800a62e:	ab1d      	add	r3, sp, #116	; 0x74
 800a630:	9002      	str	r0, [sp, #8]
 800a632:	9006      	str	r0, [sp, #24]
 800a634:	9107      	str	r1, [sp, #28]
 800a636:	9104      	str	r1, [sp, #16]
 800a638:	4808      	ldr	r0, [pc, #32]	; (800a65c <siprintf+0x38>)
 800a63a:	4909      	ldr	r1, [pc, #36]	; (800a660 <siprintf+0x3c>)
 800a63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a640:	9105      	str	r1, [sp, #20]
 800a642:	6800      	ldr	r0, [r0, #0]
 800a644:	a902      	add	r1, sp, #8
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	f000 fb12 	bl	800ac70 <_svfiprintf_r>
 800a64c:	2200      	movs	r2, #0
 800a64e:	9b02      	ldr	r3, [sp, #8]
 800a650:	701a      	strb	r2, [r3, #0]
 800a652:	b01c      	add	sp, #112	; 0x70
 800a654:	f85d eb04 	ldr.w	lr, [sp], #4
 800a658:	b003      	add	sp, #12
 800a65a:	4770      	bx	lr
 800a65c:	200000ec 	.word	0x200000ec
 800a660:	ffff0208 	.word	0xffff0208

0800a664 <siscanf>:
 800a664:	b40e      	push	{r1, r2, r3}
 800a666:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a66a:	b530      	push	{r4, r5, lr}
 800a66c:	b09c      	sub	sp, #112	; 0x70
 800a66e:	ac1f      	add	r4, sp, #124	; 0x7c
 800a670:	f854 5b04 	ldr.w	r5, [r4], #4
 800a674:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a678:	9002      	str	r0, [sp, #8]
 800a67a:	9006      	str	r0, [sp, #24]
 800a67c:	f7f5 fd70 	bl	8000160 <strlen>
 800a680:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <siscanf+0x4c>)
 800a682:	9003      	str	r0, [sp, #12]
 800a684:	930b      	str	r3, [sp, #44]	; 0x2c
 800a686:	2300      	movs	r3, #0
 800a688:	930f      	str	r3, [sp, #60]	; 0x3c
 800a68a:	9314      	str	r3, [sp, #80]	; 0x50
 800a68c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a690:	9007      	str	r0, [sp, #28]
 800a692:	4808      	ldr	r0, [pc, #32]	; (800a6b4 <siscanf+0x50>)
 800a694:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a698:	462a      	mov	r2, r5
 800a69a:	4623      	mov	r3, r4
 800a69c:	a902      	add	r1, sp, #8
 800a69e:	6800      	ldr	r0, [r0, #0]
 800a6a0:	9401      	str	r4, [sp, #4]
 800a6a2:	f000 fc3f 	bl	800af24 <__ssvfiscanf_r>
 800a6a6:	b01c      	add	sp, #112	; 0x70
 800a6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6ac:	b003      	add	sp, #12
 800a6ae:	4770      	bx	lr
 800a6b0:	0800a6db 	.word	0x0800a6db
 800a6b4:	200000ec 	.word	0x200000ec

0800a6b8 <__sread>:
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c0:	f001 fa2a 	bl	800bb18 <_read_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	bfab      	itete	ge
 800a6c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a6cc:	181b      	addge	r3, r3, r0
 800a6ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6d2:	bfac      	ite	ge
 800a6d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6d6:	81a3      	strhlt	r3, [r4, #12]
 800a6d8:	bd10      	pop	{r4, pc}

0800a6da <__seofread>:
 800a6da:	2000      	movs	r0, #0
 800a6dc:	4770      	bx	lr

0800a6de <__swrite>:
 800a6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e2:	461f      	mov	r7, r3
 800a6e4:	898b      	ldrh	r3, [r1, #12]
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	05db      	lsls	r3, r3, #23
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	4616      	mov	r6, r2
 800a6ee:	d505      	bpl.n	800a6fc <__swrite+0x1e>
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	f000 f9dc 	bl	800aab4 <_lseek_r>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	4632      	mov	r2, r6
 800a700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	4628      	mov	r0, r5
 800a708:	463b      	mov	r3, r7
 800a70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a712:	f000 b93f 	b.w	800a994 <_write_r>

0800a716 <__sseek>:
 800a716:	b510      	push	{r4, lr}
 800a718:	460c      	mov	r4, r1
 800a71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71e:	f000 f9c9 	bl	800aab4 <_lseek_r>
 800a722:	1c43      	adds	r3, r0, #1
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	bf15      	itete	ne
 800a728:	6560      	strne	r0, [r4, #84]	; 0x54
 800a72a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a72e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a732:	81a3      	strheq	r3, [r4, #12]
 800a734:	bf18      	it	ne
 800a736:	81a3      	strhne	r3, [r4, #12]
 800a738:	bd10      	pop	{r4, pc}

0800a73a <__sclose>:
 800a73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73e:	f000 b9a9 	b.w	800aa94 <_close_r>

0800a742 <strcpy>:
 800a742:	4603      	mov	r3, r0
 800a744:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a748:	f803 2b01 	strb.w	r2, [r3], #1
 800a74c:	2a00      	cmp	r2, #0
 800a74e:	d1f9      	bne.n	800a744 <strcpy+0x2>
 800a750:	4770      	bx	lr

0800a752 <strncmp>:
 800a752:	b510      	push	{r4, lr}
 800a754:	b16a      	cbz	r2, 800a772 <strncmp+0x20>
 800a756:	3901      	subs	r1, #1
 800a758:	1884      	adds	r4, r0, r2
 800a75a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a75e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a762:	4293      	cmp	r3, r2
 800a764:	d103      	bne.n	800a76e <strncmp+0x1c>
 800a766:	42a0      	cmp	r0, r4
 800a768:	d001      	beq.n	800a76e <strncmp+0x1c>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1f5      	bne.n	800a75a <strncmp+0x8>
 800a76e:	1a98      	subs	r0, r3, r2
 800a770:	bd10      	pop	{r4, pc}
 800a772:	4610      	mov	r0, r2
 800a774:	e7fc      	b.n	800a770 <strncmp+0x1e>

0800a776 <strncpy>:
 800a776:	4603      	mov	r3, r0
 800a778:	b510      	push	{r4, lr}
 800a77a:	3901      	subs	r1, #1
 800a77c:	b132      	cbz	r2, 800a78c <strncpy+0x16>
 800a77e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a782:	3a01      	subs	r2, #1
 800a784:	f803 4b01 	strb.w	r4, [r3], #1
 800a788:	2c00      	cmp	r4, #0
 800a78a:	d1f7      	bne.n	800a77c <strncpy+0x6>
 800a78c:	2100      	movs	r1, #0
 800a78e:	441a      	add	r2, r3
 800a790:	4293      	cmp	r3, r2
 800a792:	d100      	bne.n	800a796 <strncpy+0x20>
 800a794:	bd10      	pop	{r4, pc}
 800a796:	f803 1b01 	strb.w	r1, [r3], #1
 800a79a:	e7f9      	b.n	800a790 <strncpy+0x1a>

0800a79c <strstr>:
 800a79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a79e:	780c      	ldrb	r4, [r1, #0]
 800a7a0:	b164      	cbz	r4, 800a7bc <strstr+0x20>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	781a      	ldrb	r2, [r3, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	1c5e      	adds	r6, r3, #1
 800a7aa:	b90a      	cbnz	r2, 800a7b0 <strstr+0x14>
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	e005      	b.n	800a7bc <strstr+0x20>
 800a7b0:	4294      	cmp	r4, r2
 800a7b2:	d108      	bne.n	800a7c6 <strstr+0x2a>
 800a7b4:	460d      	mov	r5, r1
 800a7b6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a7ba:	b902      	cbnz	r2, 800a7be <strstr+0x22>
 800a7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7be:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a7c2:	4297      	cmp	r7, r2
 800a7c4:	d0f7      	beq.n	800a7b6 <strstr+0x1a>
 800a7c6:	4633      	mov	r3, r6
 800a7c8:	e7ec      	b.n	800a7a4 <strstr+0x8>
	...

0800a7cc <_strtol_l.isra.0>:
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d2:	4686      	mov	lr, r0
 800a7d4:	d001      	beq.n	800a7da <_strtol_l.isra.0+0xe>
 800a7d6:	2b24      	cmp	r3, #36	; 0x24
 800a7d8:	d906      	bls.n	800a7e8 <_strtol_l.isra.0+0x1c>
 800a7da:	f7ff fbbd 	bl	8009f58 <__errno>
 800a7de:	2316      	movs	r3, #22
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e8:	468c      	mov	ip, r1
 800a7ea:	4e3a      	ldr	r6, [pc, #232]	; (800a8d4 <_strtol_l.isra.0+0x108>)
 800a7ec:	4660      	mov	r0, ip
 800a7ee:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a7f2:	5da5      	ldrb	r5, [r4, r6]
 800a7f4:	f015 0508 	ands.w	r5, r5, #8
 800a7f8:	d1f8      	bne.n	800a7ec <_strtol_l.isra.0+0x20>
 800a7fa:	2c2d      	cmp	r4, #45	; 0x2d
 800a7fc:	d133      	bne.n	800a866 <_strtol_l.isra.0+0x9a>
 800a7fe:	f04f 0801 	mov.w	r8, #1
 800a802:	f89c 4000 	ldrb.w	r4, [ip]
 800a806:	f100 0c02 	add.w	ip, r0, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d05d      	beq.n	800a8ca <_strtol_l.isra.0+0xfe>
 800a80e:	2b10      	cmp	r3, #16
 800a810:	d10c      	bne.n	800a82c <_strtol_l.isra.0+0x60>
 800a812:	2c30      	cmp	r4, #48	; 0x30
 800a814:	d10a      	bne.n	800a82c <_strtol_l.isra.0+0x60>
 800a816:	f89c 0000 	ldrb.w	r0, [ip]
 800a81a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a81e:	2858      	cmp	r0, #88	; 0x58
 800a820:	d14e      	bne.n	800a8c0 <_strtol_l.isra.0+0xf4>
 800a822:	2310      	movs	r3, #16
 800a824:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a828:	f10c 0c02 	add.w	ip, ip, #2
 800a82c:	2500      	movs	r5, #0
 800a82e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a832:	3f01      	subs	r7, #1
 800a834:	fbb7 f9f3 	udiv	r9, r7, r3
 800a838:	4628      	mov	r0, r5
 800a83a:	fb03 7a19 	mls	sl, r3, r9, r7
 800a83e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a842:	2e09      	cmp	r6, #9
 800a844:	d818      	bhi.n	800a878 <_strtol_l.isra.0+0xac>
 800a846:	4634      	mov	r4, r6
 800a848:	42a3      	cmp	r3, r4
 800a84a:	dd24      	ble.n	800a896 <_strtol_l.isra.0+0xca>
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	db1f      	blt.n	800a890 <_strtol_l.isra.0+0xc4>
 800a850:	4581      	cmp	r9, r0
 800a852:	d31d      	bcc.n	800a890 <_strtol_l.isra.0+0xc4>
 800a854:	d101      	bne.n	800a85a <_strtol_l.isra.0+0x8e>
 800a856:	45a2      	cmp	sl, r4
 800a858:	db1a      	blt.n	800a890 <_strtol_l.isra.0+0xc4>
 800a85a:	2501      	movs	r5, #1
 800a85c:	fb00 4003 	mla	r0, r0, r3, r4
 800a860:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a864:	e7eb      	b.n	800a83e <_strtol_l.isra.0+0x72>
 800a866:	2c2b      	cmp	r4, #43	; 0x2b
 800a868:	bf08      	it	eq
 800a86a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a86e:	46a8      	mov	r8, r5
 800a870:	bf08      	it	eq
 800a872:	f100 0c02 	addeq.w	ip, r0, #2
 800a876:	e7c8      	b.n	800a80a <_strtol_l.isra.0+0x3e>
 800a878:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a87c:	2e19      	cmp	r6, #25
 800a87e:	d801      	bhi.n	800a884 <_strtol_l.isra.0+0xb8>
 800a880:	3c37      	subs	r4, #55	; 0x37
 800a882:	e7e1      	b.n	800a848 <_strtol_l.isra.0+0x7c>
 800a884:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a888:	2e19      	cmp	r6, #25
 800a88a:	d804      	bhi.n	800a896 <_strtol_l.isra.0+0xca>
 800a88c:	3c57      	subs	r4, #87	; 0x57
 800a88e:	e7db      	b.n	800a848 <_strtol_l.isra.0+0x7c>
 800a890:	f04f 35ff 	mov.w	r5, #4294967295
 800a894:	e7e4      	b.n	800a860 <_strtol_l.isra.0+0x94>
 800a896:	2d00      	cmp	r5, #0
 800a898:	da08      	bge.n	800a8ac <_strtol_l.isra.0+0xe0>
 800a89a:	2322      	movs	r3, #34	; 0x22
 800a89c:	4638      	mov	r0, r7
 800a89e:	f8ce 3000 	str.w	r3, [lr]
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d09e      	beq.n	800a7e4 <_strtol_l.isra.0+0x18>
 800a8a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a8aa:	e007      	b.n	800a8bc <_strtol_l.isra.0+0xf0>
 800a8ac:	f1b8 0f00 	cmp.w	r8, #0
 800a8b0:	d000      	beq.n	800a8b4 <_strtol_l.isra.0+0xe8>
 800a8b2:	4240      	negs	r0, r0
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	d095      	beq.n	800a7e4 <_strtol_l.isra.0+0x18>
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	d1f4      	bne.n	800a8a6 <_strtol_l.isra.0+0xda>
 800a8bc:	6011      	str	r1, [r2, #0]
 800a8be:	e791      	b.n	800a7e4 <_strtol_l.isra.0+0x18>
 800a8c0:	2430      	movs	r4, #48	; 0x30
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1b2      	bne.n	800a82c <_strtol_l.isra.0+0x60>
 800a8c6:	2308      	movs	r3, #8
 800a8c8:	e7b0      	b.n	800a82c <_strtol_l.isra.0+0x60>
 800a8ca:	2c30      	cmp	r4, #48	; 0x30
 800a8cc:	d0a3      	beq.n	800a816 <_strtol_l.isra.0+0x4a>
 800a8ce:	230a      	movs	r3, #10
 800a8d0:	e7ac      	b.n	800a82c <_strtol_l.isra.0+0x60>
 800a8d2:	bf00      	nop
 800a8d4:	0800cbdf 	.word	0x0800cbdf

0800a8d8 <_strtol_r>:
 800a8d8:	f7ff bf78 	b.w	800a7cc <_strtol_l.isra.0>

0800a8dc <strtol>:
 800a8dc:	4613      	mov	r3, r2
 800a8de:	460a      	mov	r2, r1
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	4802      	ldr	r0, [pc, #8]	; (800a8ec <strtol+0x10>)
 800a8e4:	6800      	ldr	r0, [r0, #0]
 800a8e6:	f7ff bf71 	b.w	800a7cc <_strtol_l.isra.0>
 800a8ea:	bf00      	nop
 800a8ec:	200000ec 	.word	0x200000ec

0800a8f0 <__swbuf_r>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	460e      	mov	r6, r1
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	b118      	cbz	r0, 800a902 <__swbuf_r+0x12>
 800a8fa:	6983      	ldr	r3, [r0, #24]
 800a8fc:	b90b      	cbnz	r3, 800a902 <__swbuf_r+0x12>
 800a8fe:	f7ff fc5d 	bl	800a1bc <__sinit>
 800a902:	4b21      	ldr	r3, [pc, #132]	; (800a988 <__swbuf_r+0x98>)
 800a904:	429c      	cmp	r4, r3
 800a906:	d12b      	bne.n	800a960 <__swbuf_r+0x70>
 800a908:	686c      	ldr	r4, [r5, #4]
 800a90a:	69a3      	ldr	r3, [r4, #24]
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	071a      	lsls	r2, r3, #28
 800a912:	d52f      	bpl.n	800a974 <__swbuf_r+0x84>
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	b36b      	cbz	r3, 800a974 <__swbuf_r+0x84>
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	6820      	ldr	r0, [r4, #0]
 800a91c:	b2f6      	uxtb	r6, r6
 800a91e:	1ac0      	subs	r0, r0, r3
 800a920:	6963      	ldr	r3, [r4, #20]
 800a922:	4637      	mov	r7, r6
 800a924:	4283      	cmp	r3, r0
 800a926:	dc04      	bgt.n	800a932 <__swbuf_r+0x42>
 800a928:	4621      	mov	r1, r4
 800a92a:	4628      	mov	r0, r5
 800a92c:	f7ff fba0 	bl	800a070 <_fflush_r>
 800a930:	bb30      	cbnz	r0, 800a980 <__swbuf_r+0x90>
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	3001      	adds	r0, #1
 800a936:	3b01      	subs	r3, #1
 800a938:	60a3      	str	r3, [r4, #8]
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	6022      	str	r2, [r4, #0]
 800a940:	701e      	strb	r6, [r3, #0]
 800a942:	6963      	ldr	r3, [r4, #20]
 800a944:	4283      	cmp	r3, r0
 800a946:	d004      	beq.n	800a952 <__swbuf_r+0x62>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	07db      	lsls	r3, r3, #31
 800a94c:	d506      	bpl.n	800a95c <__swbuf_r+0x6c>
 800a94e:	2e0a      	cmp	r6, #10
 800a950:	d104      	bne.n	800a95c <__swbuf_r+0x6c>
 800a952:	4621      	mov	r1, r4
 800a954:	4628      	mov	r0, r5
 800a956:	f7ff fb8b 	bl	800a070 <_fflush_r>
 800a95a:	b988      	cbnz	r0, 800a980 <__swbuf_r+0x90>
 800a95c:	4638      	mov	r0, r7
 800a95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a960:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <__swbuf_r+0x9c>)
 800a962:	429c      	cmp	r4, r3
 800a964:	d101      	bne.n	800a96a <__swbuf_r+0x7a>
 800a966:	68ac      	ldr	r4, [r5, #8]
 800a968:	e7cf      	b.n	800a90a <__swbuf_r+0x1a>
 800a96a:	4b09      	ldr	r3, [pc, #36]	; (800a990 <__swbuf_r+0xa0>)
 800a96c:	429c      	cmp	r4, r3
 800a96e:	bf08      	it	eq
 800a970:	68ec      	ldreq	r4, [r5, #12]
 800a972:	e7ca      	b.n	800a90a <__swbuf_r+0x1a>
 800a974:	4621      	mov	r1, r4
 800a976:	4628      	mov	r0, r5
 800a978:	f000 f81e 	bl	800a9b8 <__swsetup_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d0cb      	beq.n	800a918 <__swbuf_r+0x28>
 800a980:	f04f 37ff 	mov.w	r7, #4294967295
 800a984:	e7ea      	b.n	800a95c <__swbuf_r+0x6c>
 800a986:	bf00      	nop
 800a988:	0800cd00 	.word	0x0800cd00
 800a98c:	0800cd20 	.word	0x0800cd20
 800a990:	0800cce0 	.word	0x0800cce0

0800a994 <_write_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	4611      	mov	r1, r2
 800a99c:	2200      	movs	r2, #0
 800a99e:	4d05      	ldr	r5, [pc, #20]	; (800a9b4 <_write_r+0x20>)
 800a9a0:	602a      	str	r2, [r5, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f7f7 fcfa 	bl	800239c <_write>
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	d102      	bne.n	800a9b2 <_write_r+0x1e>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	b103      	cbz	r3, 800a9b2 <_write_r+0x1e>
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	20003cec 	.word	0x20003cec

0800a9b8 <__swsetup_r>:
 800a9b8:	4b32      	ldr	r3, [pc, #200]	; (800aa84 <__swsetup_r+0xcc>)
 800a9ba:	b570      	push	{r4, r5, r6, lr}
 800a9bc:	681d      	ldr	r5, [r3, #0]
 800a9be:	4606      	mov	r6, r0
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	b125      	cbz	r5, 800a9ce <__swsetup_r+0x16>
 800a9c4:	69ab      	ldr	r3, [r5, #24]
 800a9c6:	b913      	cbnz	r3, 800a9ce <__swsetup_r+0x16>
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f7ff fbf7 	bl	800a1bc <__sinit>
 800a9ce:	4b2e      	ldr	r3, [pc, #184]	; (800aa88 <__swsetup_r+0xd0>)
 800a9d0:	429c      	cmp	r4, r3
 800a9d2:	d10f      	bne.n	800a9f4 <__swsetup_r+0x3c>
 800a9d4:	686c      	ldr	r4, [r5, #4]
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9dc:	0719      	lsls	r1, r3, #28
 800a9de:	d42c      	bmi.n	800aa3a <__swsetup_r+0x82>
 800a9e0:	06dd      	lsls	r5, r3, #27
 800a9e2:	d411      	bmi.n	800aa08 <__swsetup_r+0x50>
 800a9e4:	2309      	movs	r3, #9
 800a9e6:	6033      	str	r3, [r6, #0]
 800a9e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	e03e      	b.n	800aa72 <__swsetup_r+0xba>
 800a9f4:	4b25      	ldr	r3, [pc, #148]	; (800aa8c <__swsetup_r+0xd4>)
 800a9f6:	429c      	cmp	r4, r3
 800a9f8:	d101      	bne.n	800a9fe <__swsetup_r+0x46>
 800a9fa:	68ac      	ldr	r4, [r5, #8]
 800a9fc:	e7eb      	b.n	800a9d6 <__swsetup_r+0x1e>
 800a9fe:	4b24      	ldr	r3, [pc, #144]	; (800aa90 <__swsetup_r+0xd8>)
 800aa00:	429c      	cmp	r4, r3
 800aa02:	bf08      	it	eq
 800aa04:	68ec      	ldreq	r4, [r5, #12]
 800aa06:	e7e6      	b.n	800a9d6 <__swsetup_r+0x1e>
 800aa08:	0758      	lsls	r0, r3, #29
 800aa0a:	d512      	bpl.n	800aa32 <__swsetup_r+0x7a>
 800aa0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa0e:	b141      	cbz	r1, 800aa22 <__swsetup_r+0x6a>
 800aa10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa14:	4299      	cmp	r1, r3
 800aa16:	d002      	beq.n	800aa1e <__swsetup_r+0x66>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff fcab 	bl	800a374 <_free_r>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6363      	str	r3, [r4, #52]	; 0x34
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6063      	str	r3, [r4, #4]
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	f043 0308 	orr.w	r3, r3, #8
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	b94b      	cbnz	r3, 800aa52 <__swsetup_r+0x9a>
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa48:	d003      	beq.n	800aa52 <__swsetup_r+0x9a>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f000 f867 	bl	800ab20 <__smakebuf_r>
 800aa52:	89a0      	ldrh	r0, [r4, #12]
 800aa54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa58:	f010 0301 	ands.w	r3, r0, #1
 800aa5c:	d00a      	beq.n	800aa74 <__swsetup_r+0xbc>
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60a3      	str	r3, [r4, #8]
 800aa62:	6963      	ldr	r3, [r4, #20]
 800aa64:	425b      	negs	r3, r3
 800aa66:	61a3      	str	r3, [r4, #24]
 800aa68:	6923      	ldr	r3, [r4, #16]
 800aa6a:	b943      	cbnz	r3, 800aa7e <__swsetup_r+0xc6>
 800aa6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa70:	d1ba      	bne.n	800a9e8 <__swsetup_r+0x30>
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	0781      	lsls	r1, r0, #30
 800aa76:	bf58      	it	pl
 800aa78:	6963      	ldrpl	r3, [r4, #20]
 800aa7a:	60a3      	str	r3, [r4, #8]
 800aa7c:	e7f4      	b.n	800aa68 <__swsetup_r+0xb0>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e7f7      	b.n	800aa72 <__swsetup_r+0xba>
 800aa82:	bf00      	nop
 800aa84:	200000ec 	.word	0x200000ec
 800aa88:	0800cd00 	.word	0x0800cd00
 800aa8c:	0800cd20 	.word	0x0800cd20
 800aa90:	0800cce0 	.word	0x0800cce0

0800aa94 <_close_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	2300      	movs	r3, #0
 800aa98:	4d05      	ldr	r5, [pc, #20]	; (800aab0 <_close_r+0x1c>)
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f8 fc9f 	bl	80033e2 <_close>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_close_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_close_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20003cec 	.word	0x20003cec

0800aab4 <_lseek_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	4611      	mov	r1, r2
 800aabc:	2200      	movs	r2, #0
 800aabe:	4d05      	ldr	r5, [pc, #20]	; (800aad4 <_lseek_r+0x20>)
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	f7f8 fcb1 	bl	800342a <_lseek>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_lseek_r+0x1e>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_lseek_r+0x1e>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	20003cec 	.word	0x20003cec

0800aad8 <__swhatbuf_r>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	460e      	mov	r6, r1
 800aadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae0:	4614      	mov	r4, r2
 800aae2:	2900      	cmp	r1, #0
 800aae4:	461d      	mov	r5, r3
 800aae6:	b096      	sub	sp, #88	; 0x58
 800aae8:	da07      	bge.n	800aafa <__swhatbuf_r+0x22>
 800aaea:	2300      	movs	r3, #0
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	89b3      	ldrh	r3, [r6, #12]
 800aaf0:	061a      	lsls	r2, r3, #24
 800aaf2:	d410      	bmi.n	800ab16 <__swhatbuf_r+0x3e>
 800aaf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf8:	e00e      	b.n	800ab18 <__swhatbuf_r+0x40>
 800aafa:	466a      	mov	r2, sp
 800aafc:	f001 f90e 	bl	800bd1c <_fstat_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dbf2      	blt.n	800aaea <__swhatbuf_r+0x12>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab0e:	425a      	negs	r2, r3
 800ab10:	415a      	adcs	r2, r3
 800ab12:	602a      	str	r2, [r5, #0]
 800ab14:	e7ee      	b.n	800aaf4 <__swhatbuf_r+0x1c>
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	2000      	movs	r0, #0
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	b016      	add	sp, #88	; 0x58
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}

0800ab20 <__smakebuf_r>:
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab24:	079d      	lsls	r5, r3, #30
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	d507      	bpl.n	800ab3c <__smakebuf_r+0x1c>
 800ab2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	2301      	movs	r3, #1
 800ab36:	6163      	str	r3, [r4, #20]
 800ab38:	b002      	add	sp, #8
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	466a      	mov	r2, sp
 800ab3e:	ab01      	add	r3, sp, #4
 800ab40:	f7ff ffca 	bl	800aad8 <__swhatbuf_r>
 800ab44:	9900      	ldr	r1, [sp, #0]
 800ab46:	4605      	mov	r5, r0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff fc5f 	bl	800a40c <_malloc_r>
 800ab4e:	b948      	cbnz	r0, 800ab64 <__smakebuf_r+0x44>
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	059a      	lsls	r2, r3, #22
 800ab56:	d4ef      	bmi.n	800ab38 <__smakebuf_r+0x18>
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	f043 0302 	orr.w	r3, r3, #2
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	e7e3      	b.n	800ab2c <__smakebuf_r+0xc>
 800ab64:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <__smakebuf_r+0x7c>)
 800ab66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	6020      	str	r0, [r4, #0]
 800ab6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	9b00      	ldr	r3, [sp, #0]
 800ab74:	6120      	str	r0, [r4, #16]
 800ab76:	6163      	str	r3, [r4, #20]
 800ab78:	9b01      	ldr	r3, [sp, #4]
 800ab7a:	b15b      	cbz	r3, 800ab94 <__smakebuf_r+0x74>
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab82:	f001 f8dd 	bl	800bd40 <_isatty_r>
 800ab86:	b128      	cbz	r0, 800ab94 <__smakebuf_r+0x74>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f023 0303 	bic.w	r3, r3, #3
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	81a3      	strh	r3, [r4, #12]
 800ab94:	89a0      	ldrh	r0, [r4, #12]
 800ab96:	4305      	orrs	r5, r0
 800ab98:	81a5      	strh	r5, [r4, #12]
 800ab9a:	e7cd      	b.n	800ab38 <__smakebuf_r+0x18>
 800ab9c:	0800a155 	.word	0x0800a155

0800aba0 <__malloc_lock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	; (800aba8 <__malloc_lock+0x8>)
 800aba2:	f7ff bbce 	b.w	800a342 <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	20003ce5 	.word	0x20003ce5

0800abac <__malloc_unlock>:
 800abac:	4801      	ldr	r0, [pc, #4]	; (800abb4 <__malloc_unlock+0x8>)
 800abae:	f7ff bbc9 	b.w	800a344 <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	20003ce5 	.word	0x20003ce5

0800abb8 <__ssputs_r>:
 800abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abbc:	688e      	ldr	r6, [r1, #8]
 800abbe:	4682      	mov	sl, r0
 800abc0:	429e      	cmp	r6, r3
 800abc2:	460c      	mov	r4, r1
 800abc4:	4690      	mov	r8, r2
 800abc6:	461f      	mov	r7, r3
 800abc8:	d838      	bhi.n	800ac3c <__ssputs_r+0x84>
 800abca:	898a      	ldrh	r2, [r1, #12]
 800abcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abd0:	d032      	beq.n	800ac38 <__ssputs_r+0x80>
 800abd2:	6825      	ldr	r5, [r4, #0]
 800abd4:	6909      	ldr	r1, [r1, #16]
 800abd6:	3301      	adds	r3, #1
 800abd8:	eba5 0901 	sub.w	r9, r5, r1
 800abdc:	6965      	ldr	r5, [r4, #20]
 800abde:	444b      	add	r3, r9
 800abe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abe8:	106d      	asrs	r5, r5, #1
 800abea:	429d      	cmp	r5, r3
 800abec:	bf38      	it	cc
 800abee:	461d      	movcc	r5, r3
 800abf0:	0553      	lsls	r3, r2, #21
 800abf2:	d531      	bpl.n	800ac58 <__ssputs_r+0xa0>
 800abf4:	4629      	mov	r1, r5
 800abf6:	f7ff fc09 	bl	800a40c <_malloc_r>
 800abfa:	4606      	mov	r6, r0
 800abfc:	b950      	cbnz	r0, 800ac14 <__ssputs_r+0x5c>
 800abfe:	230c      	movs	r3, #12
 800ac00:	f04f 30ff 	mov.w	r0, #4294967295
 800ac04:	f8ca 3000 	str.w	r3, [sl]
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0e:	81a3      	strh	r3, [r4, #12]
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	464a      	mov	r2, r9
 800ac16:	6921      	ldr	r1, [r4, #16]
 800ac18:	f7ff fb95 	bl	800a346 <memcpy>
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac26:	81a3      	strh	r3, [r4, #12]
 800ac28:	6126      	str	r6, [r4, #16]
 800ac2a:	444e      	add	r6, r9
 800ac2c:	6026      	str	r6, [r4, #0]
 800ac2e:	463e      	mov	r6, r7
 800ac30:	6165      	str	r5, [r4, #20]
 800ac32:	eba5 0509 	sub.w	r5, r5, r9
 800ac36:	60a5      	str	r5, [r4, #8]
 800ac38:	42be      	cmp	r6, r7
 800ac3a:	d900      	bls.n	800ac3e <__ssputs_r+0x86>
 800ac3c:	463e      	mov	r6, r7
 800ac3e:	4632      	mov	r2, r6
 800ac40:	4641      	mov	r1, r8
 800ac42:	6820      	ldr	r0, [r4, #0]
 800ac44:	f001 f89a 	bl	800bd7c <memmove>
 800ac48:	68a3      	ldr	r3, [r4, #8]
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	1b9b      	subs	r3, r3, r6
 800ac4e:	4432      	add	r2, r6
 800ac50:	2000      	movs	r0, #0
 800ac52:	60a3      	str	r3, [r4, #8]
 800ac54:	6022      	str	r2, [r4, #0]
 800ac56:	e7db      	b.n	800ac10 <__ssputs_r+0x58>
 800ac58:	462a      	mov	r2, r5
 800ac5a:	f001 f8a9 	bl	800bdb0 <_realloc_r>
 800ac5e:	4606      	mov	r6, r0
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1e1      	bne.n	800ac28 <__ssputs_r+0x70>
 800ac64:	4650      	mov	r0, sl
 800ac66:	6921      	ldr	r1, [r4, #16]
 800ac68:	f7ff fb84 	bl	800a374 <_free_r>
 800ac6c:	e7c7      	b.n	800abfe <__ssputs_r+0x46>
	...

0800ac70 <_svfiprintf_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	4698      	mov	r8, r3
 800ac76:	898b      	ldrh	r3, [r1, #12]
 800ac78:	4607      	mov	r7, r0
 800ac7a:	061b      	lsls	r3, r3, #24
 800ac7c:	460d      	mov	r5, r1
 800ac7e:	4614      	mov	r4, r2
 800ac80:	b09d      	sub	sp, #116	; 0x74
 800ac82:	d50e      	bpl.n	800aca2 <_svfiprintf_r+0x32>
 800ac84:	690b      	ldr	r3, [r1, #16]
 800ac86:	b963      	cbnz	r3, 800aca2 <_svfiprintf_r+0x32>
 800ac88:	2140      	movs	r1, #64	; 0x40
 800ac8a:	f7ff fbbf 	bl	800a40c <_malloc_r>
 800ac8e:	6028      	str	r0, [r5, #0]
 800ac90:	6128      	str	r0, [r5, #16]
 800ac92:	b920      	cbnz	r0, 800ac9e <_svfiprintf_r+0x2e>
 800ac94:	230c      	movs	r3, #12
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	e0d1      	b.n	800ae42 <_svfiprintf_r+0x1d2>
 800ac9e:	2340      	movs	r3, #64	; 0x40
 800aca0:	616b      	str	r3, [r5, #20]
 800aca2:	2300      	movs	r3, #0
 800aca4:	9309      	str	r3, [sp, #36]	; 0x24
 800aca6:	2320      	movs	r3, #32
 800aca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acac:	2330      	movs	r3, #48	; 0x30
 800acae:	f04f 0901 	mov.w	r9, #1
 800acb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800acb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ae5c <_svfiprintf_r+0x1ec>
 800acba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acbe:	4623      	mov	r3, r4
 800acc0:	469a      	mov	sl, r3
 800acc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acc6:	b10a      	cbz	r2, 800accc <_svfiprintf_r+0x5c>
 800acc8:	2a25      	cmp	r2, #37	; 0x25
 800acca:	d1f9      	bne.n	800acc0 <_svfiprintf_r+0x50>
 800accc:	ebba 0b04 	subs.w	fp, sl, r4
 800acd0:	d00b      	beq.n	800acea <_svfiprintf_r+0x7a>
 800acd2:	465b      	mov	r3, fp
 800acd4:	4622      	mov	r2, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	4638      	mov	r0, r7
 800acda:	f7ff ff6d 	bl	800abb8 <__ssputs_r>
 800acde:	3001      	adds	r0, #1
 800ace0:	f000 80aa 	beq.w	800ae38 <_svfiprintf_r+0x1c8>
 800ace4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace6:	445a      	add	r2, fp
 800ace8:	9209      	str	r2, [sp, #36]	; 0x24
 800acea:	f89a 3000 	ldrb.w	r3, [sl]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80a2 	beq.w	800ae38 <_svfiprintf_r+0x1c8>
 800acf4:	2300      	movs	r3, #0
 800acf6:	f04f 32ff 	mov.w	r2, #4294967295
 800acfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acfe:	f10a 0a01 	add.w	sl, sl, #1
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	9307      	str	r3, [sp, #28]
 800ad06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad0c:	4654      	mov	r4, sl
 800ad0e:	2205      	movs	r2, #5
 800ad10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad14:	4851      	ldr	r0, [pc, #324]	; (800ae5c <_svfiprintf_r+0x1ec>)
 800ad16:	f001 f823 	bl	800bd60 <memchr>
 800ad1a:	9a04      	ldr	r2, [sp, #16]
 800ad1c:	b9d8      	cbnz	r0, 800ad56 <_svfiprintf_r+0xe6>
 800ad1e:	06d0      	lsls	r0, r2, #27
 800ad20:	bf44      	itt	mi
 800ad22:	2320      	movmi	r3, #32
 800ad24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad28:	0711      	lsls	r1, r2, #28
 800ad2a:	bf44      	itt	mi
 800ad2c:	232b      	movmi	r3, #43	; 0x2b
 800ad2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad32:	f89a 3000 	ldrb.w	r3, [sl]
 800ad36:	2b2a      	cmp	r3, #42	; 0x2a
 800ad38:	d015      	beq.n	800ad66 <_svfiprintf_r+0xf6>
 800ad3a:	4654      	mov	r4, sl
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f04f 0c0a 	mov.w	ip, #10
 800ad42:	9a07      	ldr	r2, [sp, #28]
 800ad44:	4621      	mov	r1, r4
 800ad46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad4a:	3b30      	subs	r3, #48	; 0x30
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d94e      	bls.n	800adee <_svfiprintf_r+0x17e>
 800ad50:	b1b0      	cbz	r0, 800ad80 <_svfiprintf_r+0x110>
 800ad52:	9207      	str	r2, [sp, #28]
 800ad54:	e014      	b.n	800ad80 <_svfiprintf_r+0x110>
 800ad56:	eba0 0308 	sub.w	r3, r0, r8
 800ad5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	46a2      	mov	sl, r4
 800ad62:	9304      	str	r3, [sp, #16]
 800ad64:	e7d2      	b.n	800ad0c <_svfiprintf_r+0x9c>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	1d19      	adds	r1, r3, #4
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	9103      	str	r1, [sp, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfbb      	ittet	lt
 800ad72:	425b      	neglt	r3, r3
 800ad74:	f042 0202 	orrlt.w	r2, r2, #2
 800ad78:	9307      	strge	r3, [sp, #28]
 800ad7a:	9307      	strlt	r3, [sp, #28]
 800ad7c:	bfb8      	it	lt
 800ad7e:	9204      	strlt	r2, [sp, #16]
 800ad80:	7823      	ldrb	r3, [r4, #0]
 800ad82:	2b2e      	cmp	r3, #46	; 0x2e
 800ad84:	d10c      	bne.n	800ada0 <_svfiprintf_r+0x130>
 800ad86:	7863      	ldrb	r3, [r4, #1]
 800ad88:	2b2a      	cmp	r3, #42	; 0x2a
 800ad8a:	d135      	bne.n	800adf8 <_svfiprintf_r+0x188>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	3402      	adds	r4, #2
 800ad90:	1d1a      	adds	r2, r3, #4
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	9203      	str	r2, [sp, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfb8      	it	lt
 800ad9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad9e:	9305      	str	r3, [sp, #20]
 800ada0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae6c <_svfiprintf_r+0x1fc>
 800ada4:	2203      	movs	r2, #3
 800ada6:	4650      	mov	r0, sl
 800ada8:	7821      	ldrb	r1, [r4, #0]
 800adaa:	f000 ffd9 	bl	800bd60 <memchr>
 800adae:	b140      	cbz	r0, 800adc2 <_svfiprintf_r+0x152>
 800adb0:	2340      	movs	r3, #64	; 0x40
 800adb2:	eba0 000a 	sub.w	r0, r0, sl
 800adb6:	fa03 f000 	lsl.w	r0, r3, r0
 800adba:	9b04      	ldr	r3, [sp, #16]
 800adbc:	3401      	adds	r4, #1
 800adbe:	4303      	orrs	r3, r0
 800adc0:	9304      	str	r3, [sp, #16]
 800adc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc6:	2206      	movs	r2, #6
 800adc8:	4825      	ldr	r0, [pc, #148]	; (800ae60 <_svfiprintf_r+0x1f0>)
 800adca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adce:	f000 ffc7 	bl	800bd60 <memchr>
 800add2:	2800      	cmp	r0, #0
 800add4:	d038      	beq.n	800ae48 <_svfiprintf_r+0x1d8>
 800add6:	4b23      	ldr	r3, [pc, #140]	; (800ae64 <_svfiprintf_r+0x1f4>)
 800add8:	bb1b      	cbnz	r3, 800ae22 <_svfiprintf_r+0x1b2>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	3307      	adds	r3, #7
 800adde:	f023 0307 	bic.w	r3, r3, #7
 800ade2:	3308      	adds	r3, #8
 800ade4:	9303      	str	r3, [sp, #12]
 800ade6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade8:	4433      	add	r3, r6
 800adea:	9309      	str	r3, [sp, #36]	; 0x24
 800adec:	e767      	b.n	800acbe <_svfiprintf_r+0x4e>
 800adee:	460c      	mov	r4, r1
 800adf0:	2001      	movs	r0, #1
 800adf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf6:	e7a5      	b.n	800ad44 <_svfiprintf_r+0xd4>
 800adf8:	2300      	movs	r3, #0
 800adfa:	f04f 0c0a 	mov.w	ip, #10
 800adfe:	4619      	mov	r1, r3
 800ae00:	3401      	adds	r4, #1
 800ae02:	9305      	str	r3, [sp, #20]
 800ae04:	4620      	mov	r0, r4
 800ae06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae0a:	3a30      	subs	r2, #48	; 0x30
 800ae0c:	2a09      	cmp	r2, #9
 800ae0e:	d903      	bls.n	800ae18 <_svfiprintf_r+0x1a8>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0c5      	beq.n	800ada0 <_svfiprintf_r+0x130>
 800ae14:	9105      	str	r1, [sp, #20]
 800ae16:	e7c3      	b.n	800ada0 <_svfiprintf_r+0x130>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae20:	e7f0      	b.n	800ae04 <_svfiprintf_r+0x194>
 800ae22:	ab03      	add	r3, sp, #12
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	462a      	mov	r2, r5
 800ae28:	4638      	mov	r0, r7
 800ae2a:	4b0f      	ldr	r3, [pc, #60]	; (800ae68 <_svfiprintf_r+0x1f8>)
 800ae2c:	a904      	add	r1, sp, #16
 800ae2e:	f3af 8000 	nop.w
 800ae32:	1c42      	adds	r2, r0, #1
 800ae34:	4606      	mov	r6, r0
 800ae36:	d1d6      	bne.n	800ade6 <_svfiprintf_r+0x176>
 800ae38:	89ab      	ldrh	r3, [r5, #12]
 800ae3a:	065b      	lsls	r3, r3, #25
 800ae3c:	f53f af2c 	bmi.w	800ac98 <_svfiprintf_r+0x28>
 800ae40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae42:	b01d      	add	sp, #116	; 0x74
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	ab03      	add	r3, sp, #12
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4638      	mov	r0, r7
 800ae50:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <_svfiprintf_r+0x1f8>)
 800ae52:	a904      	add	r1, sp, #16
 800ae54:	f000 fba8 	bl	800b5a8 <_printf_i>
 800ae58:	e7eb      	b.n	800ae32 <_svfiprintf_r+0x1c2>
 800ae5a:	bf00      	nop
 800ae5c:	0800cd44 	.word	0x0800cd44
 800ae60:	0800cd4e 	.word	0x0800cd4e
 800ae64:	00000000 	.word	0x00000000
 800ae68:	0800abb9 	.word	0x0800abb9
 800ae6c:	0800cd4a 	.word	0x0800cd4a

0800ae70 <_sungetc_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	1c4b      	adds	r3, r1, #1
 800ae74:	4614      	mov	r4, r2
 800ae76:	d103      	bne.n	800ae80 <_sungetc_r+0x10>
 800ae78:	f04f 35ff 	mov.w	r5, #4294967295
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	8993      	ldrh	r3, [r2, #12]
 800ae82:	b2cd      	uxtb	r5, r1
 800ae84:	f023 0320 	bic.w	r3, r3, #32
 800ae88:	8193      	strh	r3, [r2, #12]
 800ae8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae8c:	6852      	ldr	r2, [r2, #4]
 800ae8e:	b18b      	cbz	r3, 800aeb4 <_sungetc_r+0x44>
 800ae90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ae92:	4293      	cmp	r3, r2
 800ae94:	dd08      	ble.n	800aea8 <_sungetc_r+0x38>
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aea0:	6863      	ldr	r3, [r4, #4]
 800aea2:	3301      	adds	r3, #1
 800aea4:	6063      	str	r3, [r4, #4]
 800aea6:	e7e9      	b.n	800ae7c <_sungetc_r+0xc>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	f000 feff 	bl	800bcac <__submore>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d0f1      	beq.n	800ae96 <_sungetc_r+0x26>
 800aeb2:	e7e1      	b.n	800ae78 <_sungetc_r+0x8>
 800aeb4:	6921      	ldr	r1, [r4, #16]
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	b151      	cbz	r1, 800aed0 <_sungetc_r+0x60>
 800aeba:	4299      	cmp	r1, r3
 800aebc:	d208      	bcs.n	800aed0 <_sungetc_r+0x60>
 800aebe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800aec2:	42a9      	cmp	r1, r5
 800aec4:	d104      	bne.n	800aed0 <_sungetc_r+0x60>
 800aec6:	3b01      	subs	r3, #1
 800aec8:	3201      	adds	r2, #1
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	6062      	str	r2, [r4, #4]
 800aece:	e7d5      	b.n	800ae7c <_sungetc_r+0xc>
 800aed0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800aed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed8:	6363      	str	r3, [r4, #52]	; 0x34
 800aeda:	2303      	movs	r3, #3
 800aedc:	63a3      	str	r3, [r4, #56]	; 0x38
 800aede:	4623      	mov	r3, r4
 800aee0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	2301      	movs	r3, #1
 800aee8:	e7dc      	b.n	800aea4 <_sungetc_r+0x34>

0800aeea <__ssrefill_r>:
 800aeea:	b510      	push	{r4, lr}
 800aeec:	460c      	mov	r4, r1
 800aeee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aef0:	b169      	cbz	r1, 800af0e <__ssrefill_r+0x24>
 800aef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef6:	4299      	cmp	r1, r3
 800aef8:	d001      	beq.n	800aefe <__ssrefill_r+0x14>
 800aefa:	f7ff fa3b 	bl	800a374 <_free_r>
 800aefe:	2000      	movs	r0, #0
 800af00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af02:	6360      	str	r0, [r4, #52]	; 0x34
 800af04:	6063      	str	r3, [r4, #4]
 800af06:	b113      	cbz	r3, 800af0e <__ssrefill_r+0x24>
 800af08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	f04f 30ff 	mov.w	r0, #4294967295
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	6063      	str	r3, [r4, #4]
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f043 0320 	orr.w	r3, r3, #32
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	e7f3      	b.n	800af0c <__ssrefill_r+0x22>

0800af24 <__ssvfiscanf_r>:
 800af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	460c      	mov	r4, r1
 800af2a:	2100      	movs	r1, #0
 800af2c:	4606      	mov	r6, r0
 800af2e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800af32:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800af36:	49b3      	ldr	r1, [pc, #716]	; (800b204 <__ssvfiscanf_r+0x2e0>)
 800af38:	f10d 0804 	add.w	r8, sp, #4
 800af3c:	91a0      	str	r1, [sp, #640]	; 0x280
 800af3e:	49b2      	ldr	r1, [pc, #712]	; (800b208 <__ssvfiscanf_r+0x2e4>)
 800af40:	4fb2      	ldr	r7, [pc, #712]	; (800b20c <__ssvfiscanf_r+0x2e8>)
 800af42:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800b210 <__ssvfiscanf_r+0x2ec>
 800af46:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800af4a:	91a1      	str	r1, [sp, #644]	; 0x284
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	f892 a000 	ldrb.w	sl, [r2]
 800af52:	f1ba 0f00 	cmp.w	sl, #0
 800af56:	f000 8153 	beq.w	800b200 <__ssvfiscanf_r+0x2dc>
 800af5a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800af5e:	1c55      	adds	r5, r2, #1
 800af60:	f013 0308 	ands.w	r3, r3, #8
 800af64:	d019      	beq.n	800af9a <__ssvfiscanf_r+0x76>
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dd0f      	ble.n	800af8c <__ssvfiscanf_r+0x68>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	781a      	ldrb	r2, [r3, #0]
 800af70:	5cba      	ldrb	r2, [r7, r2]
 800af72:	0712      	lsls	r2, r2, #28
 800af74:	d401      	bmi.n	800af7a <__ssvfiscanf_r+0x56>
 800af76:	462a      	mov	r2, r5
 800af78:	e7e9      	b.n	800af4e <__ssvfiscanf_r+0x2a>
 800af7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af7c:	3301      	adds	r3, #1
 800af7e:	3201      	adds	r2, #1
 800af80:	9245      	str	r2, [sp, #276]	; 0x114
 800af82:	6862      	ldr	r2, [r4, #4]
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	3a01      	subs	r2, #1
 800af88:	6062      	str	r2, [r4, #4]
 800af8a:	e7ec      	b.n	800af66 <__ssvfiscanf_r+0x42>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4630      	mov	r0, r6
 800af90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af92:	4798      	blx	r3
 800af94:	2800      	cmp	r0, #0
 800af96:	d0e9      	beq.n	800af6c <__ssvfiscanf_r+0x48>
 800af98:	e7ed      	b.n	800af76 <__ssvfiscanf_r+0x52>
 800af9a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800af9e:	f040 8086 	bne.w	800b0ae <__ssvfiscanf_r+0x18a>
 800afa2:	9341      	str	r3, [sp, #260]	; 0x104
 800afa4:	9343      	str	r3, [sp, #268]	; 0x10c
 800afa6:	7853      	ldrb	r3, [r2, #1]
 800afa8:	2b2a      	cmp	r3, #42	; 0x2a
 800afaa:	bf04      	itt	eq
 800afac:	2310      	moveq	r3, #16
 800afae:	1c95      	addeq	r5, r2, #2
 800afb0:	f04f 020a 	mov.w	r2, #10
 800afb4:	bf08      	it	eq
 800afb6:	9341      	streq	r3, [sp, #260]	; 0x104
 800afb8:	46ab      	mov	fp, r5
 800afba:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800afbe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800afc2:	2b09      	cmp	r3, #9
 800afc4:	d91d      	bls.n	800b002 <__ssvfiscanf_r+0xde>
 800afc6:	2203      	movs	r2, #3
 800afc8:	4891      	ldr	r0, [pc, #580]	; (800b210 <__ssvfiscanf_r+0x2ec>)
 800afca:	f000 fec9 	bl	800bd60 <memchr>
 800afce:	b140      	cbz	r0, 800afe2 <__ssvfiscanf_r+0xbe>
 800afd0:	2301      	movs	r3, #1
 800afd2:	465d      	mov	r5, fp
 800afd4:	eba0 0009 	sub.w	r0, r0, r9
 800afd8:	fa03 f000 	lsl.w	r0, r3, r0
 800afdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800afde:	4318      	orrs	r0, r3
 800afe0:	9041      	str	r0, [sp, #260]	; 0x104
 800afe2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800afe6:	2b78      	cmp	r3, #120	; 0x78
 800afe8:	d806      	bhi.n	800aff8 <__ssvfiscanf_r+0xd4>
 800afea:	2b57      	cmp	r3, #87	; 0x57
 800afec:	d810      	bhi.n	800b010 <__ssvfiscanf_r+0xec>
 800afee:	2b25      	cmp	r3, #37	; 0x25
 800aff0:	d05d      	beq.n	800b0ae <__ssvfiscanf_r+0x18a>
 800aff2:	d857      	bhi.n	800b0a4 <__ssvfiscanf_r+0x180>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d075      	beq.n	800b0e4 <__ssvfiscanf_r+0x1c0>
 800aff8:	2303      	movs	r3, #3
 800affa:	9347      	str	r3, [sp, #284]	; 0x11c
 800affc:	230a      	movs	r3, #10
 800affe:	9342      	str	r3, [sp, #264]	; 0x108
 800b000:	e082      	b.n	800b108 <__ssvfiscanf_r+0x1e4>
 800b002:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b004:	465d      	mov	r5, fp
 800b006:	fb02 1303 	mla	r3, r2, r3, r1
 800b00a:	3b30      	subs	r3, #48	; 0x30
 800b00c:	9343      	str	r3, [sp, #268]	; 0x10c
 800b00e:	e7d3      	b.n	800afb8 <__ssvfiscanf_r+0x94>
 800b010:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b014:	2a20      	cmp	r2, #32
 800b016:	d8ef      	bhi.n	800aff8 <__ssvfiscanf_r+0xd4>
 800b018:	a101      	add	r1, pc, #4	; (adr r1, 800b020 <__ssvfiscanf_r+0xfc>)
 800b01a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b01e:	bf00      	nop
 800b020:	0800b0f3 	.word	0x0800b0f3
 800b024:	0800aff9 	.word	0x0800aff9
 800b028:	0800aff9 	.word	0x0800aff9
 800b02c:	0800b151 	.word	0x0800b151
 800b030:	0800aff9 	.word	0x0800aff9
 800b034:	0800aff9 	.word	0x0800aff9
 800b038:	0800aff9 	.word	0x0800aff9
 800b03c:	0800aff9 	.word	0x0800aff9
 800b040:	0800aff9 	.word	0x0800aff9
 800b044:	0800aff9 	.word	0x0800aff9
 800b048:	0800aff9 	.word	0x0800aff9
 800b04c:	0800b167 	.word	0x0800b167
 800b050:	0800b13d 	.word	0x0800b13d
 800b054:	0800b0ab 	.word	0x0800b0ab
 800b058:	0800b0ab 	.word	0x0800b0ab
 800b05c:	0800b0ab 	.word	0x0800b0ab
 800b060:	0800aff9 	.word	0x0800aff9
 800b064:	0800b141 	.word	0x0800b141
 800b068:	0800aff9 	.word	0x0800aff9
 800b06c:	0800aff9 	.word	0x0800aff9
 800b070:	0800aff9 	.word	0x0800aff9
 800b074:	0800aff9 	.word	0x0800aff9
 800b078:	0800b177 	.word	0x0800b177
 800b07c:	0800b149 	.word	0x0800b149
 800b080:	0800b0eb 	.word	0x0800b0eb
 800b084:	0800aff9 	.word	0x0800aff9
 800b088:	0800aff9 	.word	0x0800aff9
 800b08c:	0800b173 	.word	0x0800b173
 800b090:	0800aff9 	.word	0x0800aff9
 800b094:	0800b13d 	.word	0x0800b13d
 800b098:	0800aff9 	.word	0x0800aff9
 800b09c:	0800aff9 	.word	0x0800aff9
 800b0a0:	0800b0f3 	.word	0x0800b0f3
 800b0a4:	3b45      	subs	r3, #69	; 0x45
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d8a6      	bhi.n	800aff8 <__ssvfiscanf_r+0xd4>
 800b0aa:	2305      	movs	r3, #5
 800b0ac:	e02b      	b.n	800b106 <__ssvfiscanf_r+0x1e2>
 800b0ae:	6863      	ldr	r3, [r4, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dd0d      	ble.n	800b0d0 <__ssvfiscanf_r+0x1ac>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	781a      	ldrb	r2, [r3, #0]
 800b0b8:	4552      	cmp	r2, sl
 800b0ba:	f040 80a1 	bne.w	800b200 <__ssvfiscanf_r+0x2dc>
 800b0be:	3301      	adds	r3, #1
 800b0c0:	6862      	ldr	r2, [r4, #4]
 800b0c2:	6023      	str	r3, [r4, #0]
 800b0c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b0c6:	3a01      	subs	r2, #1
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	6062      	str	r2, [r4, #4]
 800b0cc:	9345      	str	r3, [sp, #276]	; 0x114
 800b0ce:	e752      	b.n	800af76 <__ssvfiscanf_r+0x52>
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0d6:	4798      	blx	r3
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0eb      	beq.n	800b0b4 <__ssvfiscanf_r+0x190>
 800b0dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f040 8084 	bne.w	800b1ec <__ssvfiscanf_r+0x2c8>
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e086      	b.n	800b1f8 <__ssvfiscanf_r+0x2d4>
 800b0ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0ec:	f042 0220 	orr.w	r2, r2, #32
 800b0f0:	9241      	str	r2, [sp, #260]	; 0x104
 800b0f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0f8:	9241      	str	r2, [sp, #260]	; 0x104
 800b0fa:	2210      	movs	r2, #16
 800b0fc:	2b6f      	cmp	r3, #111	; 0x6f
 800b0fe:	bf34      	ite	cc
 800b100:	2303      	movcc	r3, #3
 800b102:	2304      	movcs	r3, #4
 800b104:	9242      	str	r2, [sp, #264]	; 0x108
 800b106:	9347      	str	r3, [sp, #284]	; 0x11c
 800b108:	6863      	ldr	r3, [r4, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd41      	ble.n	800b192 <__ssvfiscanf_r+0x26e>
 800b10e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b110:	0659      	lsls	r1, r3, #25
 800b112:	d404      	bmi.n	800b11e <__ssvfiscanf_r+0x1fa>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	781a      	ldrb	r2, [r3, #0]
 800b118:	5cba      	ldrb	r2, [r7, r2]
 800b11a:	0712      	lsls	r2, r2, #28
 800b11c:	d440      	bmi.n	800b1a0 <__ssvfiscanf_r+0x27c>
 800b11e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b120:	2b02      	cmp	r3, #2
 800b122:	dc4f      	bgt.n	800b1c4 <__ssvfiscanf_r+0x2a0>
 800b124:	466b      	mov	r3, sp
 800b126:	4622      	mov	r2, r4
 800b128:	4630      	mov	r0, r6
 800b12a:	a941      	add	r1, sp, #260	; 0x104
 800b12c:	f000 fb62 	bl	800b7f4 <_scanf_chars>
 800b130:	2801      	cmp	r0, #1
 800b132:	d065      	beq.n	800b200 <__ssvfiscanf_r+0x2dc>
 800b134:	2802      	cmp	r0, #2
 800b136:	f47f af1e 	bne.w	800af76 <__ssvfiscanf_r+0x52>
 800b13a:	e7cf      	b.n	800b0dc <__ssvfiscanf_r+0x1b8>
 800b13c:	220a      	movs	r2, #10
 800b13e:	e7dd      	b.n	800b0fc <__ssvfiscanf_r+0x1d8>
 800b140:	2300      	movs	r3, #0
 800b142:	9342      	str	r3, [sp, #264]	; 0x108
 800b144:	2303      	movs	r3, #3
 800b146:	e7de      	b.n	800b106 <__ssvfiscanf_r+0x1e2>
 800b148:	2308      	movs	r3, #8
 800b14a:	9342      	str	r3, [sp, #264]	; 0x108
 800b14c:	2304      	movs	r3, #4
 800b14e:	e7da      	b.n	800b106 <__ssvfiscanf_r+0x1e2>
 800b150:	4629      	mov	r1, r5
 800b152:	4640      	mov	r0, r8
 800b154:	f000 fcf2 	bl	800bb3c <__sccl>
 800b158:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b15a:	4605      	mov	r5, r0
 800b15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b160:	9341      	str	r3, [sp, #260]	; 0x104
 800b162:	2301      	movs	r3, #1
 800b164:	e7cf      	b.n	800b106 <__ssvfiscanf_r+0x1e2>
 800b166:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b16c:	9341      	str	r3, [sp, #260]	; 0x104
 800b16e:	2300      	movs	r3, #0
 800b170:	e7c9      	b.n	800b106 <__ssvfiscanf_r+0x1e2>
 800b172:	2302      	movs	r3, #2
 800b174:	e7c7      	b.n	800b106 <__ssvfiscanf_r+0x1e2>
 800b176:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b178:	06c3      	lsls	r3, r0, #27
 800b17a:	f53f aefc 	bmi.w	800af76 <__ssvfiscanf_r+0x52>
 800b17e:	9b00      	ldr	r3, [sp, #0]
 800b180:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b182:	1d19      	adds	r1, r3, #4
 800b184:	9100      	str	r1, [sp, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	07c0      	lsls	r0, r0, #31
 800b18a:	bf4c      	ite	mi
 800b18c:	801a      	strhmi	r2, [r3, #0]
 800b18e:	601a      	strpl	r2, [r3, #0]
 800b190:	e6f1      	b.n	800af76 <__ssvfiscanf_r+0x52>
 800b192:	4621      	mov	r1, r4
 800b194:	4630      	mov	r0, r6
 800b196:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b198:	4798      	blx	r3
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d0b7      	beq.n	800b10e <__ssvfiscanf_r+0x1ea>
 800b19e:	e79d      	b.n	800b0dc <__ssvfiscanf_r+0x1b8>
 800b1a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b1a2:	3201      	adds	r2, #1
 800b1a4:	9245      	str	r2, [sp, #276]	; 0x114
 800b1a6:	6862      	ldr	r2, [r4, #4]
 800b1a8:	3a01      	subs	r2, #1
 800b1aa:	2a00      	cmp	r2, #0
 800b1ac:	6062      	str	r2, [r4, #4]
 800b1ae:	dd02      	ble.n	800b1b6 <__ssvfiscanf_r+0x292>
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	6023      	str	r3, [r4, #0]
 800b1b4:	e7ae      	b.n	800b114 <__ssvfiscanf_r+0x1f0>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1bc:	4798      	blx	r3
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d0a8      	beq.n	800b114 <__ssvfiscanf_r+0x1f0>
 800b1c2:	e78b      	b.n	800b0dc <__ssvfiscanf_r+0x1b8>
 800b1c4:	2b04      	cmp	r3, #4
 800b1c6:	dc06      	bgt.n	800b1d6 <__ssvfiscanf_r+0x2b2>
 800b1c8:	466b      	mov	r3, sp
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	a941      	add	r1, sp, #260	; 0x104
 800b1d0:	f000 fb68 	bl	800b8a4 <_scanf_i>
 800b1d4:	e7ac      	b.n	800b130 <__ssvfiscanf_r+0x20c>
 800b1d6:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <__ssvfiscanf_r+0x2f0>)
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f43f aecc 	beq.w	800af76 <__ssvfiscanf_r+0x52>
 800b1de:	466b      	mov	r3, sp
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	a941      	add	r1, sp, #260	; 0x104
 800b1e6:	f3af 8000 	nop.w
 800b1ea:	e7a1      	b.n	800b130 <__ssvfiscanf_r+0x20c>
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1f2:	bf18      	it	ne
 800b1f4:	f04f 30ff 	movne.w	r0, #4294967295
 800b1f8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b200:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b202:	e7f9      	b.n	800b1f8 <__ssvfiscanf_r+0x2d4>
 800b204:	0800ae71 	.word	0x0800ae71
 800b208:	0800aeeb 	.word	0x0800aeeb
 800b20c:	0800cbdf 	.word	0x0800cbdf
 800b210:	0800cd4a 	.word	0x0800cd4a
 800b214:	00000000 	.word	0x00000000

0800b218 <__sfputc_r>:
 800b218:	6893      	ldr	r3, [r2, #8]
 800b21a:	b410      	push	{r4}
 800b21c:	3b01      	subs	r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	6093      	str	r3, [r2, #8]
 800b222:	da07      	bge.n	800b234 <__sfputc_r+0x1c>
 800b224:	6994      	ldr	r4, [r2, #24]
 800b226:	42a3      	cmp	r3, r4
 800b228:	db01      	blt.n	800b22e <__sfputc_r+0x16>
 800b22a:	290a      	cmp	r1, #10
 800b22c:	d102      	bne.n	800b234 <__sfputc_r+0x1c>
 800b22e:	bc10      	pop	{r4}
 800b230:	f7ff bb5e 	b.w	800a8f0 <__swbuf_r>
 800b234:	6813      	ldr	r3, [r2, #0]
 800b236:	1c58      	adds	r0, r3, #1
 800b238:	6010      	str	r0, [r2, #0]
 800b23a:	7019      	strb	r1, [r3, #0]
 800b23c:	4608      	mov	r0, r1
 800b23e:	bc10      	pop	{r4}
 800b240:	4770      	bx	lr

0800b242 <__sfputs_r>:
 800b242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b244:	4606      	mov	r6, r0
 800b246:	460f      	mov	r7, r1
 800b248:	4614      	mov	r4, r2
 800b24a:	18d5      	adds	r5, r2, r3
 800b24c:	42ac      	cmp	r4, r5
 800b24e:	d101      	bne.n	800b254 <__sfputs_r+0x12>
 800b250:	2000      	movs	r0, #0
 800b252:	e007      	b.n	800b264 <__sfputs_r+0x22>
 800b254:	463a      	mov	r2, r7
 800b256:	4630      	mov	r0, r6
 800b258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25c:	f7ff ffdc 	bl	800b218 <__sfputc_r>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d1f3      	bne.n	800b24c <__sfputs_r+0xa>
 800b264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b268 <_vfiprintf_r>:
 800b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26c:	460d      	mov	r5, r1
 800b26e:	4614      	mov	r4, r2
 800b270:	4698      	mov	r8, r3
 800b272:	4606      	mov	r6, r0
 800b274:	b09d      	sub	sp, #116	; 0x74
 800b276:	b118      	cbz	r0, 800b280 <_vfiprintf_r+0x18>
 800b278:	6983      	ldr	r3, [r0, #24]
 800b27a:	b90b      	cbnz	r3, 800b280 <_vfiprintf_r+0x18>
 800b27c:	f7fe ff9e 	bl	800a1bc <__sinit>
 800b280:	4b89      	ldr	r3, [pc, #548]	; (800b4a8 <_vfiprintf_r+0x240>)
 800b282:	429d      	cmp	r5, r3
 800b284:	d11b      	bne.n	800b2be <_vfiprintf_r+0x56>
 800b286:	6875      	ldr	r5, [r6, #4]
 800b288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b28a:	07d9      	lsls	r1, r3, #31
 800b28c:	d405      	bmi.n	800b29a <_vfiprintf_r+0x32>
 800b28e:	89ab      	ldrh	r3, [r5, #12]
 800b290:	059a      	lsls	r2, r3, #22
 800b292:	d402      	bmi.n	800b29a <_vfiprintf_r+0x32>
 800b294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b296:	f7ff f854 	bl	800a342 <__retarget_lock_acquire_recursive>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	071b      	lsls	r3, r3, #28
 800b29e:	d501      	bpl.n	800b2a4 <_vfiprintf_r+0x3c>
 800b2a0:	692b      	ldr	r3, [r5, #16]
 800b2a2:	b9eb      	cbnz	r3, 800b2e0 <_vfiprintf_r+0x78>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7ff fb86 	bl	800a9b8 <__swsetup_r>
 800b2ac:	b1c0      	cbz	r0, 800b2e0 <_vfiprintf_r+0x78>
 800b2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2b0:	07dc      	lsls	r4, r3, #31
 800b2b2:	d50e      	bpl.n	800b2d2 <_vfiprintf_r+0x6a>
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	b01d      	add	sp, #116	; 0x74
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	4b7b      	ldr	r3, [pc, #492]	; (800b4ac <_vfiprintf_r+0x244>)
 800b2c0:	429d      	cmp	r5, r3
 800b2c2:	d101      	bne.n	800b2c8 <_vfiprintf_r+0x60>
 800b2c4:	68b5      	ldr	r5, [r6, #8]
 800b2c6:	e7df      	b.n	800b288 <_vfiprintf_r+0x20>
 800b2c8:	4b79      	ldr	r3, [pc, #484]	; (800b4b0 <_vfiprintf_r+0x248>)
 800b2ca:	429d      	cmp	r5, r3
 800b2cc:	bf08      	it	eq
 800b2ce:	68f5      	ldreq	r5, [r6, #12]
 800b2d0:	e7da      	b.n	800b288 <_vfiprintf_r+0x20>
 800b2d2:	89ab      	ldrh	r3, [r5, #12]
 800b2d4:	0598      	lsls	r0, r3, #22
 800b2d6:	d4ed      	bmi.n	800b2b4 <_vfiprintf_r+0x4c>
 800b2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2da:	f7ff f833 	bl	800a344 <__retarget_lock_release_recursive>
 800b2de:	e7e9      	b.n	800b2b4 <_vfiprintf_r+0x4c>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e4:	2320      	movs	r3, #32
 800b2e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ea:	2330      	movs	r3, #48	; 0x30
 800b2ec:	f04f 0901 	mov.w	r9, #1
 800b2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b4b4 <_vfiprintf_r+0x24c>
 800b2f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2fc:	4623      	mov	r3, r4
 800b2fe:	469a      	mov	sl, r3
 800b300:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b304:	b10a      	cbz	r2, 800b30a <_vfiprintf_r+0xa2>
 800b306:	2a25      	cmp	r2, #37	; 0x25
 800b308:	d1f9      	bne.n	800b2fe <_vfiprintf_r+0x96>
 800b30a:	ebba 0b04 	subs.w	fp, sl, r4
 800b30e:	d00b      	beq.n	800b328 <_vfiprintf_r+0xc0>
 800b310:	465b      	mov	r3, fp
 800b312:	4622      	mov	r2, r4
 800b314:	4629      	mov	r1, r5
 800b316:	4630      	mov	r0, r6
 800b318:	f7ff ff93 	bl	800b242 <__sfputs_r>
 800b31c:	3001      	adds	r0, #1
 800b31e:	f000 80aa 	beq.w	800b476 <_vfiprintf_r+0x20e>
 800b322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b324:	445a      	add	r2, fp
 800b326:	9209      	str	r2, [sp, #36]	; 0x24
 800b328:	f89a 3000 	ldrb.w	r3, [sl]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 80a2 	beq.w	800b476 <_vfiprintf_r+0x20e>
 800b332:	2300      	movs	r3, #0
 800b334:	f04f 32ff 	mov.w	r2, #4294967295
 800b338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b33c:	f10a 0a01 	add.w	sl, sl, #1
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	9307      	str	r3, [sp, #28]
 800b344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b348:	931a      	str	r3, [sp, #104]	; 0x68
 800b34a:	4654      	mov	r4, sl
 800b34c:	2205      	movs	r2, #5
 800b34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b352:	4858      	ldr	r0, [pc, #352]	; (800b4b4 <_vfiprintf_r+0x24c>)
 800b354:	f000 fd04 	bl	800bd60 <memchr>
 800b358:	9a04      	ldr	r2, [sp, #16]
 800b35a:	b9d8      	cbnz	r0, 800b394 <_vfiprintf_r+0x12c>
 800b35c:	06d1      	lsls	r1, r2, #27
 800b35e:	bf44      	itt	mi
 800b360:	2320      	movmi	r3, #32
 800b362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b366:	0713      	lsls	r3, r2, #28
 800b368:	bf44      	itt	mi
 800b36a:	232b      	movmi	r3, #43	; 0x2b
 800b36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b370:	f89a 3000 	ldrb.w	r3, [sl]
 800b374:	2b2a      	cmp	r3, #42	; 0x2a
 800b376:	d015      	beq.n	800b3a4 <_vfiprintf_r+0x13c>
 800b378:	4654      	mov	r4, sl
 800b37a:	2000      	movs	r0, #0
 800b37c:	f04f 0c0a 	mov.w	ip, #10
 800b380:	9a07      	ldr	r2, [sp, #28]
 800b382:	4621      	mov	r1, r4
 800b384:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b388:	3b30      	subs	r3, #48	; 0x30
 800b38a:	2b09      	cmp	r3, #9
 800b38c:	d94e      	bls.n	800b42c <_vfiprintf_r+0x1c4>
 800b38e:	b1b0      	cbz	r0, 800b3be <_vfiprintf_r+0x156>
 800b390:	9207      	str	r2, [sp, #28]
 800b392:	e014      	b.n	800b3be <_vfiprintf_r+0x156>
 800b394:	eba0 0308 	sub.w	r3, r0, r8
 800b398:	fa09 f303 	lsl.w	r3, r9, r3
 800b39c:	4313      	orrs	r3, r2
 800b39e:	46a2      	mov	sl, r4
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	e7d2      	b.n	800b34a <_vfiprintf_r+0xe2>
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	1d19      	adds	r1, r3, #4
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	9103      	str	r1, [sp, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bfbb      	ittet	lt
 800b3b0:	425b      	neglt	r3, r3
 800b3b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3b6:	9307      	strge	r3, [sp, #28]
 800b3b8:	9307      	strlt	r3, [sp, #28]
 800b3ba:	bfb8      	it	lt
 800b3bc:	9204      	strlt	r2, [sp, #16]
 800b3be:	7823      	ldrb	r3, [r4, #0]
 800b3c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b3c2:	d10c      	bne.n	800b3de <_vfiprintf_r+0x176>
 800b3c4:	7863      	ldrb	r3, [r4, #1]
 800b3c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b3c8:	d135      	bne.n	800b436 <_vfiprintf_r+0x1ce>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	3402      	adds	r4, #2
 800b3ce:	1d1a      	adds	r2, r3, #4
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	9203      	str	r2, [sp, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	bfb8      	it	lt
 800b3d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4c4 <_vfiprintf_r+0x25c>
 800b3e2:	2203      	movs	r2, #3
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	7821      	ldrb	r1, [r4, #0]
 800b3e8:	f000 fcba 	bl	800bd60 <memchr>
 800b3ec:	b140      	cbz	r0, 800b400 <_vfiprintf_r+0x198>
 800b3ee:	2340      	movs	r3, #64	; 0x40
 800b3f0:	eba0 000a 	sub.w	r0, r0, sl
 800b3f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	3401      	adds	r4, #1
 800b3fc:	4303      	orrs	r3, r0
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b404:	2206      	movs	r2, #6
 800b406:	482c      	ldr	r0, [pc, #176]	; (800b4b8 <_vfiprintf_r+0x250>)
 800b408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b40c:	f000 fca8 	bl	800bd60 <memchr>
 800b410:	2800      	cmp	r0, #0
 800b412:	d03f      	beq.n	800b494 <_vfiprintf_r+0x22c>
 800b414:	4b29      	ldr	r3, [pc, #164]	; (800b4bc <_vfiprintf_r+0x254>)
 800b416:	bb1b      	cbnz	r3, 800b460 <_vfiprintf_r+0x1f8>
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	3307      	adds	r3, #7
 800b41c:	f023 0307 	bic.w	r3, r3, #7
 800b420:	3308      	adds	r3, #8
 800b422:	9303      	str	r3, [sp, #12]
 800b424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b426:	443b      	add	r3, r7
 800b428:	9309      	str	r3, [sp, #36]	; 0x24
 800b42a:	e767      	b.n	800b2fc <_vfiprintf_r+0x94>
 800b42c:	460c      	mov	r4, r1
 800b42e:	2001      	movs	r0, #1
 800b430:	fb0c 3202 	mla	r2, ip, r2, r3
 800b434:	e7a5      	b.n	800b382 <_vfiprintf_r+0x11a>
 800b436:	2300      	movs	r3, #0
 800b438:	f04f 0c0a 	mov.w	ip, #10
 800b43c:	4619      	mov	r1, r3
 800b43e:	3401      	adds	r4, #1
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	4620      	mov	r0, r4
 800b444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b448:	3a30      	subs	r2, #48	; 0x30
 800b44a:	2a09      	cmp	r2, #9
 800b44c:	d903      	bls.n	800b456 <_vfiprintf_r+0x1ee>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0c5      	beq.n	800b3de <_vfiprintf_r+0x176>
 800b452:	9105      	str	r1, [sp, #20]
 800b454:	e7c3      	b.n	800b3de <_vfiprintf_r+0x176>
 800b456:	4604      	mov	r4, r0
 800b458:	2301      	movs	r3, #1
 800b45a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b45e:	e7f0      	b.n	800b442 <_vfiprintf_r+0x1da>
 800b460:	ab03      	add	r3, sp, #12
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	462a      	mov	r2, r5
 800b466:	4630      	mov	r0, r6
 800b468:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <_vfiprintf_r+0x258>)
 800b46a:	a904      	add	r1, sp, #16
 800b46c:	f3af 8000 	nop.w
 800b470:	4607      	mov	r7, r0
 800b472:	1c78      	adds	r0, r7, #1
 800b474:	d1d6      	bne.n	800b424 <_vfiprintf_r+0x1bc>
 800b476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b478:	07d9      	lsls	r1, r3, #31
 800b47a:	d405      	bmi.n	800b488 <_vfiprintf_r+0x220>
 800b47c:	89ab      	ldrh	r3, [r5, #12]
 800b47e:	059a      	lsls	r2, r3, #22
 800b480:	d402      	bmi.n	800b488 <_vfiprintf_r+0x220>
 800b482:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b484:	f7fe ff5e 	bl	800a344 <__retarget_lock_release_recursive>
 800b488:	89ab      	ldrh	r3, [r5, #12]
 800b48a:	065b      	lsls	r3, r3, #25
 800b48c:	f53f af12 	bmi.w	800b2b4 <_vfiprintf_r+0x4c>
 800b490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b492:	e711      	b.n	800b2b8 <_vfiprintf_r+0x50>
 800b494:	ab03      	add	r3, sp, #12
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	462a      	mov	r2, r5
 800b49a:	4630      	mov	r0, r6
 800b49c:	4b08      	ldr	r3, [pc, #32]	; (800b4c0 <_vfiprintf_r+0x258>)
 800b49e:	a904      	add	r1, sp, #16
 800b4a0:	f000 f882 	bl	800b5a8 <_printf_i>
 800b4a4:	e7e4      	b.n	800b470 <_vfiprintf_r+0x208>
 800b4a6:	bf00      	nop
 800b4a8:	0800cd00 	.word	0x0800cd00
 800b4ac:	0800cd20 	.word	0x0800cd20
 800b4b0:	0800cce0 	.word	0x0800cce0
 800b4b4:	0800cd44 	.word	0x0800cd44
 800b4b8:	0800cd4e 	.word	0x0800cd4e
 800b4bc:	00000000 	.word	0x00000000
 800b4c0:	0800b243 	.word	0x0800b243
 800b4c4:	0800cd4a 	.word	0x0800cd4a

0800b4c8 <_printf_common>:
 800b4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	4616      	mov	r6, r2
 800b4ce:	4699      	mov	r9, r3
 800b4d0:	688a      	ldr	r2, [r1, #8]
 800b4d2:	690b      	ldr	r3, [r1, #16]
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	bfb8      	it	lt
 800b4da:	4613      	movlt	r3, r2
 800b4dc:	6033      	str	r3, [r6, #0]
 800b4de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4e8:	b10a      	cbz	r2, 800b4ee <_printf_common+0x26>
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	6033      	str	r3, [r6, #0]
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	0699      	lsls	r1, r3, #26
 800b4f2:	bf42      	ittt	mi
 800b4f4:	6833      	ldrmi	r3, [r6, #0]
 800b4f6:	3302      	addmi	r3, #2
 800b4f8:	6033      	strmi	r3, [r6, #0]
 800b4fa:	6825      	ldr	r5, [r4, #0]
 800b4fc:	f015 0506 	ands.w	r5, r5, #6
 800b500:	d106      	bne.n	800b510 <_printf_common+0x48>
 800b502:	f104 0a19 	add.w	sl, r4, #25
 800b506:	68e3      	ldr	r3, [r4, #12]
 800b508:	6832      	ldr	r2, [r6, #0]
 800b50a:	1a9b      	subs	r3, r3, r2
 800b50c:	42ab      	cmp	r3, r5
 800b50e:	dc28      	bgt.n	800b562 <_printf_common+0x9a>
 800b510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b514:	1e13      	subs	r3, r2, #0
 800b516:	6822      	ldr	r2, [r4, #0]
 800b518:	bf18      	it	ne
 800b51a:	2301      	movne	r3, #1
 800b51c:	0692      	lsls	r2, r2, #26
 800b51e:	d42d      	bmi.n	800b57c <_printf_common+0xb4>
 800b520:	4649      	mov	r1, r9
 800b522:	4638      	mov	r0, r7
 800b524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b528:	47c0      	blx	r8
 800b52a:	3001      	adds	r0, #1
 800b52c:	d020      	beq.n	800b570 <_printf_common+0xa8>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	68e5      	ldr	r5, [r4, #12]
 800b532:	f003 0306 	and.w	r3, r3, #6
 800b536:	2b04      	cmp	r3, #4
 800b538:	bf18      	it	ne
 800b53a:	2500      	movne	r5, #0
 800b53c:	6832      	ldr	r2, [r6, #0]
 800b53e:	f04f 0600 	mov.w	r6, #0
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	bf08      	it	eq
 800b546:	1aad      	subeq	r5, r5, r2
 800b548:	6922      	ldr	r2, [r4, #16]
 800b54a:	bf08      	it	eq
 800b54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b550:	4293      	cmp	r3, r2
 800b552:	bfc4      	itt	gt
 800b554:	1a9b      	subgt	r3, r3, r2
 800b556:	18ed      	addgt	r5, r5, r3
 800b558:	341a      	adds	r4, #26
 800b55a:	42b5      	cmp	r5, r6
 800b55c:	d11a      	bne.n	800b594 <_printf_common+0xcc>
 800b55e:	2000      	movs	r0, #0
 800b560:	e008      	b.n	800b574 <_printf_common+0xac>
 800b562:	2301      	movs	r3, #1
 800b564:	4652      	mov	r2, sl
 800b566:	4649      	mov	r1, r9
 800b568:	4638      	mov	r0, r7
 800b56a:	47c0      	blx	r8
 800b56c:	3001      	adds	r0, #1
 800b56e:	d103      	bne.n	800b578 <_printf_common+0xb0>
 800b570:	f04f 30ff 	mov.w	r0, #4294967295
 800b574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b578:	3501      	adds	r5, #1
 800b57a:	e7c4      	b.n	800b506 <_printf_common+0x3e>
 800b57c:	2030      	movs	r0, #48	; 0x30
 800b57e:	18e1      	adds	r1, r4, r3
 800b580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b58a:	4422      	add	r2, r4
 800b58c:	3302      	adds	r3, #2
 800b58e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b592:	e7c5      	b.n	800b520 <_printf_common+0x58>
 800b594:	2301      	movs	r3, #1
 800b596:	4622      	mov	r2, r4
 800b598:	4649      	mov	r1, r9
 800b59a:	4638      	mov	r0, r7
 800b59c:	47c0      	blx	r8
 800b59e:	3001      	adds	r0, #1
 800b5a0:	d0e6      	beq.n	800b570 <_printf_common+0xa8>
 800b5a2:	3601      	adds	r6, #1
 800b5a4:	e7d9      	b.n	800b55a <_printf_common+0x92>
	...

0800b5a8 <_printf_i>:
 800b5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	7e27      	ldrb	r7, [r4, #24]
 800b5b0:	4691      	mov	r9, r2
 800b5b2:	2f78      	cmp	r7, #120	; 0x78
 800b5b4:	4680      	mov	r8, r0
 800b5b6:	469a      	mov	sl, r3
 800b5b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b5ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5be:	d807      	bhi.n	800b5d0 <_printf_i+0x28>
 800b5c0:	2f62      	cmp	r7, #98	; 0x62
 800b5c2:	d80a      	bhi.n	800b5da <_printf_i+0x32>
 800b5c4:	2f00      	cmp	r7, #0
 800b5c6:	f000 80d9 	beq.w	800b77c <_printf_i+0x1d4>
 800b5ca:	2f58      	cmp	r7, #88	; 0x58
 800b5cc:	f000 80a4 	beq.w	800b718 <_printf_i+0x170>
 800b5d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5d8:	e03a      	b.n	800b650 <_printf_i+0xa8>
 800b5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5de:	2b15      	cmp	r3, #21
 800b5e0:	d8f6      	bhi.n	800b5d0 <_printf_i+0x28>
 800b5e2:	a001      	add	r0, pc, #4	; (adr r0, 800b5e8 <_printf_i+0x40>)
 800b5e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b5e8:	0800b641 	.word	0x0800b641
 800b5ec:	0800b655 	.word	0x0800b655
 800b5f0:	0800b5d1 	.word	0x0800b5d1
 800b5f4:	0800b5d1 	.word	0x0800b5d1
 800b5f8:	0800b5d1 	.word	0x0800b5d1
 800b5fc:	0800b5d1 	.word	0x0800b5d1
 800b600:	0800b655 	.word	0x0800b655
 800b604:	0800b5d1 	.word	0x0800b5d1
 800b608:	0800b5d1 	.word	0x0800b5d1
 800b60c:	0800b5d1 	.word	0x0800b5d1
 800b610:	0800b5d1 	.word	0x0800b5d1
 800b614:	0800b763 	.word	0x0800b763
 800b618:	0800b685 	.word	0x0800b685
 800b61c:	0800b745 	.word	0x0800b745
 800b620:	0800b5d1 	.word	0x0800b5d1
 800b624:	0800b5d1 	.word	0x0800b5d1
 800b628:	0800b785 	.word	0x0800b785
 800b62c:	0800b5d1 	.word	0x0800b5d1
 800b630:	0800b685 	.word	0x0800b685
 800b634:	0800b5d1 	.word	0x0800b5d1
 800b638:	0800b5d1 	.word	0x0800b5d1
 800b63c:	0800b74d 	.word	0x0800b74d
 800b640:	680b      	ldr	r3, [r1, #0]
 800b642:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b646:	1d1a      	adds	r2, r3, #4
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	600a      	str	r2, [r1, #0]
 800b64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b650:	2301      	movs	r3, #1
 800b652:	e0a4      	b.n	800b79e <_printf_i+0x1f6>
 800b654:	6825      	ldr	r5, [r4, #0]
 800b656:	6808      	ldr	r0, [r1, #0]
 800b658:	062e      	lsls	r6, r5, #24
 800b65a:	f100 0304 	add.w	r3, r0, #4
 800b65e:	d50a      	bpl.n	800b676 <_printf_i+0xce>
 800b660:	6805      	ldr	r5, [r0, #0]
 800b662:	600b      	str	r3, [r1, #0]
 800b664:	2d00      	cmp	r5, #0
 800b666:	da03      	bge.n	800b670 <_printf_i+0xc8>
 800b668:	232d      	movs	r3, #45	; 0x2d
 800b66a:	426d      	negs	r5, r5
 800b66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b670:	230a      	movs	r3, #10
 800b672:	485e      	ldr	r0, [pc, #376]	; (800b7ec <_printf_i+0x244>)
 800b674:	e019      	b.n	800b6aa <_printf_i+0x102>
 800b676:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b67a:	6805      	ldr	r5, [r0, #0]
 800b67c:	600b      	str	r3, [r1, #0]
 800b67e:	bf18      	it	ne
 800b680:	b22d      	sxthne	r5, r5
 800b682:	e7ef      	b.n	800b664 <_printf_i+0xbc>
 800b684:	680b      	ldr	r3, [r1, #0]
 800b686:	6825      	ldr	r5, [r4, #0]
 800b688:	1d18      	adds	r0, r3, #4
 800b68a:	6008      	str	r0, [r1, #0]
 800b68c:	0628      	lsls	r0, r5, #24
 800b68e:	d501      	bpl.n	800b694 <_printf_i+0xec>
 800b690:	681d      	ldr	r5, [r3, #0]
 800b692:	e002      	b.n	800b69a <_printf_i+0xf2>
 800b694:	0669      	lsls	r1, r5, #25
 800b696:	d5fb      	bpl.n	800b690 <_printf_i+0xe8>
 800b698:	881d      	ldrh	r5, [r3, #0]
 800b69a:	2f6f      	cmp	r7, #111	; 0x6f
 800b69c:	bf0c      	ite	eq
 800b69e:	2308      	moveq	r3, #8
 800b6a0:	230a      	movne	r3, #10
 800b6a2:	4852      	ldr	r0, [pc, #328]	; (800b7ec <_printf_i+0x244>)
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6aa:	6866      	ldr	r6, [r4, #4]
 800b6ac:	2e00      	cmp	r6, #0
 800b6ae:	bfa8      	it	ge
 800b6b0:	6821      	ldrge	r1, [r4, #0]
 800b6b2:	60a6      	str	r6, [r4, #8]
 800b6b4:	bfa4      	itt	ge
 800b6b6:	f021 0104 	bicge.w	r1, r1, #4
 800b6ba:	6021      	strge	r1, [r4, #0]
 800b6bc:	b90d      	cbnz	r5, 800b6c2 <_printf_i+0x11a>
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d04d      	beq.n	800b75e <_printf_i+0x1b6>
 800b6c2:	4616      	mov	r6, r2
 800b6c4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6c8:	fb03 5711 	mls	r7, r3, r1, r5
 800b6cc:	5dc7      	ldrb	r7, [r0, r7]
 800b6ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6d2:	462f      	mov	r7, r5
 800b6d4:	42bb      	cmp	r3, r7
 800b6d6:	460d      	mov	r5, r1
 800b6d8:	d9f4      	bls.n	800b6c4 <_printf_i+0x11c>
 800b6da:	2b08      	cmp	r3, #8
 800b6dc:	d10b      	bne.n	800b6f6 <_printf_i+0x14e>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	07df      	lsls	r7, r3, #31
 800b6e2:	d508      	bpl.n	800b6f6 <_printf_i+0x14e>
 800b6e4:	6923      	ldr	r3, [r4, #16]
 800b6e6:	6861      	ldr	r1, [r4, #4]
 800b6e8:	4299      	cmp	r1, r3
 800b6ea:	bfde      	ittt	le
 800b6ec:	2330      	movle	r3, #48	; 0x30
 800b6ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6f6:	1b92      	subs	r2, r2, r6
 800b6f8:	6122      	str	r2, [r4, #16]
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	4640      	mov	r0, r8
 800b700:	f8cd a000 	str.w	sl, [sp]
 800b704:	aa03      	add	r2, sp, #12
 800b706:	f7ff fedf 	bl	800b4c8 <_printf_common>
 800b70a:	3001      	adds	r0, #1
 800b70c:	d14c      	bne.n	800b7a8 <_printf_i+0x200>
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295
 800b712:	b004      	add	sp, #16
 800b714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b718:	4834      	ldr	r0, [pc, #208]	; (800b7ec <_printf_i+0x244>)
 800b71a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b71e:	680e      	ldr	r6, [r1, #0]
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	f856 5b04 	ldr.w	r5, [r6], #4
 800b726:	061f      	lsls	r7, r3, #24
 800b728:	600e      	str	r6, [r1, #0]
 800b72a:	d514      	bpl.n	800b756 <_printf_i+0x1ae>
 800b72c:	07d9      	lsls	r1, r3, #31
 800b72e:	bf44      	itt	mi
 800b730:	f043 0320 	orrmi.w	r3, r3, #32
 800b734:	6023      	strmi	r3, [r4, #0]
 800b736:	b91d      	cbnz	r5, 800b740 <_printf_i+0x198>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	f023 0320 	bic.w	r3, r3, #32
 800b73e:	6023      	str	r3, [r4, #0]
 800b740:	2310      	movs	r3, #16
 800b742:	e7af      	b.n	800b6a4 <_printf_i+0xfc>
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	f043 0320 	orr.w	r3, r3, #32
 800b74a:	6023      	str	r3, [r4, #0]
 800b74c:	2378      	movs	r3, #120	; 0x78
 800b74e:	4828      	ldr	r0, [pc, #160]	; (800b7f0 <_printf_i+0x248>)
 800b750:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b754:	e7e3      	b.n	800b71e <_printf_i+0x176>
 800b756:	065e      	lsls	r6, r3, #25
 800b758:	bf48      	it	mi
 800b75a:	b2ad      	uxthmi	r5, r5
 800b75c:	e7e6      	b.n	800b72c <_printf_i+0x184>
 800b75e:	4616      	mov	r6, r2
 800b760:	e7bb      	b.n	800b6da <_printf_i+0x132>
 800b762:	680b      	ldr	r3, [r1, #0]
 800b764:	6826      	ldr	r6, [r4, #0]
 800b766:	1d1d      	adds	r5, r3, #4
 800b768:	6960      	ldr	r0, [r4, #20]
 800b76a:	600d      	str	r5, [r1, #0]
 800b76c:	0635      	lsls	r5, r6, #24
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	d501      	bpl.n	800b776 <_printf_i+0x1ce>
 800b772:	6018      	str	r0, [r3, #0]
 800b774:	e002      	b.n	800b77c <_printf_i+0x1d4>
 800b776:	0671      	lsls	r1, r6, #25
 800b778:	d5fb      	bpl.n	800b772 <_printf_i+0x1ca>
 800b77a:	8018      	strh	r0, [r3, #0]
 800b77c:	2300      	movs	r3, #0
 800b77e:	4616      	mov	r6, r2
 800b780:	6123      	str	r3, [r4, #16]
 800b782:	e7ba      	b.n	800b6fa <_printf_i+0x152>
 800b784:	680b      	ldr	r3, [r1, #0]
 800b786:	1d1a      	adds	r2, r3, #4
 800b788:	600a      	str	r2, [r1, #0]
 800b78a:	681e      	ldr	r6, [r3, #0]
 800b78c:	2100      	movs	r1, #0
 800b78e:	4630      	mov	r0, r6
 800b790:	6862      	ldr	r2, [r4, #4]
 800b792:	f000 fae5 	bl	800bd60 <memchr>
 800b796:	b108      	cbz	r0, 800b79c <_printf_i+0x1f4>
 800b798:	1b80      	subs	r0, r0, r6
 800b79a:	6060      	str	r0, [r4, #4]
 800b79c:	6863      	ldr	r3, [r4, #4]
 800b79e:	6123      	str	r3, [r4, #16]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a6:	e7a8      	b.n	800b6fa <_printf_i+0x152>
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	47d0      	blx	sl
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d0ab      	beq.n	800b70e <_printf_i+0x166>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	079b      	lsls	r3, r3, #30
 800b7ba:	d413      	bmi.n	800b7e4 <_printf_i+0x23c>
 800b7bc:	68e0      	ldr	r0, [r4, #12]
 800b7be:	9b03      	ldr	r3, [sp, #12]
 800b7c0:	4298      	cmp	r0, r3
 800b7c2:	bfb8      	it	lt
 800b7c4:	4618      	movlt	r0, r3
 800b7c6:	e7a4      	b.n	800b712 <_printf_i+0x16a>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	47d0      	blx	sl
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	d09b      	beq.n	800b70e <_printf_i+0x166>
 800b7d6:	3501      	adds	r5, #1
 800b7d8:	68e3      	ldr	r3, [r4, #12]
 800b7da:	9903      	ldr	r1, [sp, #12]
 800b7dc:	1a5b      	subs	r3, r3, r1
 800b7de:	42ab      	cmp	r3, r5
 800b7e0:	dcf2      	bgt.n	800b7c8 <_printf_i+0x220>
 800b7e2:	e7eb      	b.n	800b7bc <_printf_i+0x214>
 800b7e4:	2500      	movs	r5, #0
 800b7e6:	f104 0619 	add.w	r6, r4, #25
 800b7ea:	e7f5      	b.n	800b7d8 <_printf_i+0x230>
 800b7ec:	0800cd55 	.word	0x0800cd55
 800b7f0:	0800cd66 	.word	0x0800cd66

0800b7f4 <_scanf_chars>:
 800b7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7f8:	4615      	mov	r5, r2
 800b7fa:	688a      	ldr	r2, [r1, #8]
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	b932      	cbnz	r2, 800b810 <_scanf_chars+0x1c>
 800b802:	698a      	ldr	r2, [r1, #24]
 800b804:	2a00      	cmp	r2, #0
 800b806:	bf0c      	ite	eq
 800b808:	2201      	moveq	r2, #1
 800b80a:	f04f 32ff 	movne.w	r2, #4294967295
 800b80e:	608a      	str	r2, [r1, #8]
 800b810:	2700      	movs	r7, #0
 800b812:	6822      	ldr	r2, [r4, #0]
 800b814:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800b8a0 <_scanf_chars+0xac>
 800b818:	06d1      	lsls	r1, r2, #27
 800b81a:	bf5f      	itttt	pl
 800b81c:	681a      	ldrpl	r2, [r3, #0]
 800b81e:	1d11      	addpl	r1, r2, #4
 800b820:	6019      	strpl	r1, [r3, #0]
 800b822:	6816      	ldrpl	r6, [r2, #0]
 800b824:	69a0      	ldr	r0, [r4, #24]
 800b826:	b188      	cbz	r0, 800b84c <_scanf_chars+0x58>
 800b828:	2801      	cmp	r0, #1
 800b82a:	d107      	bne.n	800b83c <_scanf_chars+0x48>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	781a      	ldrb	r2, [r3, #0]
 800b830:	6963      	ldr	r3, [r4, #20]
 800b832:	5c9b      	ldrb	r3, [r3, r2]
 800b834:	b953      	cbnz	r3, 800b84c <_scanf_chars+0x58>
 800b836:	bb27      	cbnz	r7, 800b882 <_scanf_chars+0x8e>
 800b838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83c:	2802      	cmp	r0, #2
 800b83e:	d120      	bne.n	800b882 <_scanf_chars+0x8e>
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b848:	071b      	lsls	r3, r3, #28
 800b84a:	d41a      	bmi.n	800b882 <_scanf_chars+0x8e>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	3701      	adds	r7, #1
 800b850:	06da      	lsls	r2, r3, #27
 800b852:	bf5e      	ittt	pl
 800b854:	682b      	ldrpl	r3, [r5, #0]
 800b856:	781b      	ldrbpl	r3, [r3, #0]
 800b858:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b85c:	682a      	ldr	r2, [r5, #0]
 800b85e:	686b      	ldr	r3, [r5, #4]
 800b860:	3201      	adds	r2, #1
 800b862:	602a      	str	r2, [r5, #0]
 800b864:	68a2      	ldr	r2, [r4, #8]
 800b866:	3b01      	subs	r3, #1
 800b868:	3a01      	subs	r2, #1
 800b86a:	606b      	str	r3, [r5, #4]
 800b86c:	60a2      	str	r2, [r4, #8]
 800b86e:	b142      	cbz	r2, 800b882 <_scanf_chars+0x8e>
 800b870:	2b00      	cmp	r3, #0
 800b872:	dcd7      	bgt.n	800b824 <_scanf_chars+0x30>
 800b874:	4629      	mov	r1, r5
 800b876:	4640      	mov	r0, r8
 800b878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b87c:	4798      	blx	r3
 800b87e:	2800      	cmp	r0, #0
 800b880:	d0d0      	beq.n	800b824 <_scanf_chars+0x30>
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	f013 0310 	ands.w	r3, r3, #16
 800b888:	d105      	bne.n	800b896 <_scanf_chars+0xa2>
 800b88a:	68e2      	ldr	r2, [r4, #12]
 800b88c:	3201      	adds	r2, #1
 800b88e:	60e2      	str	r2, [r4, #12]
 800b890:	69a2      	ldr	r2, [r4, #24]
 800b892:	b102      	cbz	r2, 800b896 <_scanf_chars+0xa2>
 800b894:	7033      	strb	r3, [r6, #0]
 800b896:	6923      	ldr	r3, [r4, #16]
 800b898:	2000      	movs	r0, #0
 800b89a:	441f      	add	r7, r3
 800b89c:	6127      	str	r7, [r4, #16]
 800b89e:	e7cb      	b.n	800b838 <_scanf_chars+0x44>
 800b8a0:	0800cbdf 	.word	0x0800cbdf

0800b8a4 <_scanf_i>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	4698      	mov	r8, r3
 800b8ac:	4b72      	ldr	r3, [pc, #456]	; (800ba78 <_scanf_i+0x1d4>)
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	4616      	mov	r6, r2
 800b8b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8b8:	ab03      	add	r3, sp, #12
 800b8ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8be:	4b6f      	ldr	r3, [pc, #444]	; (800ba7c <_scanf_i+0x1d8>)
 800b8c0:	69a1      	ldr	r1, [r4, #24]
 800b8c2:	4a6f      	ldr	r2, [pc, #444]	; (800ba80 <_scanf_i+0x1dc>)
 800b8c4:	4627      	mov	r7, r4
 800b8c6:	2903      	cmp	r1, #3
 800b8c8:	bf18      	it	ne
 800b8ca:	461a      	movne	r2, r3
 800b8cc:	68a3      	ldr	r3, [r4, #8]
 800b8ce:	9201      	str	r2, [sp, #4]
 800b8d0:	1e5a      	subs	r2, r3, #1
 800b8d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b8d6:	bf81      	itttt	hi
 800b8d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b8dc:	eb03 0905 	addhi.w	r9, r3, r5
 800b8e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b8e4:	60a3      	strhi	r3, [r4, #8]
 800b8e6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b8ea:	bf98      	it	ls
 800b8ec:	f04f 0900 	movls.w	r9, #0
 800b8f0:	463d      	mov	r5, r7
 800b8f2:	f04f 0b00 	mov.w	fp, #0
 800b8f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b8fa:	6023      	str	r3, [r4, #0]
 800b8fc:	6831      	ldr	r1, [r6, #0]
 800b8fe:	ab03      	add	r3, sp, #12
 800b900:	2202      	movs	r2, #2
 800b902:	7809      	ldrb	r1, [r1, #0]
 800b904:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b908:	f000 fa2a 	bl	800bd60 <memchr>
 800b90c:	b328      	cbz	r0, 800b95a <_scanf_i+0xb6>
 800b90e:	f1bb 0f01 	cmp.w	fp, #1
 800b912:	d159      	bne.n	800b9c8 <_scanf_i+0x124>
 800b914:	6862      	ldr	r2, [r4, #4]
 800b916:	b92a      	cbnz	r2, 800b924 <_scanf_i+0x80>
 800b918:	2308      	movs	r3, #8
 800b91a:	6822      	ldr	r2, [r4, #0]
 800b91c:	6063      	str	r3, [r4, #4]
 800b91e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	6822      	ldr	r2, [r4, #0]
 800b926:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b92a:	6022      	str	r2, [r4, #0]
 800b92c:	68a2      	ldr	r2, [r4, #8]
 800b92e:	1e51      	subs	r1, r2, #1
 800b930:	60a1      	str	r1, [r4, #8]
 800b932:	b192      	cbz	r2, 800b95a <_scanf_i+0xb6>
 800b934:	6832      	ldr	r2, [r6, #0]
 800b936:	1c51      	adds	r1, r2, #1
 800b938:	6031      	str	r1, [r6, #0]
 800b93a:	7812      	ldrb	r2, [r2, #0]
 800b93c:	f805 2b01 	strb.w	r2, [r5], #1
 800b940:	6872      	ldr	r2, [r6, #4]
 800b942:	3a01      	subs	r2, #1
 800b944:	2a00      	cmp	r2, #0
 800b946:	6072      	str	r2, [r6, #4]
 800b948:	dc07      	bgt.n	800b95a <_scanf_i+0xb6>
 800b94a:	4631      	mov	r1, r6
 800b94c:	4650      	mov	r0, sl
 800b94e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b952:	4790      	blx	r2
 800b954:	2800      	cmp	r0, #0
 800b956:	f040 8085 	bne.w	800ba64 <_scanf_i+0x1c0>
 800b95a:	f10b 0b01 	add.w	fp, fp, #1
 800b95e:	f1bb 0f03 	cmp.w	fp, #3
 800b962:	d1cb      	bne.n	800b8fc <_scanf_i+0x58>
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	b90b      	cbnz	r3, 800b96c <_scanf_i+0xc8>
 800b968:	230a      	movs	r3, #10
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	4945      	ldr	r1, [pc, #276]	; (800ba84 <_scanf_i+0x1e0>)
 800b970:	6960      	ldr	r0, [r4, #20]
 800b972:	1ac9      	subs	r1, r1, r3
 800b974:	f000 f8e2 	bl	800bb3c <__sccl>
 800b978:	f04f 0b00 	mov.w	fp, #0
 800b97c:	68a3      	ldr	r3, [r4, #8]
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d03d      	beq.n	800ba00 <_scanf_i+0x15c>
 800b984:	6831      	ldr	r1, [r6, #0]
 800b986:	6960      	ldr	r0, [r4, #20]
 800b988:	f891 c000 	ldrb.w	ip, [r1]
 800b98c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b990:	2800      	cmp	r0, #0
 800b992:	d035      	beq.n	800ba00 <_scanf_i+0x15c>
 800b994:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b998:	d124      	bne.n	800b9e4 <_scanf_i+0x140>
 800b99a:	0510      	lsls	r0, r2, #20
 800b99c:	d522      	bpl.n	800b9e4 <_scanf_i+0x140>
 800b99e:	f10b 0b01 	add.w	fp, fp, #1
 800b9a2:	f1b9 0f00 	cmp.w	r9, #0
 800b9a6:	d003      	beq.n	800b9b0 <_scanf_i+0x10c>
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9ae:	60a3      	str	r3, [r4, #8]
 800b9b0:	6873      	ldr	r3, [r6, #4]
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	6073      	str	r3, [r6, #4]
 800b9b8:	dd1b      	ble.n	800b9f2 <_scanf_i+0x14e>
 800b9ba:	6833      	ldr	r3, [r6, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	6033      	str	r3, [r6, #0]
 800b9c0:	68a3      	ldr	r3, [r4, #8]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	60a3      	str	r3, [r4, #8]
 800b9c6:	e7d9      	b.n	800b97c <_scanf_i+0xd8>
 800b9c8:	f1bb 0f02 	cmp.w	fp, #2
 800b9cc:	d1ae      	bne.n	800b92c <_scanf_i+0x88>
 800b9ce:	6822      	ldr	r2, [r4, #0]
 800b9d0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b9d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b9d8:	d1bf      	bne.n	800b95a <_scanf_i+0xb6>
 800b9da:	2310      	movs	r3, #16
 800b9dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9e0:	6063      	str	r3, [r4, #4]
 800b9e2:	e7a2      	b.n	800b92a <_scanf_i+0x86>
 800b9e4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b9e8:	6022      	str	r2, [r4, #0]
 800b9ea:	780b      	ldrb	r3, [r1, #0]
 800b9ec:	f805 3b01 	strb.w	r3, [r5], #1
 800b9f0:	e7de      	b.n	800b9b0 <_scanf_i+0x10c>
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4650      	mov	r0, sl
 800b9f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b9fa:	4798      	blx	r3
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d0df      	beq.n	800b9c0 <_scanf_i+0x11c>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	05d9      	lsls	r1, r3, #23
 800ba04:	d50d      	bpl.n	800ba22 <_scanf_i+0x17e>
 800ba06:	42bd      	cmp	r5, r7
 800ba08:	d909      	bls.n	800ba1e <_scanf_i+0x17a>
 800ba0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba0e:	4632      	mov	r2, r6
 800ba10:	4650      	mov	r0, sl
 800ba12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba16:	f105 39ff 	add.w	r9, r5, #4294967295
 800ba1a:	4798      	blx	r3
 800ba1c:	464d      	mov	r5, r9
 800ba1e:	42bd      	cmp	r5, r7
 800ba20:	d028      	beq.n	800ba74 <_scanf_i+0x1d0>
 800ba22:	6822      	ldr	r2, [r4, #0]
 800ba24:	f012 0210 	ands.w	r2, r2, #16
 800ba28:	d113      	bne.n	800ba52 <_scanf_i+0x1ae>
 800ba2a:	702a      	strb	r2, [r5, #0]
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	6863      	ldr	r3, [r4, #4]
 800ba30:	4650      	mov	r0, sl
 800ba32:	9e01      	ldr	r6, [sp, #4]
 800ba34:	47b0      	blx	r6
 800ba36:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3a:	6821      	ldr	r1, [r4, #0]
 800ba3c:	1d1a      	adds	r2, r3, #4
 800ba3e:	f8c8 2000 	str.w	r2, [r8]
 800ba42:	f011 0f20 	tst.w	r1, #32
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	d00f      	beq.n	800ba6a <_scanf_i+0x1c6>
 800ba4a:	6018      	str	r0, [r3, #0]
 800ba4c:	68e3      	ldr	r3, [r4, #12]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	60e3      	str	r3, [r4, #12]
 800ba52:	2000      	movs	r0, #0
 800ba54:	1bed      	subs	r5, r5, r7
 800ba56:	44ab      	add	fp, r5
 800ba58:	6925      	ldr	r5, [r4, #16]
 800ba5a:	445d      	add	r5, fp
 800ba5c:	6125      	str	r5, [r4, #16]
 800ba5e:	b007      	add	sp, #28
 800ba60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba64:	f04f 0b00 	mov.w	fp, #0
 800ba68:	e7ca      	b.n	800ba00 <_scanf_i+0x15c>
 800ba6a:	07ca      	lsls	r2, r1, #31
 800ba6c:	bf4c      	ite	mi
 800ba6e:	8018      	strhmi	r0, [r3, #0]
 800ba70:	6018      	strpl	r0, [r3, #0]
 800ba72:	e7eb      	b.n	800ba4c <_scanf_i+0x1a8>
 800ba74:	2001      	movs	r0, #1
 800ba76:	e7f2      	b.n	800ba5e <_scanf_i+0x1ba>
 800ba78:	0800cb54 	.word	0x0800cb54
 800ba7c:	0800bca9 	.word	0x0800bca9
 800ba80:	0800a8d9 	.word	0x0800a8d9
 800ba84:	0800cd90 	.word	0x0800cd90

0800ba88 <_putc_r>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	4614      	mov	r4, r2
 800ba8e:	4606      	mov	r6, r0
 800ba90:	b118      	cbz	r0, 800ba9a <_putc_r+0x12>
 800ba92:	6983      	ldr	r3, [r0, #24]
 800ba94:	b90b      	cbnz	r3, 800ba9a <_putc_r+0x12>
 800ba96:	f7fe fb91 	bl	800a1bc <__sinit>
 800ba9a:	4b1c      	ldr	r3, [pc, #112]	; (800bb0c <_putc_r+0x84>)
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	d124      	bne.n	800baea <_putc_r+0x62>
 800baa0:	6874      	ldr	r4, [r6, #4]
 800baa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baa4:	07d8      	lsls	r0, r3, #31
 800baa6:	d405      	bmi.n	800bab4 <_putc_r+0x2c>
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	0599      	lsls	r1, r3, #22
 800baac:	d402      	bmi.n	800bab4 <_putc_r+0x2c>
 800baae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bab0:	f7fe fc47 	bl	800a342 <__retarget_lock_acquire_recursive>
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	60a3      	str	r3, [r4, #8]
 800babc:	da05      	bge.n	800baca <_putc_r+0x42>
 800babe:	69a2      	ldr	r2, [r4, #24]
 800bac0:	4293      	cmp	r3, r2
 800bac2:	db1c      	blt.n	800bafe <_putc_r+0x76>
 800bac4:	b2eb      	uxtb	r3, r5
 800bac6:	2b0a      	cmp	r3, #10
 800bac8:	d019      	beq.n	800bafe <_putc_r+0x76>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	1c5a      	adds	r2, r3, #1
 800bace:	6022      	str	r2, [r4, #0]
 800bad0:	701d      	strb	r5, [r3, #0]
 800bad2:	b2ed      	uxtb	r5, r5
 800bad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bad6:	07da      	lsls	r2, r3, #31
 800bad8:	d405      	bmi.n	800bae6 <_putc_r+0x5e>
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	059b      	lsls	r3, r3, #22
 800bade:	d402      	bmi.n	800bae6 <_putc_r+0x5e>
 800bae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bae2:	f7fe fc2f 	bl	800a344 <__retarget_lock_release_recursive>
 800bae6:	4628      	mov	r0, r5
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
 800baea:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <_putc_r+0x88>)
 800baec:	429c      	cmp	r4, r3
 800baee:	d101      	bne.n	800baf4 <_putc_r+0x6c>
 800baf0:	68b4      	ldr	r4, [r6, #8]
 800baf2:	e7d6      	b.n	800baa2 <_putc_r+0x1a>
 800baf4:	4b07      	ldr	r3, [pc, #28]	; (800bb14 <_putc_r+0x8c>)
 800baf6:	429c      	cmp	r4, r3
 800baf8:	bf08      	it	eq
 800bafa:	68f4      	ldreq	r4, [r6, #12]
 800bafc:	e7d1      	b.n	800baa2 <_putc_r+0x1a>
 800bafe:	4629      	mov	r1, r5
 800bb00:	4622      	mov	r2, r4
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7fe fef4 	bl	800a8f0 <__swbuf_r>
 800bb08:	4605      	mov	r5, r0
 800bb0a:	e7e3      	b.n	800bad4 <_putc_r+0x4c>
 800bb0c:	0800cd00 	.word	0x0800cd00
 800bb10:	0800cd20 	.word	0x0800cd20
 800bb14:	0800cce0 	.word	0x0800cce0

0800bb18 <_read_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	4611      	mov	r1, r2
 800bb20:	2200      	movs	r2, #0
 800bb22:	4d05      	ldr	r5, [pc, #20]	; (800bb38 <_read_r+0x20>)
 800bb24:	602a      	str	r2, [r5, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	f7f7 fc3e 	bl	80033a8 <_read>
 800bb2c:	1c43      	adds	r3, r0, #1
 800bb2e:	d102      	bne.n	800bb36 <_read_r+0x1e>
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	b103      	cbz	r3, 800bb36 <_read_r+0x1e>
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
 800bb38:	20003cec 	.word	0x20003cec

0800bb3c <__sccl>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	780b      	ldrb	r3, [r1, #0]
 800bb40:	4604      	mov	r4, r0
 800bb42:	2b5e      	cmp	r3, #94	; 0x5e
 800bb44:	bf13      	iteet	ne
 800bb46:	2200      	movne	r2, #0
 800bb48:	2201      	moveq	r2, #1
 800bb4a:	784b      	ldrbeq	r3, [r1, #1]
 800bb4c:	1c48      	addne	r0, r1, #1
 800bb4e:	bf08      	it	eq
 800bb50:	1c88      	addeq	r0, r1, #2
 800bb52:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bb56:	1e61      	subs	r1, r4, #1
 800bb58:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bb5c:	42a9      	cmp	r1, r5
 800bb5e:	d1fb      	bne.n	800bb58 <__sccl+0x1c>
 800bb60:	b90b      	cbnz	r3, 800bb66 <__sccl+0x2a>
 800bb62:	3801      	subs	r0, #1
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
 800bb66:	f082 0101 	eor.w	r1, r2, #1
 800bb6a:	54e1      	strb	r1, [r4, r3]
 800bb6c:	1c42      	adds	r2, r0, #1
 800bb6e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800bb72:	4610      	mov	r0, r2
 800bb74:	2d2d      	cmp	r5, #45	; 0x2d
 800bb76:	f102 36ff 	add.w	r6, r2, #4294967295
 800bb7a:	d006      	beq.n	800bb8a <__sccl+0x4e>
 800bb7c:	2d5d      	cmp	r5, #93	; 0x5d
 800bb7e:	d0f1      	beq.n	800bb64 <__sccl+0x28>
 800bb80:	b90d      	cbnz	r5, 800bb86 <__sccl+0x4a>
 800bb82:	4630      	mov	r0, r6
 800bb84:	e7ee      	b.n	800bb64 <__sccl+0x28>
 800bb86:	462b      	mov	r3, r5
 800bb88:	e7ef      	b.n	800bb6a <__sccl+0x2e>
 800bb8a:	7816      	ldrb	r6, [r2, #0]
 800bb8c:	2e5d      	cmp	r6, #93	; 0x5d
 800bb8e:	d0fa      	beq.n	800bb86 <__sccl+0x4a>
 800bb90:	42b3      	cmp	r3, r6
 800bb92:	dcf8      	bgt.n	800bb86 <__sccl+0x4a>
 800bb94:	4618      	mov	r0, r3
 800bb96:	3001      	adds	r0, #1
 800bb98:	4286      	cmp	r6, r0
 800bb9a:	5421      	strb	r1, [r4, r0]
 800bb9c:	dcfb      	bgt.n	800bb96 <__sccl+0x5a>
 800bb9e:	43d8      	mvns	r0, r3
 800bba0:	4430      	add	r0, r6
 800bba2:	42b3      	cmp	r3, r6
 800bba4:	bfa8      	it	ge
 800bba6:	2000      	movge	r0, #0
 800bba8:	1c5d      	adds	r5, r3, #1
 800bbaa:	182b      	adds	r3, r5, r0
 800bbac:	3202      	adds	r2, #2
 800bbae:	e7de      	b.n	800bb6e <__sccl+0x32>

0800bbb0 <_strtoul_l.isra.0>:
 800bbb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbb4:	468c      	mov	ip, r1
 800bbb6:	4686      	mov	lr, r0
 800bbb8:	4e3a      	ldr	r6, [pc, #232]	; (800bca4 <_strtoul_l.isra.0+0xf4>)
 800bbba:	4660      	mov	r0, ip
 800bbbc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800bbc0:	5da5      	ldrb	r5, [r4, r6]
 800bbc2:	f015 0508 	ands.w	r5, r5, #8
 800bbc6:	d1f8      	bne.n	800bbba <_strtoul_l.isra.0+0xa>
 800bbc8:	2c2d      	cmp	r4, #45	; 0x2d
 800bbca:	d134      	bne.n	800bc36 <_strtoul_l.isra.0+0x86>
 800bbcc:	f04f 0801 	mov.w	r8, #1
 800bbd0:	f89c 4000 	ldrb.w	r4, [ip]
 800bbd4:	f100 0c02 	add.w	ip, r0, #2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d05e      	beq.n	800bc9a <_strtoul_l.isra.0+0xea>
 800bbdc:	2b10      	cmp	r3, #16
 800bbde:	d10c      	bne.n	800bbfa <_strtoul_l.isra.0+0x4a>
 800bbe0:	2c30      	cmp	r4, #48	; 0x30
 800bbe2:	d10a      	bne.n	800bbfa <_strtoul_l.isra.0+0x4a>
 800bbe4:	f89c 0000 	ldrb.w	r0, [ip]
 800bbe8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bbec:	2858      	cmp	r0, #88	; 0x58
 800bbee:	d14f      	bne.n	800bc90 <_strtoul_l.isra.0+0xe0>
 800bbf0:	2310      	movs	r3, #16
 800bbf2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800bbf6:	f10c 0c02 	add.w	ip, ip, #2
 800bbfa:	f04f 37ff 	mov.w	r7, #4294967295
 800bbfe:	fbb7 f7f3 	udiv	r7, r7, r3
 800bc02:	2500      	movs	r5, #0
 800bc04:	fb03 f907 	mul.w	r9, r3, r7
 800bc08:	4628      	mov	r0, r5
 800bc0a:	ea6f 0909 	mvn.w	r9, r9
 800bc0e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800bc12:	2e09      	cmp	r6, #9
 800bc14:	d818      	bhi.n	800bc48 <_strtoul_l.isra.0+0x98>
 800bc16:	4634      	mov	r4, r6
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	dd24      	ble.n	800bc66 <_strtoul_l.isra.0+0xb6>
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	db1f      	blt.n	800bc60 <_strtoul_l.isra.0+0xb0>
 800bc20:	4287      	cmp	r7, r0
 800bc22:	d31d      	bcc.n	800bc60 <_strtoul_l.isra.0+0xb0>
 800bc24:	d101      	bne.n	800bc2a <_strtoul_l.isra.0+0x7a>
 800bc26:	45a1      	cmp	r9, r4
 800bc28:	db1a      	blt.n	800bc60 <_strtoul_l.isra.0+0xb0>
 800bc2a:	2501      	movs	r5, #1
 800bc2c:	fb00 4003 	mla	r0, r0, r3, r4
 800bc30:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800bc34:	e7eb      	b.n	800bc0e <_strtoul_l.isra.0+0x5e>
 800bc36:	2c2b      	cmp	r4, #43	; 0x2b
 800bc38:	bf08      	it	eq
 800bc3a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800bc3e:	46a8      	mov	r8, r5
 800bc40:	bf08      	it	eq
 800bc42:	f100 0c02 	addeq.w	ip, r0, #2
 800bc46:	e7c7      	b.n	800bbd8 <_strtoul_l.isra.0+0x28>
 800bc48:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800bc4c:	2e19      	cmp	r6, #25
 800bc4e:	d801      	bhi.n	800bc54 <_strtoul_l.isra.0+0xa4>
 800bc50:	3c37      	subs	r4, #55	; 0x37
 800bc52:	e7e1      	b.n	800bc18 <_strtoul_l.isra.0+0x68>
 800bc54:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800bc58:	2e19      	cmp	r6, #25
 800bc5a:	d804      	bhi.n	800bc66 <_strtoul_l.isra.0+0xb6>
 800bc5c:	3c57      	subs	r4, #87	; 0x57
 800bc5e:	e7db      	b.n	800bc18 <_strtoul_l.isra.0+0x68>
 800bc60:	f04f 35ff 	mov.w	r5, #4294967295
 800bc64:	e7e4      	b.n	800bc30 <_strtoul_l.isra.0+0x80>
 800bc66:	2d00      	cmp	r5, #0
 800bc68:	da07      	bge.n	800bc7a <_strtoul_l.isra.0+0xca>
 800bc6a:	2322      	movs	r3, #34	; 0x22
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc70:	f8ce 3000 	str.w	r3, [lr]
 800bc74:	b942      	cbnz	r2, 800bc88 <_strtoul_l.isra.0+0xd8>
 800bc76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc7a:	f1b8 0f00 	cmp.w	r8, #0
 800bc7e:	d000      	beq.n	800bc82 <_strtoul_l.isra.0+0xd2>
 800bc80:	4240      	negs	r0, r0
 800bc82:	2a00      	cmp	r2, #0
 800bc84:	d0f7      	beq.n	800bc76 <_strtoul_l.isra.0+0xc6>
 800bc86:	b10d      	cbz	r5, 800bc8c <_strtoul_l.isra.0+0xdc>
 800bc88:	f10c 31ff 	add.w	r1, ip, #4294967295
 800bc8c:	6011      	str	r1, [r2, #0]
 800bc8e:	e7f2      	b.n	800bc76 <_strtoul_l.isra.0+0xc6>
 800bc90:	2430      	movs	r4, #48	; 0x30
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1b1      	bne.n	800bbfa <_strtoul_l.isra.0+0x4a>
 800bc96:	2308      	movs	r3, #8
 800bc98:	e7af      	b.n	800bbfa <_strtoul_l.isra.0+0x4a>
 800bc9a:	2c30      	cmp	r4, #48	; 0x30
 800bc9c:	d0a2      	beq.n	800bbe4 <_strtoul_l.isra.0+0x34>
 800bc9e:	230a      	movs	r3, #10
 800bca0:	e7ab      	b.n	800bbfa <_strtoul_l.isra.0+0x4a>
 800bca2:	bf00      	nop
 800bca4:	0800cbdf 	.word	0x0800cbdf

0800bca8 <_strtoul_r>:
 800bca8:	f7ff bf82 	b.w	800bbb0 <_strtoul_l.isra.0>

0800bcac <__submore>:
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	d11b      	bne.n	800bcf4 <__submore+0x48>
 800bcbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bcc0:	f7fe fba4 	bl	800a40c <_malloc_r>
 800bcc4:	b918      	cbnz	r0, 800bcce <__submore+0x22>
 800bcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd2:	63a3      	str	r3, [r4, #56]	; 0x38
 800bcd4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bcd8:	6360      	str	r0, [r4, #52]	; 0x34
 800bcda:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bcde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bce2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bce6:	7043      	strb	r3, [r0, #1]
 800bce8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bcec:	7003      	strb	r3, [r0, #0]
 800bcee:	6020      	str	r0, [r4, #0]
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	e7ea      	b.n	800bcca <__submore+0x1e>
 800bcf4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bcf6:	0077      	lsls	r7, r6, #1
 800bcf8:	463a      	mov	r2, r7
 800bcfa:	f000 f859 	bl	800bdb0 <_realloc_r>
 800bcfe:	4605      	mov	r5, r0
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d0e0      	beq.n	800bcc6 <__submore+0x1a>
 800bd04:	eb00 0806 	add.w	r8, r0, r6
 800bd08:	4601      	mov	r1, r0
 800bd0a:	4632      	mov	r2, r6
 800bd0c:	4640      	mov	r0, r8
 800bd0e:	f7fe fb1a 	bl	800a346 <memcpy>
 800bd12:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bd16:	f8c4 8000 	str.w	r8, [r4]
 800bd1a:	e7e9      	b.n	800bcf0 <__submore+0x44>

0800bd1c <_fstat_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	2300      	movs	r3, #0
 800bd20:	4d06      	ldr	r5, [pc, #24]	; (800bd3c <_fstat_r+0x20>)
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	f7f7 fb65 	bl	80033f8 <_fstat>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	d102      	bne.n	800bd38 <_fstat_r+0x1c>
 800bd32:	682b      	ldr	r3, [r5, #0]
 800bd34:	b103      	cbz	r3, 800bd38 <_fstat_r+0x1c>
 800bd36:	6023      	str	r3, [r4, #0]
 800bd38:	bd38      	pop	{r3, r4, r5, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20003cec 	.word	0x20003cec

0800bd40 <_isatty_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	2300      	movs	r3, #0
 800bd44:	4d05      	ldr	r5, [pc, #20]	; (800bd5c <_isatty_r+0x1c>)
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	602b      	str	r3, [r5, #0]
 800bd4c:	f7f7 fb63 	bl	8003416 <_isatty>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_isatty_r+0x1a>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_isatty_r+0x1a>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20003cec 	.word	0x20003cec

0800bd60 <memchr>:
 800bd60:	4603      	mov	r3, r0
 800bd62:	b510      	push	{r4, lr}
 800bd64:	b2c9      	uxtb	r1, r1
 800bd66:	4402      	add	r2, r0
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	d101      	bne.n	800bd72 <memchr+0x12>
 800bd6e:	2000      	movs	r0, #0
 800bd70:	e003      	b.n	800bd7a <memchr+0x1a>
 800bd72:	7804      	ldrb	r4, [r0, #0]
 800bd74:	3301      	adds	r3, #1
 800bd76:	428c      	cmp	r4, r1
 800bd78:	d1f6      	bne.n	800bd68 <memchr+0x8>
 800bd7a:	bd10      	pop	{r4, pc}

0800bd7c <memmove>:
 800bd7c:	4288      	cmp	r0, r1
 800bd7e:	b510      	push	{r4, lr}
 800bd80:	eb01 0402 	add.w	r4, r1, r2
 800bd84:	d902      	bls.n	800bd8c <memmove+0x10>
 800bd86:	4284      	cmp	r4, r0
 800bd88:	4623      	mov	r3, r4
 800bd8a:	d807      	bhi.n	800bd9c <memmove+0x20>
 800bd8c:	1e43      	subs	r3, r0, #1
 800bd8e:	42a1      	cmp	r1, r4
 800bd90:	d008      	beq.n	800bda4 <memmove+0x28>
 800bd92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd9a:	e7f8      	b.n	800bd8e <memmove+0x12>
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	4402      	add	r2, r0
 800bda0:	428a      	cmp	r2, r1
 800bda2:	d100      	bne.n	800bda6 <memmove+0x2a>
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdae:	e7f7      	b.n	800bda0 <memmove+0x24>

0800bdb0 <_realloc_r>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	4614      	mov	r4, r2
 800bdb6:	460e      	mov	r6, r1
 800bdb8:	b921      	cbnz	r1, 800bdc4 <_realloc_r+0x14>
 800bdba:	4611      	mov	r1, r2
 800bdbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bdc0:	f7fe bb24 	b.w	800a40c <_malloc_r>
 800bdc4:	b922      	cbnz	r2, 800bdd0 <_realloc_r+0x20>
 800bdc6:	f7fe fad5 	bl	800a374 <_free_r>
 800bdca:	4625      	mov	r5, r4
 800bdcc:	4628      	mov	r0, r5
 800bdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd0:	f000 f814 	bl	800bdfc <_malloc_usable_size_r>
 800bdd4:	42a0      	cmp	r0, r4
 800bdd6:	d20f      	bcs.n	800bdf8 <_realloc_r+0x48>
 800bdd8:	4621      	mov	r1, r4
 800bdda:	4638      	mov	r0, r7
 800bddc:	f7fe fb16 	bl	800a40c <_malloc_r>
 800bde0:	4605      	mov	r5, r0
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d0f2      	beq.n	800bdcc <_realloc_r+0x1c>
 800bde6:	4631      	mov	r1, r6
 800bde8:	4622      	mov	r2, r4
 800bdea:	f7fe faac 	bl	800a346 <memcpy>
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f7fe fabf 	bl	800a374 <_free_r>
 800bdf6:	e7e9      	b.n	800bdcc <_realloc_r+0x1c>
 800bdf8:	4635      	mov	r5, r6
 800bdfa:	e7e7      	b.n	800bdcc <_realloc_r+0x1c>

0800bdfc <_malloc_usable_size_r>:
 800bdfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be00:	1f18      	subs	r0, r3, #4
 800be02:	2b00      	cmp	r3, #0
 800be04:	bfbc      	itt	lt
 800be06:	580b      	ldrlt	r3, [r1, r0]
 800be08:	18c0      	addlt	r0, r0, r3
 800be0a:	4770      	bx	lr

0800be0c <_init>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr

0800be18 <_fini>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	bf00      	nop
 800be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1e:	bc08      	pop	{r3}
 800be20:	469e      	mov	lr, r3
 800be22:	4770      	bx	lr
